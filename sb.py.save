# -*- coding: utf-8 -*-

from linepy import *
from thrift.protocol import TCompactProtocol
from thrift.transport import THttpClient
from akad.ttypes import IdentityProvider, LoginResultType, LoginRequest, LoginType
from gtts import gTTS
from bs4 import BeautifulSoup
from bs4.element import Tag
import requests as uReq
from datetime import datetime
from googletrans import Translator
from zalgo_text import zalgo
import ast, codecs, json, os, pytz, re, LineService, random, sys, time, urllib.parse, subprocess, threading, pyqrcode, pafy, humanize, os.path, traceback
from threading import Thread,Event
import requests,uvloop
import wikipedia as wiki
requests.packages.urllib3.disable_warnings()
loop = uvloop.new_event_loop()

listApp = [
    "IOSIPAD\t8.12.2\tHelloWorld\t8.22.17", 
    "CHROMEOS\t2.1.5\tHelloWorld\t11.2.5", 
    "DESKTOPWIN\t5.9.2\tHelloWorld\t11.2.5", 
    "DESKTOPMAC\t5.9.2\tHelloWorld\t11.2.5", 
    "WIN10\t5.5.5\tHelloWorld\t11.2.5"
]
try:
	for app in listApp:
		try:
			try:
				with open("authToken.txt", "r") as token:
					authToken = token.read()
					if not authToken:
						client = LINE()
						with open("authToken.txt","w") as token:
							token.write(client.authToken)
						continue
					client = LINE(authToken, speedThrift=False, appName="{}\t2.1.5\tAditmadzs\t11.2.5".format(app))
				break
			except Exception as error:
				print(error)
				if error == "REVOKE":
					exit()
				elif "auth" in error:
					continue
				else:
					exit()
		except Exception as error:
			print(error)
except Exception as error:
	print(error)
clientMid = client.profile.mid
clientStart = time.time()
clientPoll = OEPoll(client)

languageOpen = codecs.open("language.json","r","utf-8")
mentioOpen = codecs.open("tagme.json","r","utf-8")
readOpen = codecs.open("read.json","r","utf-8")
settingsOpen = codecs.open("setting.json","r","utf-8")
unsendOpen = codecs.open("unsend.json","r","utf-8")
ownerOpen = codecs.open("owner.json","r","utf-8")
adminOpen = codecs.open("admin.json","r","utf-8")
stickerOpen = codecs.open("sticker.json","r","utf-8")
stickertOpen = codecs.open("stickertemplate.json","r","utf-8")
textaddOpen = codecs.open("text.json","r","utf-8")
imagesOpen = codecs.open("image.json","r","utf-8")
waitOpen = codecs.open("wait.json","r","utf-8")
answeOpen = codecs.open("autoanswer.json","r","utf-8")

language = json.load(languageOpen)
tagme = json.load(mentioOpen)
read = json.load(readOpen)
settings = json.load(settingsOpen)
unsend = json.load(unsendOpen)
owner = json.load(ownerOpen)
admin = json.load(adminOpen)
stickers = json.load(stickerOpen)
stickerstemplate = json.load(stickertOpen)
textsadd = json.load(textaddOpen)
images = json.load(imagesOpen)
wait = json.load(waitOpen)
autoanswer = json.load(answeOpen)

offbot = []
temp_flood = {}
ssnd = []
rynk = {
    "myProfile": {
        "displayName": "",
    }
}
RfuCctv={
    "Point1":{},
    "Point2":{},
    "Point3":{}
}
kasar = "kontol","memek","kntl","ajg","anjing","asw","anju","gblk","goblok","bgsd","bangsad","bangsat"

def restartBot():
    print ("[ INFO ] BOT RESETTED")
    python = sys.executable
    os.execl(python, python, *sys.argv)

def executeCmd(msg, text, txt, cmd, msg_id, receiver, sender, to, setKey):
    if cmd.startswith('ex\n'):
      if sender in clientMid:
        try:
            sep = text.split('\n')
            ryn = text.replace(sep[0] + '\n','')
            f = open('exec.txt', 'w')
            sys.stdout = f
            print(' ')
            exec(ryn)
            print('\n%s' % str(datetime.now()))
            f.close()
            sys.stdout = sys.__stdout__
            with open('exec.txt','r') as r:
                txt = r.read()
            client.sendMessage(to, txt)
        except Exception as e:
            pass
      else:
        client.sendMessage(to, 'Apalo !')
    elif cmd.startswith('exc\n'):
      if sender in clientMid:
        sep = text.split('\n')
        ryn = text.replace(sep[0] + '\n','')
        if 'print' in ryn:
        	ryn = ryn.replace('print(','client.sendExecMessage(to,')
        	exec(ryn)
        else:
        	exec(ryn)
      else:
        client.sendMessage(to, 'Apalo !')

def logError(text):
    client.log("[ ERROR ] {}".format(str(text)))
    tz = pytz.timezone("Asia/Makassar")
    timeNow = datetime.now(tz=tz)
    timeHours = datetime.strftime(timeNow,"(%H:%M)")
    day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
    hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
    bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
    inihari = datetime.now(tz=tz)
    hr = inihari.strftime('%A')
    bln = inihari.strftime('%m')
    for i in range(len(day)):
        if hr == day[i]: hasil = hari[i]
    for k in range(0, len(bulan)):
        if bln == str(k): bln = bulan[k-1]
    time = "{}, {} - {} - {} | {}".format(str(hasil), str(inihari.strftime('%d')), str(bln), str(inihari.strftime('%Y')), str(inihari.strftime('%H:%M:%S')))
    with open("errorLog.txt","a") as error:
        error.write("\n[{}] {}".format(str(time), text))

def waktu(self,secs):
    mins, secs = divmod(secs,60)
    hours, mins = divmod(mins,60)
    days, hours = divmod(hours, 24)
    return '%02d Hari %02d Jam %02d Menit %02d Detik' % (days, hours, mins, secs)

def timeChange(secs):
    mins, secs = divmod(secs,60)
    hours, mins = divmod(mins,60)
    days, hours = divmod(hours,24)
    weeks, days = divmod(days,7)
    months, weeks = divmod(weeks,4)
    text = ""
    if months != 0: text += "%02d Bulan" % (months)
    if weeks != 0: text += " %02d Minggu" % (weeks)
    if days != 0: text += " %02d Hari" % (days)
    if hours !=  0: text +=  " %02d Jam" % (hours)
    if mins != 0: text += " %02d Menit" % (mins)
    if secs != 0: text += " %02d Detik" % (secs)
    if text[0] == " ":
        text = text[1:]
    return text

def DESKTOPMAC():
    Headers = {
    'User-Agent': "Line/8.3.2",
    'X-Line-Application': "DESKTOPMAC\t5.9.2\tAditmadzsToken\tTools\t10.13.2",
    "x-lal": "ja-US_US",
    }
    return Headers
def DESKTOPWIN():
    Headers = {
    'User-Agent': "Line/8.3.2",
    'X-Line-Application': "DESKTOPWIN\t5.10.0\tAditmadzsToken\tTools\t10.13.2",
    "x-lal": "ja-US_US",
    }
    return Headers
def IOSIPAD():
    Headers = {
    'User-Agent': "Line/8.3.2",
    'X-Line-Application': "IOSIPAD\t8.12.2\tAditmadzsToken\tTools\t11.2.5",
    "x-lal": "ja-US_US",
    }
    return Headers
def CHROMEOS():
    Headers = {
    'User-Agent': "Line/8.3.2",
    'X-Line-Application': "CHROMEOS\t2.1.5\tAditmadzsToken\tTools\t11.2.5",
    "x-lal": "ja-US_US",
    }
    return Headers
def WIN10():
    Headers = {
    'User-Agent': "Line/8.3.2",
    'X-Line-Application': "WIN10\t5.5.5\tAditmadzsToken\tTools\t11.2.5",
    "x-lal": "ja-US_US",
    }
    return Headers
def ANDROID():
    Headers = {
    'User-Agent': "Line/8.3.2",
    'X-Line-Application': "ANDROID\t8.12.5\tAditmadzsToken\tTools\t11.2.5",
    "x-lal": "ja-US_US",
    }
    return Headers

def token(to,nametoken,msg_id,sender):
    try:
        a = nametoken
        a.update({'x-lpqs' : '/api/v4/TalkService.do'})
        transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4/TalkService.do')
        transport.setCustomHeaders(a)
        protocol = TCompactProtocol.TCompactProtocol(transport)
        clienttoken = LineService.Client(protocol)
        qr = clienttoken.getAuthQrcode(keepLoggedIn=1, systemName='AditmadzsToken')
        link = "line://au/q/" + qr.verifier
        client.sendReplyMessage(msg_id, to, "Click This Link Only For 2 Minute :)\n\n{}".format(link))
        a.update({"x-lpqs" : '/api/v4/TalkService.do', 'X-Line-Access': qr.verifier})
        json.loads(requests.session().get('https://gd2.line.naver.jp/Q', headers=a).text)
        a.update({'x-lpqs' : '/api/v4p/rs'})
        transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4p/rs')
        transport.setCustomHeaders(a)
        protocol = TCompactProtocol.TCompactProtocol(transport)
        clienttoken = LineService.Client(protocol)
        req = LoginRequest()
        req.type = 1
        req.verifier = qr.verifier
        req.e2eeVersion = 1
        res = clienttoken.loginZ(req)
        try:
            token = res.authToken
            contact = client.getContact(sender)
            client.sendMessage(sender, "Nama : {}\nMid : {}\nTOKEN : {}\n\nCreator".format(contact.displayName,contact.mid,token))
            client.sendContact(sender, clientMid)
        except Exception as e:
            client.sendMessage(to, str(e))
    except Exception as error:
        client.sendMessage(to, "Login KONTOL")

def searchRecentMessages(to,id):
    for a in client.talk.getRecentMessagesV2(to,101):
        if a.id == id:
            return a
    return None

def sendTemplates(to, data):
    data = data
    url = "https://api.line.me/message/v3/share"
    headers = {}
    headers['User-Agent'] = 'Mozilla/5.0 (Linux; Android 8.1.0; Redmi Note 5 Build/OPM1.171019.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/67.0.3396.87 Mobile Safari/537.36 Line/8.1.1'  
    headers['Content-Type'] = 'application/json'  
    headers['Authorization'] = 'Bearer eyJhbGciOiJIUzI1NiJ9.5uMcEEHahauPb5_MKAArvGzEP8dFOeVQeaMEUSjtlvMV9uuGpj827IGArKqVJhiGJy4vs8lkkseiNd-3lqST14THW-SlwGkIRZOrruV4genyXbiEEqZHfoztZbi5kTp9NFf2cxSxPt8YBUW1udeqKu2uRCApqJKzQFfYu3cveyk.GoRKUnfzfj7P2uAX9vYQf9WzVZi8MFcmJk8uFrLtTqU'
    sendPost = requests.post(url, data=json.dumps(data), headers=headers)
    print(sendPost)
    return sendPost

def rynSplitText(text,lp=''):
    separate = text.split(" ")
    if lp == '':
        adalah = text.replace(separate[0]+" ","")
    elif lp == 's':
        adalah = text.replace(separate[0]+" "+separate[1]+" ","")
    else:
        adalah = text.replace(separate[0]+" "+separate[1]+" "+separate[2]+" ","")
    return adalah

def Pertambahan(a,b):
    jum = a+b
    print(a, "+",b," = ",jum)
def Pengurangan(a,b):
    jum = a-b
    print(a, "-",b," = ",jum)
def Perkalian(a,b):
    jum = a*b
    print(a, "x",b," = ",jum)
def Pembagian(a,b):
    jum = a/b
    print(a, ":",b," = ",jum)
def Perpangkatan(a,b):
    jum = a**b
    print(a,"Pangkat ",b," = ",jum )

def urlEncode(url):
  import base64
  return base64.b64encode(url.encode()).decode('utf-8')

def urlDecode(url):
  import base64
  return base64.b64decode(url.encode()).decode('utf-8')

def removeCmdv(text, key=""):
    setKey = key
    text_ = text[len(setKey):]
    sep = text_.split(" ")
    return text_.replace(sep[0] + " ", "")

def removeCmd(cmd, text):
    key = settings["keyCommand"]
    if settings["setKey"] == False: key = ''
    rmv = len(key + cmd) + 1
    return text[rmv:]

def multiCommand(cmd, list_cmd=[]):
    if True in [cmd.startswith(c) for c in list_cmd]:
        return True
    else:
        return False

def command(text):
    pesan = text.lower()
    if settings["setKey"] == True:
        if pesan.startswith(settings["keyCommand"]):
            cmd = pesan.replace(settings["keyCommand"],"")
        else:
            cmd = "Undefined command"
    else:
        cmd = text.lower()
    return cmd
    
def commander(text):
    pesan = text.lower()
    if settings["setKey"] == False:
        if pesan.startswith(settings["keyCommand"]):
            cmd = pesan.replace(settings["keyCommand"],"")
        else:
            cmd = "Undefined command"
    else:
        cmd = text.lower()
    return cmd

def backupData():
    try:
        backup = read
        f = codecs.open('read.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = settings
        f = codecs.open('setting.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        backup = unsend
        f = codecs.open('unsend.json','w','utf-8')
        json.dump(backup, f, sort_keys=True, indent=4, ensure_ascii=False)
        bekep = tagme
        f = codecs.open('tagme.json','w','utf-8')
        json.dump(bekep, f, sort_keys=True, indent=4, ensure_ascii=False)
        return True
    except Exception as error:
        logError(error)
        return False

def GenPictureQRCode(to,url):
    fn=url+".png"
    wildan=pyqrcode.create(url)
    wildan.png(fn, scale=6, module_color=[0, 0, 0, 128], background="#FFFFFF")
    wildan.show()
    client.sendImage(to,fn)
    os.remove(fn)

def google_url_shorten(url):
    req_url = 'https://www.googleapis.com/urlshortener/v1/url?key=AIzaSyAzrJV41pMMDFUVPU0wRLtxlbEU-UkHMcI'
    payload = {'longUrl': url}
    headers = {'content-type': 'application/json'}
    r = requests.post(req_url, data=json.dumps(payload), headers=headers)
    resp = json.loads(r.text)
    #return resp['id'].replace("https://","")

def generateLink(to, ryn, rynurl=None):
    path = client.downloadFileURL('https://obs-sg.line-apps.com/talk/m/download.nhn?oid='+ryn, 'path','ryngenerate.jpg')
    data = {'register':'submit'}
    files = {"file": open(path,'rb')}
    url = 'https://fahminogameno.life/uploadimage/action.php'
    r = requests.post(url, data=data, files=files)
    client.sendMessage(to, '%s\n%s' % (r.status_code,r.text))
    client.sendMessage(to, '{}{}'.format(rynurl,urlEncode('https://fahminogameno.life/uploadimage/images/ryngenerate.png')))

def uploadFile(ryn):
    url = 'https://fahminogameno.life/uploadimage/action.php'
    path = client.downloadFileURL('https://obs-sg.line-apps.com/talk/m/download.nhn?oid='+ryn, 'path','ryngenerate.png')
    data = {'register':'submit'}
    files = {"file": open(path,'rb')}
    r = requests.post(url, data=data, files=files)
    if r.status_code == 200:
        return path

def youtubeMp3(to, link):
    subprocess.getoutput('youtube-dl --extract-audio --audio-format mp3 --output TeamAnuBot.mp3 {}'.format(link))
    try:
        client.sendAudio(to, 'TeamAnuBot.mp3')
        time.sleep(2)
        os.remove('TeamAnuBot.mp3')
    except Exception as e:
        client.sendMessage(to, 'ãERRORã\nMungkin Link salah cek lagi coba')
def youtubeMp4(to, link):
    subprocess.getoutput('youtube-dl --format mp4 --output TeamAnuBot.mp4 {}'.format(link))
    try:
        client.sendVideo(to, "TeamAnuBot.mp4")
        time.sleep(2)
        os.remove('TeamAnuBot.mp4')
    except Exception as e:
        client.sendMessage(to, ' 「 ERROR 」\nMungkin Link Nya Salah GaN~', contentMetadata = {'AGENT_ICON': 'http://dl.profile.line-cdn.net/'+client.getContact(clientMid).pictureStatus, 'AGENT_NAME': '「 ERROR 」', 'AGENT_LINK': 'https://line.me/ti/p/~mobaloghanabi.'})

def delExpire():
    if temp_flood != {}:
        for tmp in temp_flood:
            if temp_flood[tmp]["expire"] == True:
                if time.time() - temp_flood[tmp]["time"] >= 3*10:
                    temp_flood[tmp]["expire"] = False
                    temp_flood[tmp]["time"] = time.time()
                    try:
                        #userid = "https://line.me/ti/p/~" + cl.profile.userid
                        #cl.sendFooter(tmp, "Self Active again", str(userid), "http://dl.profile.line-cdn.net/"+cl.getContact(mid).pictureStatus, cl.getContact(mid).displayName)
                        veza = "「BOT ACTIVE AGAIN」"
                        client.sendMessage(tmp, veza, {'AGENT_LINK': "https://line.me/ti/p/~mobaloghanabi", 'AGENT_ICON': "http://klikuntung.com/images/messengers/line-logo.png", 'AGENT_NAME': "Detect Spam "})        
                    except Exception as error:
                        logError(error)

def delExpirev2():
    if temp_flood != {}:
        for tmp in temp_flood:
            if temp_flood[tmp]["expire"] == True:
                    temp_flood[tmp]["expire"] = False
                    temp_flood[tmp]["time"] = time.time()
                    try:
                        #userid = "https://line.me/ti/p/~" + cl.profile.userid
                        #cl.sendFooter(tmp, "Self Active again", str(userid), "http://dl.profile.line-cdn.net/"+cl.getContact(mid).pictureStatus, cl.getContact(mid).displayName)
                        veza = "「BOT ACTIVE AGAIN」"
                        client.sendMessage(tmp, veza, {'AGENT_LINK': "https://line.me/ti/p/~mobaloghanabi", 'AGENT_ICON': "http://klikuntung.com/images/messengers/line-logo.png", 'AGENT_NAME': "Detect Spam "})        
                    except Exception as error:
                        logError(error)

def sendHelp():
    sendhelp = settings["autoResponMessage"]
    client.sendMessage(to, sendhelp)
def menuHelp():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuHelp =  "╭───「 Help Message𝔰 」" + "\n" + \
                "├ " + key + "About" + "\n" + \
                "├ " + key + "List Token" + "\n" + \
                "├ " + key + "Help" + "\n" + \
                "├ " + key + "Translate" + "\n" + \
                "├ " + key + "TextToSpeech" + "\n" + \
                "├ " + key + "Status" + "\n" + \
                "├ " + key + "Settings" + "\n" + \
                "├ " + key + "Self" + "\n" + \
                "├ " + key + "Group" + "\n" + \
                "├ " + key + "Special" + "\n" + \
                "├ " + key + "Media" + "\n" + \
                "├ " + key + "Tag" + "\n" + \
                "├ " + key + "Status Setting" + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return menuHelp

def menuStat():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuStat =  "╭───「 Status𝔰 」" + "\n" + \
                "├ MyKey" + "\n" + \
                "├ " + key + "Logout" + "\n" + \
                "├ " + key + "Renew" + "\n" + \
                "├ " + key + "Runtime" + "\n" + \
                "├ " + key + "Speed" + "\n" + \
                "├ " + key + "Status" + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return menuStat
  
def menuSett():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuSett =  "╭───「 Setting Menu𝔰 」" + "\n" + \
                "├≽ SetKey 「On/Off」" + "\n" + \
                "├ " + key + "AutoAdd 「On/Off」" + "\n" + \
                "├ " + key + "AutoJoin 「On/Off」" + "\n" + \
                "├ " + key + "AutoJoinTicket 「On/Off」" + "\n" + \
                "├ " + key + "AutoJoinTicketBot 「On/Off」" + "\n" + \
                "├ " + key + "AutoRead 「On/Off」" + "\n" + \
                "├ " + key + "AutoRespon 「On/Off」" + "\n" + \
                "├ " + key + "CheckContact 「On/Off」" + "\n" + \
                "├ " + key + "CheckPost 「On/Off」" + "\n" + \
                "├ " + key + "CheckSticker 「On/Off」" + "\n" + \
                "├ " + key + "DetectUnsend 「On/Off」" + "\n" + \
                "├ " + key + "SetKey: 「text」" + "\n" + \
                "├ " + key + "Public 「On/Off」" + "\n" + \
                "├ " + key + "SetAutoAddMessage: 「text」" + "\n" + \
                "├ " + key + "SetAutoResponMessage: 「text」" + "\n" + \
                "├ " + key + "SetAutoJoinMessage: 「Text」" + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return menuSett

def statusSett():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    statusSett =  "╭───「 Status Menu𝔰 」" + "\n" + \
                "├ " + key + "Status Message" + "\n" + \
                "├ " + key + "Status Self" + "\n" + \
                "├ " + key + "Status Group" + "\n" + \
                "├ " + key + "Status Respon Chat" + "\n" + \
                "├ " + key + "Status Join Group" + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return statusSett
  
def menuSelf():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuSelf =  "╭───「 Self Menu 」" + "\n" + \
                "├ " + key + "ChangeName: 「Text」" + "\n" + \
                "├ " + key + "ChangeBio: 「Text」" + "\n" + \
                "├ " + key + "Me " + "\n" + \
                "├ " + key + "MyMid " + "\n" + \
                "├ " + key + "MyName " + "\n" + \
                "├ " + key + "MyBio " + "\n" + \
                "├ " + key + "MyPicture " + "\n" + \
                "├ " + key + "MyVideoProfile " + "\n" + \
                "├ " + key + "MyCover " + "\n" + \
                "├ " + key + "MyProfile " + "\n" + \
                "├ " + key + "GetMid @Mention " + "\n" + \
                "├ " + key + "GetName @Mention " + "\n" + \
                "├ " + key + "GetBio @Mention " + "\n" + \
                "├ " + key + "GetPicture @Mention " + "\n" + \
                "├ " + key + "GetVideoProfile @Mention " + "\n" + \
                "├ " + key + "GetCover @Mention " + "\n" + \
                "├ " + key + "CloneProfile @Mention " + "\n" + \
                "├ " + key + "RestoreProfile " + "\n" + \
                "├ " + key + "BackupProfile " + "\n" + \
                "├ " + key + "FriendList " + "\n" + \
                "├ " + key + "FriendInfo 「Number」 " + "\n" + \
                "├ " + key + "BlockList " + "\n" + \
                "├ " + key + "FriendBroadcast " + "\n" + \
                "├ " + key + "ChangePictureProfile" + "\n" + \
                "├ " + key + "Chattofr-「Num」-「Text」" + "\n" + \
                "├ " + key + "Spamchat 「On/Off」 「Num」 「Text」" + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return menuSelf
  
def menuGrup():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuGrup =  "╭───「 Group Menu 」" + "\n" + \
                "├ " + key + "ChangeGroupName: 「Text」" + "\n" + \
                "├ " + key + "GroupCreator " + "\n" + \
                "├ " + key + "GroupID " + "\n" + \
                "├ " + key + "GroupName " + "\n" + \
                "├ " + key + "GroupPicture " + "\n" + \
                "├ " + key + "OpenQR " + "\n" + \
                "├ " + key + "CloseQR " + "\n" + \
                "├ " + key + "GroupList " + "\n" + \
                "├ " + key + "MemberList " + "\n" + \
                "├ " + key + "PendingList " + "\n" + \
                "├ " + key + "Welcome " + "\n" + \
                "├ " + key + "GroupInfo " + "\n" + \
                "├ " + key + "GroupBroadcast: 「Text」" + "\n" + \
                "├ " + key + "ChangeGroupPicture " + "\n" + \
                "├ " + key + "Mute " + "\n" + \
                "├ " + key + "Unmute " + "\n" + \
                "├ " + key + "LeaveGC 「Num」" + "\n" + \
                "├ " + key + "SendCrashtoGC 「Num」" + "\n" + \
                "├ " + key + "InviteToGC 「Num」" + "\n" + \
                "├ " + key + "MuteBotInGC 「Num」" + "\n" + \
                "├ " + key + "UnmuteBotInGC 「Num」" + "\n" + \
                "├ " + key + "ChatOwner 「Text」" + "\n" + \
                "├ " + key + "Chattogc-「Num」-「Text」" + "\n" + \
                "├ " + key + "Gift" + "\n" + \
                "├ " + key + "SendGifttoGC 「Num」" + "\n" + \
                "├ " + key + "Spamtag 「Num」 「Mention」" + "\n" + \
                "├ " + key + "Spamcall 「Num」 「Mention」" + "\n" + \
                "├ " + key + "spamgroupcall 「Num」 " + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return menuGrup

def menuMention():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuMention =  "╭───「 Mention Menu𝔰 」" + "\n" + \
                "├ " + key + "Mimic 「On/Off」" + "\n" + \
                "├ " + key + "MimicList " + "\n" + \
                "├ " + key + "MimicAdd @Mention " + "\n" + \
                "├ " + key + "MimicDel @Mention " + "\n" + \
                "├ " + key + "UserAdd @Mention " + "\n" + \
                "├ " + key + "UserDel @Mention " + "\n" + \
                "├ " + key + "User List " + "\n" + \
                "├ " + key + "AdminAdd @Mention " + "\n" + \
                "├ " + key + "AdminDel @Mention " + "\n" + \
                "├ " + key + "Admin List " + "\n" + \
                "├ " + key + "MentionAll " + "\n" + \
                "├ " + key + "Mentionme " + "\n" + \
                "├ " + key + "DelMentionMe " + "\n" + \
                "├ " + key + "DelAllMentionMe " + "\n" + \
                "├────────────" + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return menuMention
  
def menuSpcl():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuSpcl =  "╭───「 Special Menu𝔰 」" + "\n" + \
                "├ " + key + "AddSticker「Text」" + "\n" + \
                "├ " + key + "DelSticker「Text」 " + "\n" + \
                "├ " + key + "ListSticker " + "\n" + \
                "├ " + key + "AddStickerTemplate「Text」" + "\n" + \
                "├ " + key + "DelStickerTemplate「Text」 " + "\n" + \
                "├ " + key + "ListStickerTemplate " + "\n" + \
                "├ " + key + "AddImage「Text」" + "\n" + \
                "├ " + key + "DelImage「Text」 " + "\n" + \
                "├ " + key + "ListImage " + "\n" + \
                "├ " + key + "AddText「Text」" + "\n" + \
                "├ " + key + "DelText「Text」 " + "\n" + \
                "├ " + key + "ListText " + "\n" + \
                "├ " + key + "Lurking 「On/Off」" + "\n" + \
                "├ " + key + "Lurking " + "\n" + \
                "├────────────" + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return menuSpcl
  
def menuMdia():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuMdia =  "╭───「 Media Menu𝔰 」" + "\n" + \
                "├ " + key + "Al-Quran 「Number」" + "\n" + \
                "├ " + key + "AnimeStream「Search」 " + "\n" + \
                "├ " + key + "Aniongoing *" + "\n" + \
                "├ " + key + "ArtiMimpi 「Mimpi」" + "\n" + \
                "├ " + key + "ArtiNama 「Name」" + "\n" + \
                "├ " + key + "AsmaulHusna 「Number」" + "\n" + \
                "├ " + key + "Ayat Sajadah" + "\n" + \
                "├ " + key + "Brainly 「Text」" + "\n" + \
                "├ " + key + "CoolText 「Text」" + "\n" + \
                "├ " + key + "Danbooru「Page」" + "\n" + \
                "├ " + key + "Drakor「Search」 " + "\n" + \
                "├ " + key + "DrakorOnGoing " + "\n" + \
                "├ " + key + "FoggingWindows 「Text」 「Num 1 - 3」" + "\n" + \
                "├ " + key + "FsCosplay 「Text」" + "\n" + \
                "├ " + key + "Fsv 「Text」" + "\n" + \
                "├ " + key + "Graffity 「Text」" + "\n" + \
                "├ " + key + "Instagram 「Username」" + "\n" + \
                "├ " + key + "InstaPost 「Url」" + "\n" + \
                "├ " + key + "InstaStory 「Username」" + "\n" + \
                "├ " + key + "LedText 「Text」" + "\n" + \
                "├ " + key + "LineDownload 「URL」" + "\n" + \
                "├ " + key + "LinePost 「URL」" + "\n" + \
                "├ " + key + "Motivation" + "\n" + \
                "├ " + key + "MtoH(Masehi to Hijriaj) 「Date」" + "\n" + \
                "├ " + key + "Murrotal 「Num」" + "\n" + \
                "├ " + key + "NeonText 「Text」" + "\n" + \
                "├ " + key + "NewDrakor " + "\n" + \
                "├ " + key + "Praytime「Kota」" + "\n" + \
                "├ " + key + "PrettyJSON 「URL」" + "\n" + \
                "├ " + key + "Pulsk *" + "\n" + \
                "├ " + key + "Quotes " + "\n" + \
                "├ " + key + "Retrowave 「Text」 「Text2」 「Text3」 「Num 1 - 5」 「Num 1 - 4」" + "\n" + \
                "├ " + key + "Samehadaku 「Anime Name」" + "\n" + \
                "├ " + key + "SearchImage 「Search」" + "\n" + \
                "├ " + key + "SearchLyric 「Search」" + "\n" + \
                "├ " + key + "SearchMusic 「Search」" + "\n" + \
                "├ " + key + "SearchYoutube 「Search」" + "\n" + \
                "├ " + key + "SoupsLetters「Text」" + "\n" + \
                "├ " + key + "SSWEB 「Url」" + "\n" + \
                "├ " + key + "Stickerline「Text」" + "\n" + \
                "├ " + key + "StreetSigns 「Text」" + "\n" + \
                "├ " + key + "Themeline「Text」" + "\n" + \
                "├ " + key + "Token ChromeOS " + "\n" + \
                "├ " + key + "Waifu「Name」" + "\n" + \
                "├ " + key + "WhoIs 「Name」" + "\n" + \
                "├ " + key + "WriteCookies 「Text」" + "\n" + \
                "├ " + key + "Youtube 「Search」" + "\n" + \
                "├ " + key + "YtDownload「Url」*" + "\n" + \
                "├ " + key + "YtMp3 「Url」" + "\n" + \
                "├ " + key + "YtMp4 「Url」" + "\n" + \
                "├────────────" + "\n" + \
                "├ * = Under Maintenance" + "\n" + \
                "├ ^ = Coming Soon" + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return menuMdia

def menuBot():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuBot =  "╭───「 Bot Menu𝔰 」" + "\n" + \
                "├ " + key + "Changename: 「Text」" + "\n" + \
                "├ " + key + "Changebio: 「Text」" + "\n" + \
                "├ " + key + "Changecover" + "\n" + \
                "├ " + key + "Changepict" + "\n" + \
                "├ " + key + "Changedual" + "\n" + \
                "├ " + key + "Clear Chat" + "\n" + \
                "├ " + key + "Spaminvite|「Group Name」|「Num」|@Mention" + "\n" + \
                "├ " + key + "Spaminvmid|「Group Name」|「Num」|「MID」" + "\n" + \
                "├ " + key + "Grouplist" + "\n" + \
                "├ " + key + "Responsename" + "\n" + \
                "├ " + key + "MyBot" + "\n" + \
                "├Creator : • Aditmadzs and Ryn" + "\n" + \
                "╰───「 {} 」".format(client.getProfile().displayName)
    return menuBot
  
def menuTextToSpeech():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuTextToSpeech =  "╭───「 Text To Speech 」" + "\n" + \
                        "├≽ " + key + "af : Afrikaans" + "\n" + \
                        "├≽ " + key + "sq : Albanian" + "\n" + \
                        "├≽ " + key + "ar : Arabic" + "\n" + \
                        "├≽ " + key + "hy : Armenian" + "\n" + \
                        "├≽ " + key + "bn : Bengali" + "\n" + \
                        "├≽ " + key + "ca : Catalan" + "\n" + \
                        "├≽ " + key + "zh : Chinese" + "\n" + \
                        "├≽ " + key + "zh-cn : Chinese (Mandarin/China)" + "\n" + \
                        "├≽ " + key + "zh-tw : Chinese (Mandarin/Taiwan)" + "\n" + \
                        "├≽ " + key + "zh-yue : Chinese (Cantonese)" + "\n" + \
                        "├≽ " + key + "hr : Croatian" + "\n" + \
                        "├≽ " + key + "cs : Czech" + "\n" + \
                        "├≽ " + key + "da : Danish" + "\n" + \
                        "├≽ " + key + "nl : Dutch" + "\n" + \
                        "├≽ " + key + "en : English" + "\n" + \
                        "├≽ " + key + "en-au : English (Australia)" + "\n" + \
                        "├≽ " + key + "en-uk : English (United Kingdom)" + "\n" + \
                        "├≽ " + key + "en-us : English (United States)" + "\n" + \
                        "├≽ " + key + "eo : Esperanto" + "\n" + \
                        "├≽ " + key + "fi : Finnish" + "\n" + \
                        "├≽ " + key + "fr : French" + "\n" + \
                        "├≽ " + key + "de : German" + "\n" + \
                        "├≽ " + key + "el : Greek" + "\n" + \
                        "├≽ " + key + "hi : Hindi" + "\n" + \
                        "├≽ " + key + "hu : Hungarian" + "\n" + \
                        "├≽ " + key + "is : Icelandic" + "\n" + \
                        "├≽ " + key + "id : Indonesian" + "\n" + \
                        "├≽ " + key + "it : Italian" + "\n" + \
                        "├≽ " + key + "ja : Japanese" + "\n" + \
                        "├≽ " + key + "km : Khmer (Cambodian)" + "\n" + \
                        "├≽ " + key + "ko : Korean" + "\n" + \
                        "├≽ " + key + "la : Latin" + "\n" + \
                        "├≽ " + key + "lv : Latvian" + "\n" + \
                        "├≽ " + key + "mk : Macedonian" + "\n" + \
                        "├≽ " + key + "no : Norwegian" + "\n" + \
                        "├≽ " + key + "pl : Polish" + "\n" + \
                        "├≽ " + key + "pt : Portuguese" + "\n" + \
                        "├≽ " + key + "ro : Romanian" + "\n" + \
                        "├≽ " + key + "ru : Russian" + "\n" + \
                        "├≽ " + key + "sr : Serbian" + "\n" + \
                        "├≽ " + key + "si : Sinhala" + "\n" + \
                        "├≽ " + key + "sk : Slovak" + "\n" + \
                        "├≽ " + key + "es : Spanish" + "\n" + \
                        "├≽ " + key + "es-es : Spanish (Spain)" + "\n" + \
                        "├≽ " + key + "es-us : Spanish (United States)" + "\n" + \
                        "├≽ " + key + "sw : Swahili" + "\n" + \
                        "├≽ " + key + "sv : Swedish" + "\n" + \
                        "├≽ " + key + "ta : Tamil" + "\n" + \
                        "├≽ " + key + "th : Thai" + "\n" + \
                        "├≽ " + key + "tr : Turkish" + "\n" + \
                        "├≽ " + key + "uk : Ukrainian" + "\n" + \
                        "├≽ " + key + "vi : Vietnamese" + "\n" + \
                        "├≽ " + key + "cy : Welsh" + "\n" + \
                        "╰───「 Jangan Typo 」" + "\n" + \
                        "Contoh : " + key + "say-id chiken"
    return menuTextToSpeech

def menuTranslate():
    if settings['setKey'] == True:
        key = settings['keyCommand']
    else:
        key = ''
    menuTranslate = "╭───「 Translate 」" + "\n" + \
                    "├≽ " + key + "af : afrikaans" + "\n" + \
                    "├≽ " + key + "sq : albanian" + "\n" + \
                    "├≽ " + key + "am : amharic" + "\n" + \
                    "├≽ " + key + "ar : arabic" + "\n" + \
                    "├≽ " + key + "hy : armenian" + "\n" + \
                    "├≽ " + key + "az : azerbaijani" + "\n" + \
                    "├≽ " + key + "eu : basque" + "\n" + \
                    "├≽ " + key + "be : belarusian" + "\n" + \
                    "├≽ " + key + "bn : bengali" + "\n" + \
                    "├≽ " + key + "bs : bosnian" + "\n" + \
                    "├≽ " + key + "bg : bulgarian" + "\n" + \
                    "├≽ " + key + "ca : catalan" + "\n" + \
                    "├≽ " + key + "ceb : cebuano" + "\n" + \
                    "├≽ " + key + "ny : chichewa" + "\n" + \
                    "├≽ " + key + "zh-cn : chinese (simplified)" + "\n" + \
                    "├≽ " + key + "zh-tw : chinese (traditional)" + "\n" + \
                    "├≽ " + key + "co : corsican" + "\n" + \
                    "├≽ " + key + "hr : croatian" + "\n" + \
                    "├≽ " + key + "cs : czech" + "\n" + \
                    "├≽ " + key + "da : danish" + "\n" + \
                    "├≽ " + key + "nl : dutch" + "\n" + \
                    "├≽ " + key + "en : english" + "\n" + \
                    "├≽ " + key + "eo : esperanto" + "\n" + \
                    "├≽ " + key + "et : estonian" + "\n" + \
                    "├≽ " + key + "tl : filipino" + "\n" + \
                    "├≽ " + key + "fi : finnish" + "\n" + \
                    "├≽ " + key + "fr : french" + "\n" + \
                    "├≽ " + key + "fy : frisian" + "\n" + \
                    "├≽ " + key + "gl : galician" + "\n" + \
                    "├≽ " + key + "ka : georgian" + "\n" + \
                    "├≽ " + key + "de : german" + "\n" + \
                    "├≽ " + key + "el : greek" + "\n" + \
                    "├≽ " + key + "gu : gujarati" + "\n" + \
                    "├≽ " + key + "ht : haitian creole" + "\n" + \
                    "├≽ " + key + "ha : hausa" + "\n" + \
                    "├≽ " + key + "haw : hawaiian" + "\n" + \
                    "├≽ " + key + "iw : hebrew" + "\n" + \
                    "├≽ " + key + "hi : hindi" + "\n" + \
                    "├≽ " + key + "hmn : hmong" + "\n" + \
                    "├≽ " + key + "hu : hungarian" + "\n" + \
                    "├≽ " + key + "is : icelandic" + "\n" + \
                    "├≽ " + key + "ig : igbo" + "\n" + \
                    "├≽ " + key + "id : indonesian" + "\n" + \
                    "├≽ " + key + "ga : irish" + "\n" + \
                    "├≽ " + key + "it : italian" + "\n" + \
                    "├≽ " + key + "ja : japanese" + "\n" + \
                    "├≽ " + key + "jw : javanese" + "\n" + \
                    "├≽ " + key + "kn : kannada" + "\n" + \
                    "├≽ " + key + "kk : kazakh" + "\n" + \
                    "├≽ " + key + "km : khmer" + "\n" + \
                    "├≽ " + key + "ko : korean" + "\n" + \
                    "├≽ " + key + "ku : kurdish (kurmanji)" + "\n" + \
                    "├≽ " + key + "ky : kyrgyz" + "\n" + \
                    "├≽ " + key + "lo : lao" + "\n" + \
                    "├≽ " + key + "la : latin" + "\n" + \
                    "├≽ " + key + "lv : latvian" + "\n" + \
                    "├≽ " + key + "lt : lithuanian" + "\n" + \
                    "├≽ " + key + "lb : luxembourgish" + "\n" + \
                    "├≽ " + key + "mk : macedonian" + "\n" + \
                    "├≽ " + key + "mg : malagasy" + "\n" + \
                    "├≽ " + key + "ms : malay" + "\n" + \
                    "├≽ " + key + "ml : malayalam" + "\n" + \
                    "├≽ " + key + "mt : maltese" + "\n" + \
                    "├≽ " + key + "mi : maori" + "\n" + \
                    "├≽ " + key + "mr : marathi" + "\n" + \
                    "├≽ " + key + "mn : mongolian" + "\n" + \
                    "├≽ " + key + "my : myanmar (burmese)" + "\n" + \
                    "├≽ " + key + "ne : nepali" + "\n" + \
                    "├≽ " + key + "no : norwegian" + "\n" + \
                    "├≽ " + key + "ps : pashto" + "\n" + \
                    "├≽ " + key + "fa : persian" + "\n" + \
                    "├≽ " + key + "pl : polish" + "\n" + \
                    "├≽ " + key + "pt : portuguese" + "\n" + \
                    "├≽ " + key + "pa : punjabi" + "\n" + \
                    "├≽ " + key + "ro : romanian" + "\n" + \
                    "├≽ " + key + "ru : russian" + "\n" + \
                    "├≽ " + key + "sm : samoan" + "\n" + \
                    "├≽ " + key + "gd : scots gaelic" + "\n" + \
                    "├≽ " + key + "sr : serbian" + "\n" + \
                    "├≽ " + key + "st : sesotho" + "\n" + \
                    "├≽ " + key + "sn : shona" + "\n" + \
                    "├≽ " + key + "sd : sindhi" + "\n" + \
                    "├≽ " + key + "si : sinhala" + "\n" + \
                    "├≽ " + key + "sk : slovak" + "\n" + \
                    "├≽ " + key + "sl : slovenian" + "\n" + \
                    "├≽ " + key + "so : somali" + "\n" + \
                    "├≽ " + key + "es : spanish" + "\n" + \
                    "├≽ " + key + "su : sundanese" + "\n" + \
                    "├≽ " + key + "sw : swahili" + "\n" + \
                    "├≽ " + key + "sv : swedish" + "\n" + \
                    "├≽ " + key + "tg : tajik" + "\n" + \
                    "├≽ " + key + "ta : tamil" + "\n" + \
                    "├≽ " + key + "te : telugu" + "\n" + \
                    "├≽ " + key + "th : thai" + "\n" + \
                    "├≽ " + key + "tr : turkish" + "\n" + \
                    "├≽ " + key + "uk : ukrainian" + "\n" + \
                    "├≽ " + key + "ur : urdu" + "\n" + \
                    "├≽ " + key + "uz : uzbek" + "\n" + \
                    "├≽ " + key + "vi : vietnamese" + "\n" + \
                    "├≽ " + key + "cy : welsh" + "\n" + \
                    "├≽ " + key + "xh : xhosa" + "\n" + \
                    "├≽ " + key + "yi : yiddish" + "\n" + \
                    "├≽ " + key + "yo : yoruba" + "\n" + \
                    "├≽ " + key + "zu : zulu" + "\n" + \
                    "├≽ " + key + "fil : Filipino" + "\n" + \
                    "├≽ " + key + "he : Hebrew" + "\n" + \
                    "╰───「 Jangan Typo 」" + "\n" + \
                    "Contoh : " + key + "tr-id chiken"
    return menuTranslate

async def clientBot(op):
    try:
        if op.type == 0:
            #print ("[ 0 ] END OF OPERATION")
            return
        if op.type == 5:
            print ("[ 5 ] NOTIFIED ADD CONTACT")
            if settings["autoAdd"] == True:
                client.findAndAddContactsByMid(op.param1)
            client.sendMention(op.param1, settings["autoAddMessage"], [op.param1])
        if op.type == 13:
            print ("[ 13 ] NOTIFIED INVITE INTO GROUP")
            if settings["autoJoin"] and clientMid in op.param3:
                group = client.getGroup(op.param1)
                group.notificationDisabled = False
                client.acceptGroupInvitation(op.param1)
                client.updateGroup(group)
                client.sendMention(op.param1, settings["autoJoinMessage"], [op.param2])
        if op.type == 13:
            print ("[ 13 ] NOTIFIED INVITE INTO GROUP")
            if settings["autoJoin"] and clientMid in op.param3:
              group = client.getGroup(op.param1)
              if settings["memberCancel"]["on"] == True:
                if len(group.members) <= settings["memberCancel"]["members"]:
                  client.acceptGroupInvitation(op.param1)
                  client.sendMention(op.param1, "Sorry members is not enough with my setting :(" ,[op.param2])
                  client.leaveGroup(op.param1)
                else:
                  client.acceptGroupInvitation(op.param1)
                  client.sendMention(op.param1, settings["autoJoinMessage"], [op.param2])

        if op.type == 17:
            print ("[ 17 ] NOTIFIED MEMBER JOIN TO GROUP")
            if op.param2 in settings["blackList"]:
            	Ticket = client.reissueGroupTicket(op.param1)
            	rezl.acceptGroupInvitationByTicket(op.param1,Ticket)
            	for setan in settings["blackList"]:
            		rezl.kickoutFromGroup(op.param1, [setan])
            	rezl.leaveGroup(op.param1)

        if op.type == 25 or op.type == 26:
            try:
                msg = op.message
                text = str(msg.text)
                msg_id = msg.id
                receiver = msg.to
                sender = msg._from
                cmd = command(text)
                ryyn = "u874a7502c02896b2edbb3445c2615d35"
                setKey = settings["keyCommand"].title()
                if settings["setKey"] == False:
                    setKey = ''
                if msg.toType == 0 or msg.toType == 1 or msg.toType == 2:
                    if msg.toType == 0:
                        if sender != client.profile.mid:
                            to = sender
                        else:
                            to = receiver
                    elif msg.toType == 1:
                        to = receiver
                    elif msg.toType == 2:
                        to = receiver
                    if msg.contentType == 0:
                        if cmd == "1mute":
                              if msg._from in ["u874a7502c02896b2edbb3445c2615d35"]:
                                if to not in offbot:
                                  client.sendMessageWithFooter(to, "Berhasil Mute Bot Di Group Ini")
                                  offbot.append(to)
                                  print(to)
                                  
                                else:
                                  client.sendMessageWithFooter(to, "Succesfully Mute Bot In This Group")
                        if cmd == "1unmute":
                              if msg._from in ["u874a7502c02896b2edbb3445c2615d35"]:
                                if to in offbot:
                                  offbot.remove(to)
                                  client.sendMessageWithFooter(to, "Berhasil Unmute Bot Di Group Ini")
                                  print(to)
                                  
                                else:
                                  client.sendMessageWithFooter(to, "Succesfully Unmute Bot In This Group")

                        if cmd == "token desktopmac":
                                ryn = DESKTOPMAC()
                                Thread(target=token,args=(to,ryn,msg_id,sender,)).start()
                        if cmd == "token desktopwin":
                                ryn = DESKTOPWIN()
                                Thread(target=token,args=(to,ryn,msg_id,sender,)).start()
                        if cmd == "token iosipad":
                                ryn = IOSIPAD()
                                Thread(target=token,args=(to,ryn,msg_id,sender,)).start()
                        if cmd == "token chromeos":
                                ryn = CHROMEOS()
                                Thread(target=token,args=(to,ryn,msg_id,sender,)).start()
                        if cmd == "token win10":
                                ryn = WIN10()
                                Thread(target=token,args=(to,ryn,msg_id,sender,)).start()
                        if cmd == "token android":
                                ryn = ANDROID()
                                Thread(target=token,args=(to,ryn,msg_id,sender,)).start()
                        if cmd == "list token":
                                client.sendReplyMessage(msg_id, to, "1. Token Desktopmac\n2. Token Desktopwin\n3. Token Iosipad\n4. Token Chromeos\n5. Token Win10")
                                lists = {"result": [{"name": "Token Desktopwin",},{"name": "Token Chromeos",},{"name": "Token Iosipad",},{"name": "Token Desktopmac",},{"name": "Token Win10",}]}
                                if lists["result"] != []:
                                        ret_ = []
                                        for fn in lists["result"]:
                                                if len(ret_) >= 20:
                                                    pass
                                                else:
                                                    ret_.append({
                                                            "title": "{}".format(fn["name"]),
                                                            "text": "Click This Button For Get Your Token",
                                                            "actions": [
                                                                {
                                                                    "type": "uri",
                                                                    "label": "Click Me",
                                                                    "uri": "line://app/1603968955-ORWb9RdY/?type=text&text={}".format(urllib.parse.quote("{}".format(fn["name"])))
                                                                }
                                                            ]
                                                        }
                                                    )
                                        k = len(ret_)//10
                                        for aa in range(k+1):
                                            data = {
                                                    "type": "template",
                                                    "altText": "Token",
                                                    "template": {
                                                        "type": "carousel",
                                                        "columns": ret_[aa*10 : (aa+1)*10]
                                                    }
                                                }
                                            client.postTemplate(to, data)

                        if cmd == "order":
                                    data = {
  "contents": [
    {
      "hero": {
        "aspectMode": "cover",
        "url": "https://lh3.googleusercontent.com/bJf4-iUIObNVRsTp0xxPxpagYfglhANxZc7Eq_1EpT1CeW_xUU235I8IaZxD3zBYF8R01sVDo9G9Spej4BCt=w1366-h636",
        "action": {
          "uri": "http://line.me/ti/p/adit_cmct",
          "type": "uri"
        },
        "type": "image",
        "size": "full"
      },
      "body": {
        "contents": [
          {
            "text": "VPS VULTR",
            "wrap": True,
            "weight": "bold",
            "type": "text",
            "size": "lg"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "1 CPU 1 GB",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "80K/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "1 CPU 2 GB",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "140K/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "2 CPU 4 GB",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "260k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "4 CPU 8 GB",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "500k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "text": "-Note: Payment Mandiri / BNI",
            "wrap": True,
            "size": "sm",
            "type": "text",
            "color": "#aaaaaa"
          }
        ],
        "type": "box",
        "spacing": "xs",
        "layout": "vertical"
      },
      "type": "bubble",
      "footer": {
        "contents": [
          {
            "action": {
              "uri": "http://line.me/ti/p/~adit_cmct",
              "type": "uri",
              "label": "TAP HERE TO ORDER"
            },
            "type": "button"
          }
        ],
        "type": "box",
        "layout": "horizontal"
      }
    },
    {
      "hero": {
        "aspectMode": "cover",
        "url": "https://lh3.googleusercontent.com/bJf4-iUIObNVRsTp0xxPxpagYfglhANxZc7Eq_1EpT1CeW_xUU235I8IaZxD3zBYF8R01sVDo9G9Spej4BCt=w1366-h636",
        "action": {
          "uri": "http://line.me/ti/p/~adit_cmct",
          "type": "uri"
        },
        "type": "image",
        "size": "full"
      },
      "body": {
        "contents": [
          {
            "text": "PROTECT BOTS",
            "wrap": True,
            "weight": "bold",
            "type": "text",
            "size": "lg"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "5 Bots",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "150k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "10 Bots",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "300k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "15 Bots",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "350k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "20 Bot",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "400k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "text": "-Note: Assist bisa request by pm \nSpeed up to : 0.03",
            "wrap": True,
            "size": "sm",
            "type": "text",
            "color": "#aaaaaa"
          }
        ],
        "type": "box",
        "spacing": "xs",
        "layout": "vertical"
      },
      "type": "bubble",
      "footer": {
        "contents": [
          {
            "action": {
              "uri": "http://line.me/ti/p/~adit_cmct",
              "type": "uri",
              "label": "TAP HERE TO ORDER"
            },
            "type": "button"
          }
        ],
        "type": "box",
        "layout": "horizontal"
      }
    },
    {
      "hero": {
        "aspectMode": "cover",
        "url": "https://lh3.googleusercontent.com/bJf4-iUIObNVRsTp0xxPxpagYfglhANxZc7Eq_1EpT1CeW_xUU235I8IaZxD3zBYF8R01sVDo9G9Spej4BCt=w1366-h636",
        "action": {
          "uri": "http://line.me/ti/p/~adit_cmct",
          "type": "uri"
        },
        "type": "image",
        "size": "full"
      },
      "body": {
        "contents": [
          {
            "text": "SELF BOT",
            "wrap": True,
            "weight": "bold",
            "type": "text",
            "size": "lg"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "Selfbot Only",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "50k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "SB 5 Assist",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "100k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "SB 10 Assist",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "150k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "contents": [
              {
                "contents": [
                  {
                    "size": "xl",
                    "type": "icon",
                    "url": "https://image.ibb.co/dx7dkp/20180811_205432.png"
                  },
                  {
                    "text": "SB 15 Assist",
                    "flex": 0,
                    "weight": "bold",
                    "type": "text",
                    "margin": "none"
                  }
                ],
                "type": "box",
                "layout": "baseline"
              }
            ],
            "type": "box",
            "spacing": "xs",
            "layout": "vertical"
          },
          {
            "text": "200k/Bln",
            "size": "xs",
            "align": "end",
            "color": "#aaaaaa",
            "wrap": True,
            "type": "text"
          },
          {
            "text": "-Note: Assist bisa request by pm \nSpeed up to : 0.03",
            "wrap": True,
            "size": "sm",
            "type": "text",
            "color": "#aaaaaa"
          }
        ],
        "type": "box",
        "spacing": "xs",
        "layout": "vertical"
      },
      "type": "bubble",
      "footer": {
        "contents": [
          {
            "action": {
              "uri": "http://line.me/ti/p/~adit_cmct",
              "type": "uri",
              "label": "TAP HERE TO ORDER"
            },
            "type": "button"
          }
        ],
        "type": "box",
        "layout": "horizontal"
      }
    }
  ],
  "type": "carousel"
}
                                    client.postFlex(to, data)

                        if cmd == "about":
                                groups = client.getGroupIdsJoined()
                                contacts = client.getAllContactIds()
                                blockeds = client.getBlockedContactIds()
                                crt = "u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35"
                                supp = "u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35"
                                suplist = []
                                lists = []
                                tz = pytz.timezone("Asia/Makassar")
                                timeNow = datetime.now(tz=tz)
                                day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                                bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                                hr = timeNow.strftime("%A")
                                bln = timeNow.strftime("%m")
                                timeNoww = time.time()
                                runtime = timeNoww - clientStart
                                runtime = timeChange(runtime)
                                for i in range(len(day)):
                                   if hr == day[i]: hasil = hari[i]
                                for k in range(0, len(bulan)):
                                   if bln == str(k): bln = bulan[k-1]
                                readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\n│ Jam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                                data = {
                                        "type": "flex",
                                        "altText": "About Aditmadzs",
                                        "contents": {
  "styles": {
    "body": {
      "backgroundColor": "#FFE5B4"
    },
    "footer": {
      "backgroundColor": "#FF0000"
    }
  },
  "type": "bubble",
  "body": {
    "contents": [
      {
        "contents": [
          {
            "url": "https://obs.line-scdn.net/{}".format(client.getContact(clientMid).pictureStatus),
            "type": "image"
          },
          {
            "type": "separator",
            "color": "#6F4E37"
          },
          {
            "text": "「SELFBOT」",
            "size": "sm",
            "color": "#6F4E37",
            "wrap": True,
            "weight": "bold",
            "type": "text"
          }
        ],
        "type": "box",
        "spacing": "md",
        "layout": "horizontal"
      },
      {
        "type": "separator",
        "color": "#6F4E37"
      },
      {
        "contents": [
          {
            "text": "「Aditmadzs Premium」",
            "size": "md",
            "align": "center",
            "color": "#6F4E37",
            "wrap": True,
            "weight": "bold",
            "type": "text"
          }
        ],
        "type": "box",
        "spacing": "md",
        "layout": "vertical"
      },
      {
        "type": "separator",
        "color": "#6F4E37"
      },
      {
        "contents": [
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "Nama: {}".format(client.getProfile().displayName),
                "size": "xs",
                "margin": "none",
                "color": "#6F4E37",
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "type": "separator",
            "color": "#6F4E37"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Aktif Selama」 : {}".format(str(runtime)),
                "size": "xs",
                "margin": "none",
                "color": "#6F4E37",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Jumlah Group」 : {}".format(str(len(groups))),
                "size": "xs",
                "margin": "none",
                "color": "#6F4E37",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Jumlah Teman」 : {}".format(str(len(contacts))),
                "size": "xs",
                "margin": "none",
                "color": "#6F4E37",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Jumlah Block」 : {}".format(str(len(blockeds))),
                "size": "xs",
                "margin": "none",
                "color": "#6F4E37",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Version」 : v5.0",
                "size": "xs",
                "margin": "none",
                "color": "#6F4E37",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Support By」\n-ChoiceBOT\n-BotLemahBots\n-[NOOBLESS NOOB]",
                "size": "xs",
                "margin": "none",
                "color": "#6F4E37",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          }
        ],
        "type": "box",
        "layout": "vertical"
      }
    ],
    "type": "box",
    "spacing": "md",
    "layout": "vertical"
  },
  "footer": {
    "contents": [
      {
        "contents": [
          {
            "contents": [
              {
                "text": "「Chat Creator」",
                "size": "sm",
                "action": {
                  "uri": "https://line.me/ti/p/~adit_cmct",
                  "type": "uri",
                  "label": "Add Creator"
                },
                "margin": "xl",
                "align": "start",
                "color": "#F5F5DC",
                "weight": "bold",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          }
        ],
        "type": "box",
        "layout": "horizontal"
      },
      {
        "type": "separator",
        "color": "#6F4E37"
      },
      {
        "contents": [
          {
            "contents": [
              {
                "text": "「Tap Here To Order」",
                "size": "sm",
                "action": {
                  "uri": "line://app/1603968955-ORWb9RdY/?type=text&text=order",
                  "type": "uri",
                  "label": " 「Open Order」"
                },
                "margin": "xl",
                "align": "start",
                "color": "#F5F5DC",
                "weight": "bold",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          }
        ],
        "type": "box",
        "layout": "horizontal"
      }
    ],
    "type": "box",
    "layout": "vertical"
  }
}
}
                                client.postTemplate(to, data)

                        if cmd == "me":
                                contact = client.getProfile()
                                mids = [contact.mid]
                                status = client.getContact(sender)
                                data = {
                                        "type": "flex",
                                        "altText": "Me Message AditmadzsBOT",
                                        "contents": {
  "type": "bubble",
  "body": {
    "type": "box",
    "layout": "horizontal",
    "spacing": "md",
    "contents": [
      {
        "type": "box",
        "layout": "vertical",
        "flex": 2,
        "contents": [
          {
            "type": "text",
            "flex": 2,
            "text": "{}".format(status.displayName),
            "size": "md",
            "wrap": True,
            "weight": "bold",
            "gravity": "center",
            "color": "#657383"
          },
          {
            "type": "separator",
            "color": "#6F4E37"
          },
          {
            "type": "text",
            "text": "Status Profile:",
            "size": "xs",
            "weight": "bold",
            "wrap": True,
            "color": "#657383"
          },
          {
            "type": "text",
            "text": "{}".format(status.statusMessage),
            "size": "xs",
            "color": "#657383",
            "wrap": True
          }
        ]
      }
    ]
  },
  "styles": {
    "body": {
      "backgroundColor": "#000000"
    },
    "footer": {
      "backgroundColor": "#FF0000"
    }
  },
  "hero": {
    "type": "image",
    "url": "https://obs.line-scdn.net/{}".format(client.getContact(sender).pictureStatus),
    "size": "full",
    "margin": "xxl"
  },
  "footer": {
    "type": "box",
    "layout": "horizontal",
    "contents": [
      {
        "type": "text",
        "text": "About",
        "size": "xs",
        "wrap": True,
        "weight": "bold",
        "color": "#E5E4E2",
        "action": {
          "type": "uri",
          "uri": "line://app/1603968955-ORWb9RdY/?type=text&text=About"
        },
        "align": "center"
      },
      {
        "type": "separator",
        "color": "#E5E4E2"
      },
      {
        "type": "text",
        "text": "Order",
        "size": "xs",
        "wrap": True,
        "weight": "bold",
        "color": "#E5E4E2",
        "action": {
          "type": "uri",
          "uri": "line://app/1603968955-ORWb9RdY/?type=text&text=Order"
        },
        "align": "center"
      }
    ]
  }
}
}
                                client.postTemplate(to, data)
                        if msg.toType != 0 and msg.toType == 2:
                            if 'MENTION' in msg.contentMetadata.keys()!= None:
                                names = re.findall(r'@(\w+)', text)
                                mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                mentionees = mention['MENTIONEES']
                                for mention in mentionees:
                                    if ryyn in mention["M"]:
                                        if ryyn in mention["M"]:
                                            if to not in tagme['ROM']:
                                                tagme['ROM'][to] = {}
                                            if sender not in tagme['ROM'][to]:
                                                tagme['ROM'][to][sender] = {}
                                            if 'msg.id' not in tagme['ROM'][to][sender]:
                                                tagme['ROM'][to][sender]['msg.id'] = []
                                            if 'waktu' not in tagme['ROM'][to][sender]:
                                                tagme['ROM'][to][sender]['waktu'] = []
                                            tagme['ROM'][to][sender]['msg.id'].append(msg.id)
                                            tagme['ROM'][to][sender]['waktu'].append(msg.createdTime)

                            elif receiver in temp_flood:
                                if temp_flood[receiver]["expire"] == True:
                                    if cmd == "buka":
                                        temp_flood[receiver]["expire"] = False
                                        temp_flood[receiver]["time"] = time.time()
                                        client.sendMessageWithFooter(to, "BOT ACTIVE AGAIN")
                                    return
                                elif time.time() - temp_flood[receiver]["time"] <= 5:
                                    temp_flood[receiver]["flood"] += 1
                                    if temp_flood[receiver]["flood"] >= 500:
                                        temp_flood[receiver]["flood"] = 0
                                        temp_flood[receiver]["expire"] = True
                                        ret_ = "Bots will be SILENT for a while in this group because of SPAM\n or Type Open"
                                        userid = "https://line.me/ti/p/~" + client.profile.userid
                                        client.sendMessage(to,'「Detect Flood」\n'+str(ret_), {'AGENT_NAME': ' Notif Spam','AGENT_LINK': 'http://line.me/ti/p/mobaloghanabi','AGENT_ICON': 'http://klikuntung.com/images/messengers/line-logo.png' })
                                else:
                                    temp_flood[receiver]["flood"] = 0
                                temp_flood[receiver]["time"] = time.time()
                            else:
                                temp_flood[receiver] = {
                                 "time": time.time(),
                                 "flood": 0,
                                 "expire": False
                                }
            except Exception as error:
                logError(error)
   
        
   ## template
        if op.type == 25 or op.type == 26:
            try:
                msg = op.message
                text = str(msg.text)
                msg_id = msg.id
                receiver = msg.to
                sender = msg._from
                cmd = commander(text)
                for cmd in cmd.split(" & "):
                    setKey = settings["keyCommand"].title()
                    if settings["setKey"] == True:
                        setKey = ''
                    if msg.toType == 0 or msg.toType == 1 or msg.toType == 2:
                        if msg.toType == 0:
                            if sender != client.profile.mid:
                                to = sender
                            else:
                                to = receiver
                        elif msg.toType == 1:
                            to = receiver
                        elif msg.toType == 2:
                            to = receiver
                        if msg.contentType == 0:
                            if to in offbot:
                                return
                            if cmd == "tr2":
                                    data = {
                                                "type": "template",
                                                "altText": "Help Message ",
                                                "template": {
                                                   "type": "buttons",
                                                    "thumbnailImageUrl": "https://obs.line-scdn.net/{}".format(client.getContact(sender).pictureStatus),
                                                    "title": "{}".format(client.getContact(sender).displayName),
                                                    "text": "Test",
                                                    "actions": [
                                                        {
                                                        "type": "postback",
                                                        "label": "Try Button",
                                                        "data": "https://line.me/ti/p/~mobaloghanabi"
                                 }
                            ]
                                                }
                                            }
                                    client.postTemplate(to, data)
                            elif cmd == "test1":
                                    data = {
                                                "type": "flex",
                                                "altText": "Media Message",
                                                "contents": {
                                                   "type": "bubble",
                                                   "header": {
                                                      "type": "box",
                                                      "layout": "vertical",
                                                      "contents": [
                  {
                                                           "type": "text",
                                                           "text": "━━━━━━{}━━━━━━".format(client.getProfile().displayName)
                                                        }
                                                    ]                                                    
               },
                  "hero": {
                                                   "type": "image",
                                                   "url": "https://media.giphy.com/media/4QxQgWZHbeYwM/giphy.gif",
                                                   "size": "full",
                  },
                     "body": {
                                                   "type": "box",
                                                   "layout": "vertical",
                                                   "contents": [
                                                      {
                                                        "type": "button",
                                                         "style": "primary",
                                                         "color": "#0083FF",
                                                         "action": {
                                                            "type": "uri",
                                                            "label": "Setting",
                                                            "uri": "line://nv/settings/"
                                    }
                               },
                               {
                                                        "type": "button",
                                                        "style": "primary",
                                                        "color": "#0083FF",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "Camera",
                                                            "uri": "line://nv/camera/"
                                                        }
                               },
                               {
                                                        "type": "button",
                                                        "style": "primary",
                                                        "color": "#0083FF",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "Share Picture",
                                                            "uri": "line://nv/cameraRoll/single"
                                                        }
                               },
                               {
                                                        "type": "button",
                                                        "style": "primary",
                                                        "color": "#0083FF",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "Share Picture Multi",
                                                            "uri": "line://nv/cameraRoll/multi"
                                                        }
                               },
                               {
                                                        "type": "button",
                                                        "style": "primary",
                                                        "color": "#0083FF",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "Location",
                                                            "uri": "line://nv/location"
                                                        }
                               },
                               {
                                                        "type": "button",
                                                        "style": "primary",
                                                        "color": "#0083FF",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "test",
                                                            "uri": "line://msg/text/heeyy"
                                                        }
                               }

                                                ]
               },
                     "footer": {
                                                   "type": "box",
                                                   "layout": "horizontal",
                                                   "contents": [
                                                      {
                                                        "type": "button",
                                                         "style": "primary",
                                                         "color": "#0083FF",
                                                         "action": {
                                                            "type": "uri",
                                                            "label": "Creator",
                                                            "uri": "http://line.me/ti/p/~adit_cmct"
                                    }
                               }
                                                ]
                                            }
                                        }
                                    }
                                    client.postTemplate(to, data)
                            elif cmd.startswith("groupbcast"):
                              if msg._from in owner:
                                dan = text.split(" ")
                                hey = text.replace(dan[0] + " ","")
                                chat = "{}".format(hey)
                                groups = client.getGroupIdsJoined()
                                for gr in groups:
                                    data = {
                                            "cc": "{}".format(settings["ryncc"]), 
                                                "to": gr,
                                                "messages": [
                                                {
                                                    "type": "flex",
                                                    "altText": "Broadcast",
                                                    "contents": {
                                                       "type": "bubble",
                                                       "header": {
                                                          "type": "box",
                                                          "layout": "vertical",
                                                          "contents": [
                      {
                                                               "type": "text",
                                                               "text": "SORRY FOR BROADCAST",
                                                               "align": "center"
                                                            }
                                                        ]                                                    
                   },
                      "hero": {
                                                       "type": "image",
                                                       "url": "https://obs.line-scdn.net/{}".format(client.getContact(sender).pictureStatus),
                                                       "size": "full",
                      },
                         "body": {
                                                       "type": "box",
                                                       "layout": "vertical",
                                                       "contents": [
                      {
                                                            "type": "text",
                                                            "text": "{}".format(client.getContact(sender).displayName),
                                                            "size": "lg",
                                                            "weight": "bold",
                                                             "wrap": True
                      },
                                                          {
                                                            "type": "text",
                                                            "text": "{}".format(chat),
                                                            "color": "#EF0505",
                                                            "wrap": True
                      }
                                                        ]
                   },
                         "footer": {
                                                       "type": "box",
                                                       "layout": "horizontal",
                                                       "contents": [
                                                          {
                                                            "type": "button",
                                                             "style": "primary",
                                                             "color": "#0083FF",
                                                             "action": {
                                                                "type": "uri",
                                                                "label": "Creator",
                                                                "uri": "https://line.me/ti/p/~mobaloghanabi"
                                        }
                                   }
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                                    sendTemplateto(gr, data)
                            elif cmd == "mybio":
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    urlv = requests.get('http://fahminogameno.life/text.php?q=rynkings')
                                    datav = urlv.json()
                                    data = {
                                        "cc": "5nXBC18M7fFI/6J7gc9Q8tp4cQqWhcdyatZCEG09mVcTWX6BT2OpbsqGcEet0K2HOxOkIHU9S0Sq0pipeKQdh+6GVE2zKf799Ui/PKi9WxZSKaY5Jb3cHm67EZeUey8wd50YUcJt21ez1Iw4MOFcCY+Ns2U/kgWZiLLPjng3rxpgnxYGyRcE1f9bwAA35sHAfJSi7xS/ksdRbh920zqzAK0Wky+2V+gnm0nTPUuQB7nt2hgDQ5U34Dv8oSHXNr9o15ZJ68/0/Amwy46C5ugyoqookxI4/Oh+Iu+tjT0VtP2sZiwVxUAv7obXiKVogt7ugTkLt5OqekHEiLcX1af6/IDc181zVa0/May99Rl/qRI", 
                                            "to": to,
                                            "messages": [
                                           {
                                                "type": "flex",
                                                "altText": "{}".format(datav[0]["nama"]),
                                                "contents": {
                                                    "type": "bubble",
                                                    "body": {
                                                        "type": "box",
                                                        "layout": "vertical",
                                                        "contents": [
                                                            {
                                                                "type": "text",
                                                                "text": "{}".format(datav[0]["text"]),
                                                                "wrap": True
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                    headers = {} 
                                    headers['User-Agent'] = 'Mozilla/5.0 (Linux; Android 8.1.0; Redmi Note 5 Build/OPM1.171019.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/67.0.3396.87 Mobile Safari/537.36 Line/8.1.1'  
                                    headers['Content-Type'] = 'application/json'  
                                    headers['Accept-Encoding'] = 'gzip, deflate' 
                                    headers['Accept-Languange'] = 'id-ID,en-US;q=0.9' 
                                    headers['Connection'] = 'keep-alive' 
                                    return requests.post(url, data=json.dumps(data), headers=headers)
                            elif cmd == "mypicture":
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    data = {
                                                "type": "template",
                                                "altText": "Your Picture {}".format(client.getContact(sender).displayName),
                                                "template": {
                                                   "type": "image_carousel",
                                                   "columns": [
                                                    {
                                                        "imageUrl": "https://obs.line-scdn.net/{}".format(client.getContact(sender).pictureStatus),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "uri": "http://line.me/ti/p/~mobaloghanabi"
                                 }                                                
                       }
                      ]
                                                }
                                            }
                                    client.postTemplate(to, data)
                            elif "wkwk" in msg.text.lower():
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    data = {
                                                "type": "template",
                                                "altText": "{} sent a sticker".format(client.getProfile().displayName),
                                                "template": {
                                                   "type": "image_carousel",
                                                   "columns": [
                                                    {
                                                        "imageUrl": "https://2.bp.blogspot.com/-sjYrCLxk8DM/Wyhbi6gbWlI/AAAAAAANIzs/JmAVC-31pPss28Gr3rMGDeKiMiIVw-tlQCLcBGAs/s1600/AW1238502_00.gif",
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "uri": "http://line.me/ti/p/~adit_cmct"
                                 }                                                
                       }
                      ]
                                                }
                                            }
                                    client.postTemplate(to, data)
                            elif cmd.startswith("sticker "):
                                    sep = text.split(" ")
                                    txt = text.replace(sep[0] + " ","")
                                    stc = "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/ANDROID/sticker.png".format(txt)
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    data = {
                                        "cc": "UAy+aQO9xvcHCMm6MibGMhjfusZqQ9RCJdIzB1Dt6jaP6Hu6DZhssQd7KVV/hYuKDSAnb1aZgp+L6mkzDM/zSVg39U6QtTUODW9BHdToKlOUqHulujlwq5ipbmX9oRx5/lQx3myLJk+GHBscB/Hw/znLt/UKEBHd831nWGQnjWnhhPPHSKphmFlO4n+/JoTVOvuuS9zw6PUv7Dn6vBt3tW5FLIoEw6z/sCt5oGdLLfKmqza0gERQOzjpX2hL/pFY15ZJ68/0/Amwy46C5ugyoqookxI4/Oh+Iu+tjT0VtP3en35GkxfjCmMJARJMvVFMVOGRhQHThHnl11O0iVURUQM+vpepJDS4XWltIoUOMzk", 
                                            "to": to,
                                            "messages": [
                                           {
                                                "type": "template",
                                                "altText": "{} sent a sticker".format(client.getProfile().displayName),
                                                "template": {
                                                   "type": "image_carousel",
                                                   "columns": [
                                                    {
                                                        "imageUrl": "{}".format(stc),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "uri": "http://line.me/ti/p/~mobaloghanabi"
                                 }                                                
                       }
                      ]
                                                }
                                            }
                                        ]
                                    }
                                    headers = {'Cookie': 'cc=UAy+aQO9xvcHCMm6MibGMhjfusZqQ9RCJdIzB1Dt6jaP6Hu6DZhssQd7KVV/hYuKDSAnb1aZgp+L6mkzDM/zSVg39U6QtTUODW9BHdToKlOUqHulujlwq5ipbmX9oRx5/lQx3myLJk+GHBscB/Hw/znLt/UKEBHd831nWGQnjWnhhPPHSKphmFlO4n+/JoTVOvuuS9zw6PUv7Dn6vBt3tW5FLIoEw6z/sCt5oGdLLfKmqza0gERQOzjpX2hL/pFY15ZJ68/0/Amwy46C5ugyoqookxI4/Oh+Iu+tjT0VtP3en35GkxfjCmMJARJMvVFMVOGRhQHThHnl11O0iVURUQM+vpepJDS4XWltIoUOMzk=; ver=8.1.1; cordovaVersion=5.2.2; locale=in_ID; language=in; timezone=Asia/Jakarta; hardwareModel=Redmi Note 5; appSDKVersion=1; _ga=GA1.3.1938581756.1533822765; _gid=GA1.3.290897081.1533928988'} 
                                    headers['User-Agent'] = 'Mozilla/5.0 (Linux; Android 8.1.0; Redmi Note 5 Build/OPM1.171019.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/67.0.3396.87 Mobile Safari/537.36 Line/8.1.1'  
                                    headers['Content-Type'] = 'application/json'  
                                    headers['Accept-Encoding'] = 'gzip, deflate' 
                                    headers['Accept-Languange'] = 'id-ID,en-US;q=0.9' 
                                    headers['Connection'] = 'keep-alive' 
                                    return requests.post(url, data=json.dumps(data), headers=headers)
                            elif cmd.startswith("stickeranimate "):
                                    sep = text.split(" ")
                                    txt = text.replace(sep[0] + " ","")
                                    stc = "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/ANDROID/sticker_animation@2x.png".format(txt)
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    data = {
                                        "cc": "{}".format(settings["mycc"]), 
                                            "to": to,
                                            "messages": [
                                           {
                                                "type": "template",
                                                "altText": "{} sent a sticker".format(client.getProfile().displayName),
                                                "template": {
                                                   "type": "image_carousel",
                                                   "columns": [
                                                    {
                                                        "imageUrl": "{}".format(stc),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "uri": "http://line.me/ti/p/~mobaloghanabi"
                                 }                                                
                       }
                      ]
                                                }
                                            }
                                        ]
                                    }
                                    headers = {'Cookie': 'cc=UAy+aQO9xvcHCMm6MibGMhjfusZqQ9RCJdIzB1Dt6jaP6Hu6DZhssQd7KVV/hYuKDSAnb1aZgp+L6mkzDM/zSVg39U6QtTUODW9BHdToKlOUqHulujlwq5ipbmX9oRx5/lQx3myLJk+GHBscB/Hw/znLt/UKEBHd831nWGQnjWnhhPPHSKphmFlO4n+/JoTVOvuuS9zw6PUv7Dn6vBt3tW5FLIoEw6z/sCt5oGdLLfKmqza0gERQOzjpX2hL/pFY15ZJ68/0/Amwy46C5ugyoqookxI4/Oh+Iu+tjT0VtP3en35GkxfjCmMJARJMvVFMVOGRhQHThHnl11O0iVURUQM+vpepJDS4XWltIoUOMzk=; ver=8.1.1; cordovaVersion=5.2.2; locale=in_ID; language=in; timezone=Asia/Jakarta; hardwareModel=Redmi Note 5; appSDKVersion=1; _ga=GA1.3.1938581756.1533822765; _gid=GA1.3.290897081.1533928988'} 
                                    headers['User-Agent'] = 'Mozilla/5.0 (Linux; Android 8.1.0; Redmi Note 5 Build/OPM1.171019.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/67.0.3396.87 Mobile Safari/537.36 Line/8.1.1'  
                                    headers['Content-Type'] = 'application/json'  
                                    headers['Accept-Encoding'] = 'gzip, deflate' 
                                    headers['Accept-Languange'] = 'id-ID,en-US;q=0.9' 
                                    headers['Connection'] = 'keep-alive' 
                                    return requests.post(url, data=json.dumps(data), headers=headers)
                            elif "wkwk" in msg.text.lower():
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    data = {
                                        "cc": "{}".format(settings["mycc"]), 
                                            "to": to,
                                            "messages": [
                                           {
                                                "type": "template",
                                                "altText": "{} sent a sticker".format(client.getProfile().displayName),
                                                "template": {
                                                   "type": "image_carousel",
                                                   "columns": [
                                                    {
                                                        "imageUrl": "https://2.bp.blogspot.com/-sjYrCLxk8DM/Wyhbi6gbWlI/AAAAAAANIzs/JmAVC-31pPss28Gr3rMGDeKiMiIVw-tlQCLcBGAs/s1600/AW1238502_00.gif",
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "uri": "http://line.me/ti/p/~mobaloghanabi"
                                 }                                                
                       }
                      ]
                                                }
                                            }
                                        ]
                                    }
                                    headers = {'Cookie': 'cc=UAy+aQO9xvcHCMm6MibGMhjfusZqQ9RCJdIzB1Dt6jaP6Hu6DZhssQd7KVV/hYuKDSAnb1aZgp+L6mkzDM/zSVg39U6QtTUODW9BHdToKlOUqHulujlwq5ipbmX9oRx5/lQx3myLJk+GHBscB/Hw/znLt/UKEBHd831nWGQnjWnhhPPHSKphmFlO4n+/JoTVOvuuS9zw6PUv7Dn6vBt3tW5FLIoEw6z/sCt5oGdLLfKmqza0gERQOzjpX2hL/pFY15ZJ68/0/Amwy46C5ugyoqookxI4/Oh+Iu+tjT0VtP3en35GkxfjCmMJARJMvVFMVOGRhQHThHnl11O0iVURUQM+vpepJDS4XWltIoUOMzk=; ver=8.1.1; cordovaVersion=5.2.2; locale=in_ID; language=in; timezone=Asia/Jakarta; hardwareModel=Redmi Note 5; appSDKVersion=1; _ga=GA1.3.1938581756.1533822765; _gid=GA1.3.290897081.1533928988'} 
                                    headers['User-Agent'] = 'Mozilla/5.0 (Linux; Android 8.1.0; Redmi Note 5 Build/OPM1.171019.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/67.0.3396.87 Mobile Safari/537.36 Line/8.1.1'  
                                    headers['Content-Type'] = 'application/json'  
                                    headers['Accept-Encoding'] = 'gzip, deflate' 
                                    headers['Accept-Languange'] = 'id-ID,en-US;q=0.9' 
                                    headers['Connection'] = 'keep-alive' 
                                    return requests.post(url, data=json.dumps(data), headers=headers)
                            
                            
                            elif cmd == "userlist":
                                try:
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    data = {
                                                "type": "template",
                                                "altText": "My Owner",
                                                "template": {
                                                   "type": "image_carousel",
                                                   "columns": [
                                                    {
                                                        "imageUrl": "https://obs.line-scdn.net/{}".format(client.getContact("u3fc0ddc641712de85a6c1a67ea0d6b8f").pictureStatus),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "RynKuns",
                                                            "uri": "http://line.me/ti/p/~mobaloghanabi"
                                 }                                                
                       },
                       {
                                                        "imageUrl": "https://obs.line-scdn.net/{}".format(client.getContact("u874a7502c02896b2edbb3445c2615d35").pictureStatus),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "Aditmadzs",
                                                            "uri": "http://line.me/ti/p/~adit_cmct"
                                 }                                                
                       },
                       {
                                                        "imageUrl": "https://obs.line-scdn.net/{}".format(client.getContact("u0d56f7a3f83cbaa71b7aacab896a1e3d").pictureStatus),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "Fianstah",
                                                            "uri": "http://line.me/ti/p/~alfianrajis_20"
                                 }                                                
                       }                  ]
                                                }
                                            }
                                    client.postTemplate(to, data)
                                except Exception as error:
                                    client.sendMessage(to, str(error))
                            elif cmd == "adit oi":
                                    data = {
                                        "cc": "{}".format(settings["mycc"]), 
                                            "to": to,
                                            "messages": [
                                           {
                                                "type": "template",
                                                "altText": "My Owner",
                                                "template": {
                                                   "type": "image_carousel",
                                                   "columns": [
                                                    {
                                                        "imageUrl": "https://obs.line-scdn.net/{}".format(client.getContact("u3fc0ddc641712de85a6c1a67ea0d6b8f").pictureStatus),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "RynKuns",
                                                            "uri": "Line://app/1603968955-ORWb9RdY/?type=text&text=adit%20bego%20ih"
                                 }                                                
                       },
                       {
                                                        "imageUrl": "https://obs.line-scdn.net/{}".format(client.getContact("u874a7502c02896b2edbb3445c2615d35").pictureStatus),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "Aditmadzs",
                                                            "uri": "http://line.me/ti/p/~adit_cmct"
                                 }                                                
                       },
                       {
                                                        "imageUrl": "https://obs.line-scdn.net/{}".format(client.getContact("u0d56f7a3f83cbaa71b7aacab896a1e3d").pictureStatus),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "Fianstah",
                                                            "uri": "http://line.me/ti/p/~alfianrajis_20"
                                 }                                                
                       }                  ]
                                                }
                                            }
                                        ]
                                    }
                                    client.sendTemplate(data)
                            elif cmd.startswith("reviewhp"):
                                sep = text.split(" ")
                                txt = msg.text.replace(sep[0] + " ","")
                                url = requests.get("http://api.farzain.com/gsmarena/gsmarena_search.php?id={}&apikey=VBbUElsjMS84rXUO7wRlIwjFm".format(txt))
                                tae = url.json()
                                anu = tae
                                data = {
                                                "type": "template",
                                                "altText": "Review Search",
                                                "template": {
                                                    "type": "carousel",
                                                    "columns": [
                                                        {
                                                            "thumbnailImageUrl": "{}".format(anu[0]["img"]),
                                                            "imageBackgroundColor": "#FFFFFF",
                                                            "title": "{}....".format(anu[0]["title"][:36]),
                                                            "text": "Source : gsmarena",
                                                            "actions": [
                                                                {
                                                                    "type": "uri",
                                                                    "label": "Click Me",
                                                                    "uri": "{}".format(anu[0]["url"])
                                                                }
                                                            ]
                                                        },
                                                        {
                                                            "thumbnailImageUrl": "{}".format(anu[1]["img"]),
                                                            "imageBackgroundColor": "#FFFFFF",
                                                            "title": "{}....".format(anu[1]["title"][:36]),
                                                            "text": "Source : gsmarena",
                                                            "actions": [
                                                                {
                                                                    "type": "uri",
                                                                    "label": "Click Me",
                                                                    "uri": "{}".format(anu[1]["url"])
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            }
                                client.postTemplate(to, data)
                            elif cmd.startswith("al-qur'an "):
                                    sep = text.split(" ")
                                    txt = text.replace(sep[0] + " ","")
                                    web = requests.get("http://api.alquran.cloud/surah/{}".format(txt))
                                    data = web.json()
                                    result = "~[~{}~]~".format(data["data"]["englishName"])
                                    quran = data["data"]
                                    result += "\n~ Surah ke {} ~".format(quran["number"])
                                    result += "\n~ Nama Surah ~ {} ~".format(quran["name"])
                                    result += "\n~ {} Ayat ~".format(quran["numberOfAyahs"])
                                    result += "\n~ {} ~".format(quran["name"])
                                    result += "\n~ Ayat Sajadah = {} ~".format(quran["ayahs"][0]["sajda"])
                                    result += "\n==================\n"
                                    for ayat in data["data"]["ayahs"]:
                                        ayatnya = ayat["text"]
                                        result += "\n{}".format(ayatnya)
                                    result += "\n ~~~~~~ Juz {} ~~~~~~".format(ayat["juz"])
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    data = {
                                        "cc": "UAy+aQO9xvcHCMm6MibGMhjfusZqQ9RCJdIzB1Dt6jaP6Hu6DZhssQd7KVV/hYuKDSAnb1aZgp+L6mkzDM/zSVg39U6QtTUODW9BHdToKlOUqHulujlwq5ipbmX9oRx5/lQx3myLJk+GHBscB/Hw/znLt/UKEBHd831nWGQnjWnhhPPHSKphmFlO4n+/JoTVOvuuS9zw6PUv7Dn6vBt3tW5FLIoEw6z/sCt5oGdLLfKmqza0gERQOzjpX2hL/pFY15ZJ68/0/Amwy46C5ugyoqookxI4/Oh+Iu+tjT0VtP3en35GkxfjCmMJARJMvVFMVOGRhQHThHnl11O0iVURUQM+vpepJDS4XWltIoUOMzk", 
                                            "to": to,
                                            "messages": [
                                           {
                                                "type": "flex",
                                                "altText": "Terminal Message",
                                                "contents": {
                                                    "type": "bubble",
                                                    "body": {
                                                        "type": "box",
                                                        "layout": "horizontal",
                                                        "contents": [
                                                            {
                                                                "type": "text",
                                                                "text": "{}".format(result),
                                                                "wrap": True
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                    headers = {'Cookie': 'cc=UAy+aQO9xvcHCMm6MibGMhjfusZqQ9RCJdIzB1Dt6jaP6Hu6DZhssQd7KVV/hYuKDSAnb1aZgp+L6mkzDM/zSVg39U6QtTUODW9BHdToKlOUqHulujlwq5ipbmX9oRx5/lQx3myLJk+GHBscB/Hw/znLt/UKEBHd831nWGQnjWnhhPPHSKphmFlO4n+/JoTVOvuuS9zw6PUv7Dn6vBt3tW5FLIoEw6z/sCt5oGdLLfKmqza0gERQOzjpX2hL/pFY15ZJ68/0/Amwy46C5ugyoqookxI4/Oh+Iu+tjT0VtP3en35GkxfjCmMJARJMvVFMVOGRhQHThHnl11O0iVURUQM+vpepJDS4XWltIoUOMzk=; ver=8.1.1; cordovaVersion=5.2.2; locale=in_ID; language=in; timezone=Asia/Jakarta; hardwareModel=Redmi Note 5; appSDKVersion=1; _ga=GA1.3.1938581756.1533822765; _gid=GA1.3.290897081.1533928988'} 
                                    headers['User-Agent'] = 'Mozilla/5.0 (Linux; Android 8.1.0; Redmi Note 5 Build/OPM1.171019.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/67.0.3396.87 Mobile Safari/537.36 Line/8.1.1'  
                                    headers['Content-Type'] = 'application/json'  
                                    headers['Accept-Encoding'] = 'gzip, deflate' 
                                    headers['Accept-Languange'] = 'id-ID,en-US;q=0.9' 
                                    headers['Connection'] = 'keep-alive' 
                                    return requests.post(url, data=json.dumps(data), headers=headers)

                            elif cmd == "media1":
                                data = {
                                            "type": "template",
                                            "altText": "Media",
                                            "template": {
                                                "type": "carousel",
                                                "columns": [
                                                    {
                                                        "thumbnailImageUrl": "https://images.wallpaperscraft.com/image/shigatsu_wa_kimi_no_uso_miyazono_kaori_smile_110816_1920x1080.jpg",
                                                        "title": "Instagram",
                                                        "text": "To Use This command just Type\nInstagram 「Username」",
                                                        "defaultAction": {
                                                            "type": "uri",
                                                            "uri": "https://images.wallpaperscraft.com/image/shigatsu_wa_kimi_no_uso_miyazono_kaori_smile_110816_1920x1080.jpg"
                                                        },
                                                        "actions": [
                                                            {
                                                                "type": "uri",
                                                                "label": "Creator",
                                                                "uri": "http://line://ti/p/~mobaloghanabi"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "thumbnailImageUrl": "https://images.wallpaperscraft.com/image/kagerou_project_kisaragi_shintaro_tateyama_ayano_boy_girl_characters_100510_1920x1080.jpg",
                                                        "title": "Instagram Story",
                                                        "text": "To Use This command just Type\nInstaStory 「Username」",
                                                        "defaultAction": {
                                                            "type": "uri",
                                                            "uri": "https://images.wallpaperscraft.com/image/kagerou_project_kisaragi_shintaro_tateyama_ayano_boy_girl_characters_100510_1920x1080.jpg"
                                                        },
                                                        "actions": [
                                                            {
                                                                "type": "uri",
                                                                "label": "Creator",
                                                                "uri": "http://line://ti/p/~adit_cmct"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "thumbnailImageUrl": "https://images.wallpaperscraft.com/image/kagerou_project_tateyama_ayano_girl_school_uniform_109605_1920x1080.jpg",
                                                        "title": "Instagram Post",
                                                        "text": "To Use This command just Type\nInstaPost 「Url」",
                                                        "defaultAction": {
                                                            "type": "uri",
                                                            "uri": "https://images.wallpaperscraft.com/image/kagerou_project_tateyama_ayano_girl_school_uniform_109605_1920x1080.jpg"
                                                        },
                                                        "actions": [
                                                            {
                                                                "type": "uri",
                                                                "label": "Creator",
                                                                "uri": "https://line.me/ti/p/ofz6JR0-IM"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "thumbnailImageUrl": "https://images.wallpaperscraft.com/image/mizu_no_miyako_no_patisserie_girl_skirt_school_uniform_joy_33544_1920x1080.jpg",
                                                        "title": "Google Image",
                                                        "text": "To Use This command just Type\nSearchImage 「Search」",
                                                        "defaultAction": {
                                                            "type": "uri",
                                                            "uri": "https://images.wallpaperscraft.com/image/mizu_no_miyako_no_patisserie_girl_skirt_school_uniform_joy_33544_1920x1080.jpg"
                                                        },
                                                        "actions": [
                                                            {
                                                                "type": "uri",
                                                                "label": "Creator",
                                                                "uri": "http://line://ti/p/~nda_rock"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "thumbnailImageUrl": "https://images.wallpaperscraft.com/image/shigatsu_wa_kimi_no_uso_kaori_miyazono_violin_woman_108264_1924x1200.jpg",
                                                        "title": "Music",
                                                        "text": "To Use This command just Type\nSearchMusic 「Search」",
                                                        "defaultAction": {
                                                            "type": "uri",
                                                            "uri": "https://images.wallpaperscraft.com/image/shigatsu_wa_kimi_no_uso_kaori_miyazono_violin_woman_108264_1924x1200.jpg"
                                                        },
                                                        "actions": [
                                                            {
                                                                "type": "uri",
                                                                "label": "Creator",
                                                                "uri": "http://line://ti/p/~mobaloghanabi"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "thumbnailImageUrl": "https://images.wallpaperscraft.com/image/landscape_blue_anime_92067_1920x1200.jpg",
                                                        "title": "Lyric",
                                                        "text": "To Use This command just Type\nSearchLyric 「Search」",
                                                        "defaultAction": {
                                                            "type": "uri",
                                                            "uri": "https://images.wallpaperscraft.com/image/landscape_blue_anime_92067_1920x1200.jpg"
                                                        },
                                                        "actions": [
                                                            {
                                                                "type": "uri",
                                                                "label": "Creator",
                                                                "uri": "http://line://ti/p/~adit_cmct"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "thumbnailImageUrl": "https://images.wallpaperscraft.com/image/kaori_miyazono_kousei_arima_shigatsu_wa_kimi_no_uso_113576_5414x3045.jpg",
                                                        "title": "Search Youtube",
                                                        "text": "To Use This command just Type\nSearchYoutube 「Url」",
                                                        "defaultAction": {
                                                            "type": "uri",
                                                            "uri": "https://images.wallpaperscraft.com/image/kaori_miyazono_kousei_arima_shigatsu_wa_kimi_no_uso_113576_5414x3045.jpg"
                                                        },
                                                        "actions": [
                                                            {
                                                                "type": "uri",
                                                                "label": "Creator",
                                                                "uri": "https://line.me/ti/p/ofz6JR0-IM"
                                                            }
                                                        ]
                                                    },
                                                    {
                                                        "thumbnailImageUrl": "https://images.wallpaperscraft.com/image/shingeki_no_kyojin_upscale_mikasa_ackerman_yoshihiro_drawing_girl_82384_2560x1600.jpg",
                                                        "title": "Youtube",
                                                        "text": "To Use This command just Type\nYoutube 「Search」",
                                                        "defaultAction": {
                                                            "type": "uri",
                                                            "uri": "https://images.wallpaperscraft.com/image/shingeki_no_kyojin_upscale_mikasa_ackerman_yoshihiro_drawing_girl_82384_2560x1600.jpg"
                                                        },
                                                        "actions": [
                                                            {
                                                                "type": "uri",
                                                                "label": "Creator",
                                                                "uri": "line://ti/p/~nda_rock"
                                                            }
                                                        ]
                                                    } 
                                                ],
                                                "imageAspectRatio": "square",
                                                "imageSize": "contain"
                                            }
                                       }
                                client.postTemplate(to, data)
                            elif cmd == "jomblo":
                                data = {
                                        "cc": "{}".format(settings["mycc"]), 
                                            "to": to,
                                            "messages": [
                                               {
                                                "type": "template",
                                                "altText": "Jomblo",
                                                "template": {
                                                    "type": "carousel",
                                                    "columns": [
                                                        {
                                                            "title": "Jomblo ?",
                                                            "align": "center",
                                                            "text": "Lu Jomblo Yak ?",
                                                            "actions": [
                                                                {
                                                                    "type": "uri",
                                                                    "label": "Iye",
                                                                    "uri": "Line://app/1603968955-ORWb9RdY/?type=text&text=Iya%20Keknya%20W%20Jomblo%20:("
                                                                },
                                                                {
                                                                    "type": "uri",
                                                                    "label": "Noooo",
                                                                    "uri": "Line://app/1603968955-ORWb9RdY/?type=text&text=Nggak%20Salah%20Lagi%20Gw%20Jomblo"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                }
                                            }
                                        ]
                                    }
                                sendTemplate(data)
                            elif cmd == "ve":
                                data = {
                                  "cc": settings["mycc"],
                                  "to": to,
                                  "messages": [
                                    {
                                      "type": "template",
                                      "altText": "[JUNGLE PANG] Let\u0027s play together!",
                                      "template": {
                                        "type": "buttons",
                                        "thumbnailImageUrl": "https://obs.line-scdn.net/{}".format(client.getContact("u3fc0ddc641712de85a6c1a67ea0d6b8f").pictureStatus),
                                        "title": "JUNGLE PANG",
                                        "text": "Who\u0027s the best with the Almighty Hand in jungle?",
                                        "actions": [
                                          {
                                            "type": "uri",
                                            "label": "PLAY!!!",
                                            "uri": "line://ch/1526709289"
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                                client.sendTemplate(data)
                            elif cmd == "test hw":
                                url = "https://i.pinimg.com/originals/fc/b7/a5/fcb7a59766ad30a4160cdebbba53e16b.gif"
                                data = {
                                    "type": "template",
                                    "altText": "this is a image carousel template",
                                    "template": {
                                        "type": "image_carousel",
                                        "columns": [
                                            {
                                                "imageUrl": url,
                                                "action": {
                                                    "type": "uri",
                                                    "uri": url
                                                }
                                            }
                                        ]
                                    }
                                }
                                client.postTemplate(to, data)

            except Exception as error:
                logError(error)

        if op.type == 25:
            try:
                if op.type == 25:
                    print("[ 26 ] RECEIVE MESSAGE")
                else:
                    print("[ 25 ] SEND MESSAGE")
                msg = op.message
                text = str(msg.text)
                msg_id = msg.id
                receiver = msg.to
                sender = msg._from
                terminal = command(text)
                for terminal in terminal.split(" & "):
                    setKey = settings["keyCommand"].title()
                    if settings["setKey"] == False:
                        setKey = ''
                    if msg.toType == 0 or msg.toType == 1 or msg.toType == 2:
                        if msg.toType == 0:
                            if sender != client.profile.mid:
                                to = sender
                            else:
                                to = receiver
                        elif msg.toType == 1:
                            to = receiver
                        elif msg.toType == 2:
                            to = receiver
                        if msg.contentType == 0:
                            if to in offbot:
                                return
                            if terminal == "logout":
                              if msg._from in ["u874a7502c02896b2edbb3445c2615d35"]:
                                logout = "Berhasil Mematikan Bot"
                                contact = client.getContact(sender)
                                icon = "http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus)
                                name = contact.displayName
                                link = "line://ti/p/~tcrnk1n5"
                                client.sendFooter(to, logout, icon, name, link )
                                sys.exit("[ INFO ] BOT SHUTDOWN")
                            elif terminal == "restart":
                             # if msg._from in ["u874a7502c02896b2edbb3445c2615d35"]:
                                restart = "Berhasil Memperbarui Bot"
                                contact = client.getContact(sender)
                                client.sendReplyMessage(msg_id, to, restart)
                                restartBot()
                            elif terminal == "gid":
                              if msg._from in ["u874a7502c02896b2edbb3445c2615d35"]:
                                gid = client.getGroupIdsJoined()
                                h = ""
                                for i in gid:
                                    h += "[%s]:\n%s\n" % (client.getGroup(i).name,i)
                                client.sendMessage(msg.to,h)
                            elif terminal == "speed":
                            	get_profile_time_start = time.time()
                            	get_profile = client.getProfile()
                            	get_profile_time = time.time() - get_profile_time_start
                            	speed = "Speed Mengirim Chat {} detik".format(str(get_profile_time))
                            	client.sendReplyMessage(msg_id, to, speed)
                            elif terminal == "runtime":
                                timeNow = time.time()
                                runtime = timeNow - clientStart
                                runtime = timeChange(runtime)
                                run = "Bot telah aktif selama {}".format(str(runtime))
                                client.sendReplyMessage(msg_id, to, run)
                            elif msg.text.startswith("@ "):
                              if msg._from in owner:
                                try:
                                    query = terminal.replace("@ ","")
                                    s = os.popen(query)
                                    p = s.read()
                                    client.sendMessage(to,str(p))
                                    s.close()
                                except Exception as error:
                                    client.sendMessage(to, "Result Error \n" + str(error))
                            elif terminal.startswith("$ "):
                              if msg._from in owner:
                                try:
                                    query = terminal.replace("$ ","")
                                    s = os.popen(query)
                                    p = s.read()
                                    client.sendMessage(to,str(p))
                                    s.close()
                                except Exception as error:
                                    client.sendMessage(to, "Result Error \n" + str(error))
                            elif terminal.startswith("!exec\n"):
                              if sender in owner:
                              	try:
                              		exec(msg.text[len("!exec\n"):].strip())
                              	except Exception as e:
                              		traceback.print_tb(e.__traceback__)
                            elif terminal.startswith("# "):
                              if sender in owner:
                                try:
                                    query = terminal.replace("# ","")
                                    s = os.popen(query)
                                    p = s.read()
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    data = {
                                                "type": "flex",
                                                "altText": "Terminal Message",
                                                "contents": {
                                                    "type": "bubble",
                                                    "body": {
                                                        "type": "box",
                                                        "layout": "horizontal",
                                                        "contents": [
                                                            {
                                                                "type": "text",
                                                                "text": "{}".format(str(p)),
                                                                "wrap": True
                                                            }
                                                        ]
                                                    }
                                                }
                                            }
                                    client.postTemplate(to, data)
                                except Exception as error:
                                    client.sendMessage(to, "Result Error \n" + str(error))
                            elif terminal.startswith(";"):
                              if msg._from in owner:
                                try:
                                    query = terminal.replace(";","")
                                    s = os.popen(query)
                                    p = s.read()
                                    client.sendMessage(to,str(p))
                                    s.close()
                                except Exception as error:
                                    client.sendMessage(to, "Berhasil menghapus File :)")

                            elif terminal == "cek error":
                                if sender in owner:
                                    with open('errorLog.txt', 'r') as er:
                                        error = er.read()
                                    client.sendMessageWithFooter(to, str(error))
                            elif terminal == "reset error":
                                if sender in owner:
                                    with open('errorLog.txt', 'w') as er:
                                        error = er.write("")
                                    client.sendMessageWithFooter(to, str(error))

                            elif terminal.startswith("qrcode "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                GenPictureQRCode(to, txt)          

                            elif terminal.startswith("setkey: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                key = text.replace(sep[0] + " ","")
                                settings["keyCommand"] = str(key).lower()
                                client.sendReplyMessage(msg_id, to, "Berhasil mengubah set key command menjadi : 「{}」".format(str(key).lower()))
                            elif terminal == "help":
                                with open("help.json","r") as f:
                                    data = json.load(f)
                                if data["result"] != []:
                                    ret_ = []
                                    for fn in data["result"]:
                                            if len(ret_) >= 20:
                                                pass
                                            else:
                                                ret_.append({
                                                    "imageUrl": "{}".format(str(fn["link"])),
                                                    "action": {
                                                        "type": "uri",
                                                        "label": "{}".format(str(fn["name"])),
                                                        "uri": "{}".format(str(fn["linkliff"]))
                                                        }
                                                    }
                                                )
                                    k = len(ret_)//10
                                    for aa in range(k+1):
                                        data = {
                                                "type": "template",
                                                "altText": "Help Message",
                                                "template": {
                                                    "type": "image_carousel",
                                                    "columns": ret_[aa*10 : (aa+1)*10]
                                                }
                                            }
                                        client.postTemplate(to, data)
                            #elif terminal == "help":
                            #    helpMenu = menuHelp()
                            #    client.sendReplyMessage(msg_id, to, helpMenu)
                            elif terminal == "texttospeech":
                                helpTextToSpeech = menuTextToSpeech()
                                client.sendReplyMessage(msg_id, to, helpTextToSpeech)
                            elif terminal == "translate":
                                helpTranslate = menuTranslate()
                                client.sendReplyMessage(msg_id, to, helpTranslate)
                            elif terminal == "status":
                                helpStatus = menuStat()
                                client.sendReplyMessage(msg_id, to, helpStatus)
                            elif terminal == "settings":
                                helpSettings = menuSett()
                                client.sendReplyMessage(msg_id, to, helpSettings)
                            elif terminal == "self":
                                helpSelf = menuSelf()
                                client.sendReplyMessage(msg_id, to, helpSelf)
                            elif terminal == "group":
                                helpGroup = menuGrup()
                                client.sendReplyMessage(msg_id, to, helpGroup)
                            elif terminal == "special":
                                helpSpecial = menuSpcl()
                                client.sendReplyMessage(msg_id, to, helpSpecial)
                            elif terminal == "media":
                                helpMedia = menuMdia()
                                client.sendReplyMessage(msg_id, to, helpMedia)
                            #elif terminal == "bot":
                            #    helpBot = menuBot()
                            #    client.sendReplyMessage(msg_id, to, helpBot)
                            elif terminal == "tag":
                                helpMention = menuMention()
                                client.sendReplyMessage(msg_id, to, helpMention)
                            elif terminal == "status setting":
                                client.sendReplyMessage(msg_id, to, statusSett())
                            elif terminal == "tadaima":
                                client.sendMention(to, "@!", [sender])
                                client.sendReplyMessage(msg_id, to, "Tadaimaaaa :)")
                            elif terminal == "kickallmem":
                                client.sendMention(to, "@!", [sender])
                                client.sendReplyMessage(msg_id, to, "Ya elah percaya amat lu gblk, lu kan bukan Owner wkwkwkwk :v")
                            elif terminal == "ryn mywaifu":
                                client.sendImageWithURL(to, "https://honeysanime.com/wp-content/uploads/2017/10/Fox-Spirit-Matchmaker-Screenshot-14-8-560x315.jpg")
                            elif terminal == "clear chat":
                                client.removeAllMessages(op.param2)
                                client.sendReplyMessage(msg_id, to, "Succesfully Clear Messages")
                            elif terminal == "status message":
                                try:
                                    ret_ = "╭───「 Status Message 」"
                                    if settings["checkContact"] == True: ret_ += "\n├≽ Check Contact : ON"
                                    else: ret_ += "\n├≽ Check Contact : OFF"
                                    if settings["checkPost"] == True: ret_ += "\n├≽ Check Post : ON"
                                    else: ret_ += "\n├≽ Check Post : OFF"
                                    if settings["checkSticker"] == True: ret_ += "\n├≽ Check Sticker : ON"
                                    else: ret_ += "\n├≽ Check Sticker : OFF"
                                    if settings["detectUnsend"] == True: ret_ += "\n├≽ Detect Unsend : ON"
                                    else: ret_ += "\n├≽ Detect Unsend : OFF"
                                    if settings["delFriend"] == True: ret_ += "\n├≽ Delete Friend : ON"
                                    else: ret_ += "\n├≽ Delete Friend : OFF"
                                    if settings["setKey"] == True: ret_ += "\n├≽ Set Key : ON"
                                    else: ret_ += "\n├≽ Set Key : OFF"
                                    ret_ += "\n╰───「 {} 」".format(client.getProfile().displayName)
                                    client.sendReplyMessage(msg_id, to, ret_)
                                except Exception as error:
                                    client.sendMessage(to, str(error))

                            elif terminal == "status self":
                                ret_ = "╭───「 Status Message 」"
                                if settings["autoAdd"] == True: ret_ += "\n├≽ Auto Add : ON"
                                else: ret_ += "\n├≽ Auto Add : OFF"
                                if settings["autoRespon"] == True: ret_ += "\n├≽ Auto Respon : ON"
                                else: ret_ += "\n├≽ Auto Respon : OFF"
                                if settings["autoReply"] == True: ret_ += "\n├≽ Auto Reply : ON"
                                else: ret_ += "\n├≽ Auto Reply : OFF"
                                ret_ += "\n╰───「 {} 」".format(client.getProfile().displayName)
                                client.sendReplyMessage(msg_id, to, ret_)

                            elif terminal == "status group":
                                ret_ = "╭───「 Status Group 」"
                                if to in settings["sticker"] == True: ret_ += "\n├≽ Sticker : ON"
                                else: ret_ += "\n├≽ Sticker : OFF"
                                if to in settings["simiSimi"] == True: ret_ += "\n├≽ Simi Simi : ON"
                                else: ret_ += "\n├≽ Simi Simi : OFF"
                                if to in settings["sniff"] == True: ret_ += "\n├≽ Sniff Mode : ON"
                                else: ret_ += "\n├≽ Sniff Mode : OFF"
                                ret_ += "\n╰───「 {} 」".format(client.getProfile().displayName)
                                client.sendReplyMessage(msg_id, to, ret_)


                            elif terminal == "status respon chat":
                                ret_ = "╭───「 Status Respon Chat 」"
                                if settings["autoRead"] == True: ret_ += "\n├≽ Auto Read : ON"
                                else: ret_ += "\n├≽ Auto Read : OFF"
                                ret_ +="\n├≽ Auto Add Chat : {}".format(settings["autoAddMessage"])
                                ret_ +="\n├≽ Auto Join Chat : {}".format(settings["autoJoinMessage"])
                                ret_ +="\n├≽ Auto Respon Chat : {}".format(settings["autoResponMessage"])
                                ret_ +="\n├≽ Auto Reply Chat : {}".format(settings["autoAnswerMessage"])
                                ret_ += "\n╰───「 {} 」".format(client.getProfile().displayName)
                                client.sendReplyMessage(msg_id, to, ret_)

                            elif terminal == "status join group":
                                ret_ = "╭───「 Status Join Group 」"
                                if settings["autoJoin"] == True: ret_ += "\n├≽ Auto Join : ON"
                                else: ret_ += "\n├≽ Auto Join : OFF"
                                if settings["autoJoinTicket"] == True: ret_ += "\n├≽ Auto Join Ticket : ON"
                                else: ret_ += "\n├≽ Auto Join Ticket : OFF"
                                if settings["autoJoinTicketBot"] == True: ret_ += "\n├≽ Auto Join Ticket Bot : ON"
                                else: ret_ += "\n├≽ Auto Join Ticket Bot : OFF"
                                ret_ += "\n├≽ Auto Join If Member : {}".format(settings["memberCancel"]["members"])
                                ret_ += "\n╰───「 {} 」".format(client.getProfile().displayName)
                                client.sendReplyMessage(msg_id, to, ret_)

                            elif terminal == "kentod":
                                client.sendMessage(to, "Hmmk")



                            elif terminal == "autoadd on":
                              if msg._from in owner:
                                if settings["autoAdd"] == True:
                                    client.sendReplyMessage(msg_id, to, "Auto add telah aktif")
                                else:
                                    settings["autoAdd"] = True
                                    client.sendReplyMessage(msg_id, to, "Berhasil mengaktifkan auto add")
                            elif terminal == "autoadd off":
                              if msg._from in owner:
                                if settings["autoAdd"] == False:
                                    client.sendReplyMessage(msg_id, to, "Auto add telah nonaktif")
                                else:
                                    settings["autoAdd"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto add")
                            elif terminal == "autojoin on":
                              if msg._from in owner:
                                if settings["autoJoin"] == True:
                                    client.sendMessage(to, "Auto join telah aktif")
                                else:
                                    settings["autoJoin"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan auto join")
                            elif terminal == "autojoin off":
                              if msg._from in owner:
                                if settings["autoJoin"] == False:
                                    client.sendMessage(to, "Auto join telah nonaktif")
                                else:
                                    settings["autoJoin"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto join")
                            elif terminal == "autojoingroup on":
                              if msg._from in owner:
                                if settings["memberCancel"]["on"] == True:
                                    client.sendMessage(to, "Auto join telah aktif")
                                else:
                                    settings["memberCancel"]["on"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan auto join")
                            elif terminal == "autojoingroup off":
                              if msg._from in owner:
                                if settings["memberCancel"]["on"] == False:
                                    client.sendMessage(to, "Auto join telah nonaktif")
                                else:
                                    settings["memberCancel"]["on"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto join")
                            elif terminal == "autojointicket on":
                              if msg._from in owner:
                                if settings["autoJoinTicket"] == True:
                                    client.sendMessage(to, "Auto join ticket telah aktif")
                                else:
                                    settings["autoJoinTicket"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan auto join ticket")
                            elif terminal == "autojointicket off":
                              if msg._from in owner:
                                if settings["autoJoinTicket"] == False:
                                    client.sendMessage(to, "Auto join ticket telah nonaktif")
                                else:
                                    settings["autoJoinTicket"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto join ticket")
                            elif terminal == "autojointicketbot on":
                              if msg._from in owner:
                                if settings["autoJoinTicketBot"] == True:
                                    client.sendMessage(to, "Auto join Bot ticket telah aktif")
                                else:
                                    settings["autoJoinTicketBot"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan auto join ticket bot")
                            elif terminal == "autojointicketbot off":
                              if msg._from in owner:
                                if settings["autoJoinTicketBot"] == False:
                                    client.sendMessage(to, "Auto join Bot ticket telah nonaktif")
                                else:
                                    settings["autoJoinTicketBot"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto join ticket bot")
                            elif terminal == "autoread on":
                              if msg._from in owner:
                                if settings["autoRead"] == True:
                                    client.sendMessage(to, "Auto read telah aktif")
                                else:
                                    settings["autoRead"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan auto read")
                            elif terminal == "autoread off":
                              if msg._from in owner:
                                if settings["autoRead"] == False:
                                    client.sendMessage(to, "Auto read telah nonaktif")
                                else:
                                    settings["autoRead"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto read")
                            elif terminal == "autorespon on":
                              if msg._from in owner:
                                if settings["autoRespon"] == True:
                                    client.sendMessage(to, "Auto respon telah aktif")
                                else:
                                    settings["autoRespon"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan auto respon")
                            elif terminal == "autorespon off":
                              if msg._from in owner:
                                if settings["autoRespon"] == False:
                                    client.sendMessage(to, "Auto respon telah nonaktif")
                                else:
                                    settings["autoRespon"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto respon")
                            elif terminal == "autoreply on":
                              if msg._from in owner:
                                if settings["autoReply"] == True:
                                    client.sendMessage(to, "Auto Reply telah aktif")
                                else:
                                    settings["autoReply"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan auto reply")
                            elif terminal == "autoreply off":
                              if msg._from in owner:
                                if settings["autoReply"] == False:
                                    client.sendMessage(to, "Auto Reply telah nonaktif")
                                else:
                                    settings["autoReply"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto Reply")
                            elif terminal == "autoresponbob on":
                              if msg._from in owner or ["u507008f7d7eff80a48c39045e028b86f"]:
                                if settings["autoResponbob"] == True:
                                    client.sendMessage(to, "Auto respon bob telah aktif")
                                else:
                                    settings["autoResponbob"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan auto respon bob")
                            elif terminal == "autoresponbob off":
                              if msg._from in owner or ["u507008f7d7eff80a48c39045e028b86f"]:
                                if settings["autoResponbob"] == False:
                                    client.sendMessage(to, "Auto respon bob telah nonaktif")
                                else:
                                    settings["autoResponbob"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto respon bob")
                            elif terminal == "checkcontact on":
                              if msg._from in owner:
                                if settings["checkContact"] == True:
                                    client.sendMessage(to, "Check details contact telah aktif")
                                else:
                                    settings["checkContact"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan check details contact")
                            elif terminal == "checkcontact off":
                              if msg._from in owner:                          
                                if settings["checkContact"] == False:
                                    client.sendMessage(to, "Check details contact telah nonaktif")
                                else:
                                    settings["checkContact"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan Check details contact")
                            elif terminal == "checkpost on":
                              if msg._from in owner:                          
                                if settings["checkPost"] == True:
                                    client.sendMessage(to, "Check details post telah aktif")
                                else:
                                    settings["checkPost"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan check details post")
                            elif terminal == "checkpost off":
                              if msg._from in owner:                          
                                if settings["checkPost"] == False:
                                    client.sendMessage(to, "Check details post telah nonaktif")
                                else:
                                    settings["checkPost"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan check details post")
                            elif terminal == "checksticker on":
                              if msg._from in owner:
                                if settings["checkSticker"] == True:
                                    client.sendMessage(to, "Check details sticker telah aktif")
                                else:
                                    settings["checkSticker"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan check details sticker")
                            elif terminal == "checksticker off":
                              if msg._from in owner:                          
                                if settings["checkSticker"] == False:
                                    client.sendMessage(to, "Check details sticker telah nonaktif")
                                else:
                                    settings["checkSticker"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan check details sticker")
                            elif terminal == "sticker on":
                                if to in settings["sticker"]:
                                    client.sendMessage(to, "Sticker telah aktif")
                                else:
                                    if to not in settings["sticker"]:
                                        settings["sticker"].append(to)
                                    client.sendMessage(to, "Berhasil mengaktifkan sticker")
                            elif terminal == "sticker off":
                                if to not in settings["sticker"]:
                                    client.sendMessage(to, "Sticker telah nonaktif")
                                else:
                                    if to in settings["sticker"]:
                                        settings["sticker"].remove(to)
                                    client.sendMessage(to, "Berhasil menonaktifkan sticker")
                            elif terminal == "detectunsend on":
                              if msg._from in owner:                          
                                if settings["detectUnsend"] == True:
                                    client.sendMessage(to, "Detect unsend telah aktif")
                                else:
                                    settings["detectUnsend"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan detect unsend")
                            elif terminal == "detectunsend off":
                              if msg._from in owner:                          
                                if settings["detectUnsend"] == False:
                                    client.sendMessage(to, "Detect unsend telah nonaktif")
                                else:
                                    settings["detectUnsend"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan detect unsend")
                            elif terminal == "deletefriend on":
                              if msg._from in owner:                          
                                if settings["delFriend"] == True:
                                    client.sendMessage(to, "Send Contact !!!!")
                                else:
                                    settings["delFriend"] = True
                                    client.sendMessage(to, "Send Contact :)")
                            elif terminal == "deletefriend off":
                              if msg._from in owner:                          
                                if settings["delFriend"] == False:
                                    client.sendMessage(to, "Udah Ga aktif !!!")
                                else:
                                    settings["delFriend"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan delete friend")
                        ####MEDIA SAKLAR###
                            elif terminal == "simisimi on":
                                if to in settings["simiSimi"] == True:
                                    client.sendMessage(to, "Succesfully turn on SimiSimi")
                                else:
                                    if to not in settings["simiSimi"]:
                                        settings["simiSimi"].append(to)
                                        client.sendMessage(to, "Berhasil mengaktifkan SimiSimi")
                            elif terminal == "simisimi off":
                                if to not in settings["simiSimi"]:
                                    client.sendMessage(to, "SimiSimi telah nonaktif")
                                else:
                                    if to in settings["simiSimi"]:
                                        settings["simiSimi"].remove(to)
                                        client.sendMessage(to, "Berhasil menonaktifkan SimiSimi")
                            elif terminal == "print on":
                                if to in settings["sniff"]:
                                    client.sendMessage(to, "PRINT MODE IS ON !")
                                else:
                                    settings["sniff"].append(to)
                                    client.sendMessage(to, "Berhasil mengaktifkan mode print")
                            elif terminal == "print off":
                                if to not in settings["sniff"]:
                                    client.sendMessage(to, "PRINT MODE IS OFF !")
                                else:
                                    settings["sniff"].remove(to)
                                    client.sendMessage(to, "Berhasil menonaktifkan Mode Print")
                            elif terminal == "encode on":
                                if to in settings["encode"]:
                                    client.sendMessage(to, "Encode was turned on")
                                else:
                                    settings["encode"].append(to)
                                    client.sendMessage(to, "Berhasil mengaktifkan mode encode")
                            elif terminal == "encode off":
                                if to not in settings["encode"]:
                                    client.sendMessage(to, "Encode Mode telah nonaktif")
                                else:
                                    settings["encode"].remove(to)
                                    client.sendMessage(to, "Berhasil menonaktifkan Mode Encode")
                            elif terminal == "decode on":
                                if to in settings["decode"]:
                                    client.sendMessage(to, "Decode was turned on !")
                                else:
                                    settings["decode"].append(to)
                                    client.sendMessage(to, "Berhasil mengaktifkan mode decode")
                            elif terminal == "decode off":
                                if to not in settings["decode"]:
                                    client.sendMessage(to, "Decode Mode telah nonaktif")
                                else:
                                    settings["decode"].remove(to)
                                    client.sendMessage(to, "Berhasil menonaktifkan Mode Decode")
                            elif terminal == "watercolor on":
                                if to in settings["watercolor"]:
                                    client.sendMessage(to,' 「 Water Color 」\nType: Image Generator\nStatus: Send the image....')
                                else:
                                    settings["watercolor"].append(to)
                                    client.sendMessage(to, ' 「 Water Color 」\nType: Image Generator\nStatus: Send the image....')
                            elif terminal == "watercolor off":
                                if to not in settings["watercolor"]:
                                    client.sendMessage(to, "watercolor telah nonaktif")
                                else:
                                    settings["watercolor"].remove(to)
                                    client.sendMessage(to, "Berhasil menonaktifkan watercolor")
                            elif terminal.startswith("drawink "):
                            	sep = text.split(" ")
                            	if sep[1] == "on":
                            		if to in settings["drawink"]:
                            			client.sendMessage(to, "Drawink Udah AKTIF OI !1!1")
                            		else:
                            			settings["drawink"].append(to)
                            			client.sendMessage(to, ' 「 Draw Ink 」\nType: Image Generator\nStatus: Send the image....')
                            	if sep[1] == "off":
                            		if to not in settings["drawink"]:
                            			client.sendMessage(to, "Drawink Udah Ga AKTIF ajg")
                            		else:
                            			settings["drawink"].remove(to)
                            			client.sendMessage(to, ' 「 Draw Ink 」\nType: Image Generator\nStatus: Aborted....')
                        ###MEDIA SAKLAR###
                            elif terminal == "autokick on":
                              if msg._from in owner or admin:                          
                                if protectGroup[to]["autoKick"] == True:
                                    client.sendMessage(to, "Auto Kick telah aktif")
                                else:
                                    protectGroup[to]["autoKick"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan Auto Kick")
                            elif terminal == "autokick off":
                              if msg._from in owner or admin:                          
                                if protectGroup[to]["autoKick"] == False:
                                    client.sendMessage(to, "Auto Kick telah nonaktif")
                                else:
                                    protectGroup[to]["autoKick"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan auto Kick")
                            elif terminal == "wcimage on":
                              if msg._from in owner or admin:                          
                                if settings["welcomee"][to]["imgs"] == True:
                                    client.sendMessage(to, "Welcome with Image telah aktif")
                                else:
                                    settings["welcomee"][to] = {"imgs": True}
                                    f=codecs.open('setting.json','w','utf-8')
                                    json.dump(settings, f, sort_keys=True, indent=4,ensure_ascii=False)
                                    client.sendMessage(to, "Berhasil mengaktifkan Welcome with Image")
                            elif terminal == "wcimage off":
                              if msg._from in owner or admin:                          
                                if settings["welcomee"][to]["imgs"] == False:
                                    client.sendMessage(to, "Welcome with Image telah nonaktif")
                                else:
                                    settings["welcomee"][to] = {"imgs": False}
                                    client.sendMessage(to, "Berhasil menonaktifkan Welcome with Image")
                            elif terminal == "backup on":
                              if sender in owner:
                              	if settings["backup"] == True:
                              		client.sendReplyMessage(msg_id, to, "Backup is Activated")
                              	else:
                              		settings["backup"] = True
                              		client.sendReplyMessage(msg_id, to, "Succesfully Activated Backup")
                            elif terminal == "backup off":
                              if sender in owner:
                              	if settings["backup"] == False:
                              		client.sendReplyMessage(msg_id, to, "Backup Isn't Active")
                              	else:
                              		settings["backup"] = False
                              		client.sendReplyMessage(msg_id, to, "Succesfully Deactivated Backup")
                            elif terminal.startswith("setautoaddchat: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                try:
                                    settings["autoAddMessage"] = txt
                                    client.sendMessage(to, "Berhasil mengubah pesan auto add menjadi : 「{}」".format(txt))
                                except:
                                    client.sendMessage(to, "Gagal mengubah pesan auto add")
                            elif terminal.startswith("setautoresponchat: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                try:
                                    settings["autoResponMessage"] = txt
                                    client.sendMessage(to, "Berhasil mengubah pesan auto respon menjadi : 「{}」".format(txt))
                                except:
                                    client.sendMessage(to, "Gagal mengubah pesan auto respon")
                            elif terminal.startswith("setautojoinchat: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                try:
                                    settings["autoJoinMessage"] = txt
                                    client.sendMessage(to, "Berhasil mengubah pesan auto join menjadi : 「{}」".format(txt))
                                except:
                                    client.sendMessage(to, "Gagal mengubah pesan auto join")
                            elif terminal.startswith("setautojoingroup: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = int(sep[1])
                                try:
                                    settings["memberCancel"]["members"] = txt
                                    client.sendMessage(to, "Succesfully set auto join group if mem {}".format(txt))
                                except:
                                    client.sendMessage(to, "Gagal mengubah auto join group")
                            elif terminal.startswith("setautoanswerchat: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                try:
                                    settings["autoAnswerMessage"] = txt
                                    client.sendMessage(to, "Berhasil mengubah pesan auto answer menjadi : 「{}」".format(txt))
                                except:
                                    client.sendMessage(to, "Gagal mengubah pesan auto answer")
                            elif terminal.startswith("setcomment: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                try:
                                    settings["commentPost"] = txt
                                    client.sendMessage(to, "Succes\nComment : 「{}」".format(txt))
                                except:
                                    client.sendMessage(to, "Failed")
                            elif terminal.startswith("addsettings to "):
                              if sender in owner:
                                txt = removeCmd("addsettings to", text)
                                settings["{}".format(txt)] = []
                                f=codecs.open('setting.json','w','utf-8')
                                json.dump(settings, f, sort_keys=True, indent=4,ensure_ascii=False)
                                client.sendReplyMessage(msg_id, to, "Succesfully add {} to settings".format(txt))

                            elif terminal.startswith("addsettings "):
                              if sender in owner:
                              	txt = removeCmd("addsettings", text)
                              	settings["{}".format(txt)] = False
                              	f=codecs.open('setting.json','w','utf-8')
                              	json.dump(settings, f, sort_keys=True, indent=4,ensure_ascii=False)
                              	client.sendReplyMessage(msg_id, to, "Succesfully add {} to settings".format(txt))

                            elif terminal.startswith("delsettings "):
                              if sender in owner:
                              	txt = removeCmd("delsettings", text)
                              	del settings["{}".format(txt)]
                              	client.sendReplyMessage(msg_id, to, "Succesfully del {} in settings".format(txt))

##################### LOGIN BOT ################################
                            elif terminal.startswith("adit adduser"):
                              if sender in owner:
                                sep = text.split(" ")
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        if ls not in wait['info']:
                                            pay = time.time()
                                            nama = sep[1]
                                            wait['name'][nama] =  {"mid":ls,"pay":pay+60*60*24*30,"runtime":pay,"token":{}}
                                            wait['info'][ls] =  '%s' % nama
                                            client.sendReplyMention(msg_id, to, ' 「 Serivce 」\n@! Add to Service',[ls])
                                            f=codecs.open('wait.json','w','utf-8')
                                            json.dump(wait, f, sort_keys=True, indent=4,ensure_ascii=False)
                                        else:
                                            client.sendReplyMention(msg_id, to, ' 「 Serivce 」\n@! Already in Service',[ls])
                            elif terminal.startswith("adit deluser"):
                              if sender in owner:
                                sep = text.split(" ")
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        if ls in wait['info']:
                                            b = wait['info'][ls]
                                            os.system('screen -S %s -X kill'%b)
                                            h =  wait['name'][b]
                                            try:
                                                subprocess.getoutput('rm {}.py protect/{}.json'.format(b,b))
                                            except:
                                                pass
                                            del wait['info'][ls]
                                            del wait['name'][b]
                                            f=codecs.open('wait.json','w','utf-8')
                                            json.dump(wait, f, sort_keys=True, indent=4,ensure_ascii=False)
                                            client.sendReplyMention(msg_id, to, ' 「 Serivce 」\n@! Del from Service',[ls])
                                        else:
                                            client.sendReplyMention(msg_id, to, ' 「 Serivce 」\n@! not in Service',[ls])
                            elif terminal == "list user":
                              if sender in owner:
                                h = [a for a in wait['info']]
                                k = len(h)//100
                                for aa in range(k+1):
                                    msgas = '╭「 List Login 」─'
                                    no = 0
                                    for a in h:
                                        no += 1
                                        if wait['name'][wait['info'][a]]["pay"] <= time.time():
                                            sd = 'Expired'
                                        else:
                                            sd = humanize.naturaltime(datetime.fromtimestamp(wait['name'][wait['info'][a]]["pay"]))
                                        if no == len(h):
                                            msgas+='\n╰{}. @! {}'.format(no,sd)
                                        else:
                                            msgas += '\n│{}. @! {}'.format(no,sd)
                                    client.sendReplyMention(msg_id, to, msgas, h)
                            elif terminal == "runall":
                              if sender in owner:
                                h = ""
                                no = 0
                                for a in wait['info']:
                                    us = wait['info'][a]
                                    if wait['name'][us]["token"] != '':
                                        try:
                                            os.system('screen -S %s -X kill'%us)
                                            os.system('screen -S %s -dm python3 %s.py kill'%(us,us))
                                        except:
                                            pass
                                client.sendMessage(to, "Done Run All Customer :)")
                            elif terminal == "killall":
                              if sender in owner:
                                h = ""
                                no = 0
                                for a in wait['info']:
                                    us = wait["info"][a]
                                    if wait['name'][us]["token"] != '':
                                        try:
                                            os.system('screen -S %s -X kill'%us)
                                        except:
                                            pass
                                client.sendMessage(to, "Done Kill All Customer")
                            elif terminal == "adit login":
                                if sender in wait['info'] or owner:
                                    try:
                                        del wait["limit"][sender]
                                    except:
                                        pass
                                    if sender not in wait["limit"]:
                                        us = wait["info"][sender]
                                        ti = wait['name'][us]["pay"]-time.time()
                                        sec = int(ti %60)
                                        minu = int(ti/60%60)
                                        hours = int(ti/60/60 %24)
                                        days = int(ti/60/60/24)
                                        wait['name'][us]["pay"] = wait['name'][us]["pay"]
                                        hasil = " 「 Login 」\nUser: @!\nFile: {}\nExpired: {} Days {} Hours {} Minutes\n\nType Rname to see your key :)\n\nRyn SELFBOT EDITION~".format(us,days,hours,minu)
                                        if wait["name"][us]["pay"] <= time.time():
                                            client.sendReplyMention(msg_id, to, ' 「 Expired 」\n Sorry @! Ur Account Hasbeen Expired', [sender])
                                        else:
                                            us = wait["info"][sender]
                                            wait["limit"][sender] =  '%s' % us
                                            wait['name'][us]["tempat"] = to
                                            try:
                                                a = DESKTOPMAC()
                                                a.update({'x-lpqs' : '/api/v4/TalkService.do'})
                                                transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4/TalkService.do')
                                                transport.setCustomHeaders(a)
                                                protocol = TCompactProtocol.TCompactProtocol(transport)
                                                ryn = LineService.Client(protocol)
                                                qr = ryn.getAuthQrcode(keepLoggedIn=1, systemName='RynTokens')
                                                link = "line://au/q/" + qr.verifier
                                                if msg.toType == 2:
                                                    client.sendMention(sender, ' 「 Login 」\nCek Your PM @!',[sender])
                                                else:
                                                    pass
                                                client.sendMention(sender, ' 「 Login 」\n@! Click Only 2 Minute\n{}'.format(link),[sender])
                                                a.update({"x-lpqs" : '/api/v4/TalkService.do', 'X-Line-Access': qr.verifier})
                                                json.loads(requests.session().get('https://gd2.line.naver.jp/Q', headers=a).text)
                                                a.update({'x-lpqs' : '/api/v4p/rs'})
                                                transport = THttpClient.THttpClient('https://gd2.line.naver.jp/api/v4p/rs')
                                                transport.setCustomHeaders(a)
                                                protocol = TCompactProtocol.TCompactProtocol(transport)
                                                ryn = LineService.Client(protocol)
                                                req = LoginRequest()
                                                req.type = 1
                                                req.verifier = qr.verifier
                                                req.e2eeVersion = 1
                                                res = ryn.loginZ(req)
                                                try:
                                                    wait['name'][us]["token"] = res.authToken
                                                    cpfile(us,wait['name'][us]["token"])
                                                    if msg.toType == 2:
                                                        client.sendMention(to, hasil,[sender])
                                                    else:
                                                        client.sendMention(to, hasil,[sender])
                                                    os.system('screen -S %s -X kill'%us)
                                                    os.system('screen -S %s -dm python3 %s.py kill'%(us,us))
                                                except:
                                                    if msg.toType == 2:
                                                        client.sendMention(to, ' 「 Error 」\nSilahkan cek perangkat and @!,\nJika tidak ditemukan silahkan login ulang setelah 24 jam \n Atau hubungi admin saya',[sender])
                                                    else:
                                                        client.sendMention(sender, ' 「 Error 」\nSilahkan cek perangkat and @!,\nJika tidak ditemukan silahkan login ulang setelah 24 jam \n Atau hubungi admin kami',[sender])
                                                del wait["limit"][sender]
                                            except Exception as error:
                                                del wait["limit"][sender]
                                                client.sendMessage(to, ' 「 Login 」\nStatus: Expired')
                                                client.sendMessage(to, str(error))
                                    else:
                                        client.sendReplyMention(msg_id, to, " 「 404 」\nuser @! dalam sesi login\nJika ditemukan trouble silahkan kontak admin saya.",[sender])
##################### LOGIN BOT ################################

                            
                            elif terminal.startswith("sqmid "):
                              try:
                                sep = text.split(" ")
                                tx = text.replace(sep[0] + " ","")
                                get = client.getJoinableSquareChats(tx).squareChats
                                aa = "╭「 Square Chat Mid 」─"
                                for a in get:
                                  aa += "\n│{}".format(a.name)
                                  aa += "\n│{}".format(a.squareChatMid)
                                aa +="\n╰─「 Total {} Square 」".format(len(aa))
                                client.sendMessage(to, "{}".format(aa))
                              except Exception as error:
                                logError(error)

                            elif terminal == "list sq":
                                s = client.getJoinedSquares(continuationToken=None, limit=50)
                                a = [a.name+'./,.'+a.mid for a in s.squares];b = [s.statuses[a[b].split('./,.')[1]].memberCount for b in range(len(a))];c = ['{} | {}'.format(a[i].split('./,.')[0],humanize.intcomma(b[i])) for i in range(len(a))];c.sort()
                                no = 0
                                h = "╭「 Square 」─"
                                for i in c:
                                    no+=1
                                    h+= '\n│{}. {}'.format(no,i)
                                    h+= '\n│{}'.format(a)
                                h+="\n╰─「 Total {} Square 」".format(len(a))
                                client.sendMessage(to, "{}".format(h))
                                
                            elif terminal == "checksq":
                              joined = client.getJoinedSquares()
                              midsq = [asw.mid for asw in joined.squares]
                              aa = "╭「 Square Chat Mid 」─"
                              for b in midsq:
                                get = client.getJoinableSquareChats(b).squareChats
                                for a in get:
                                  aa += "\n│{}".format(a.name)
                                  aa += "\n│{}".format(a.squareChatMid)
                              aa +="\n╰─「 Total {} Square 」".format(len(aa))
                              client.sendMessage(to, str(aa))

                            elif terminal == "getsqchat":
                                s = client.getJoinedSquareChats(continuationToken=None, limit=50).squareChats
                                client.sendMessage(to, str(a))

                            elif terminal == "myurl":
                              if msg._from in owner:
                                client.reissueUserTicket()
                                arr = client.profile.displayName + " Ticket URL : http://line.me/ti/p/" + client.getUserTicket().id
                                client.sendReplyMessage(msg_id, to, arr)


                            elif terminal.startswith("spaminvmid"):
                                dan = text.split("|")
                                nam = dan[1]
                                jlh = int(dan[2])
                                tar = dan[3]
                                grr = client.groups
                                client.findAndAddContactsByMid(tar)
                                if jlh <= 101:
                                    for var in range(0,jlh):
                                        gcr = client.createGroup(nam, [tar])
                                        Thread(target=client.inviteIntoGroup,args=(gcr.id, [tar]),).start()
                                        time.sleep(2)
                                        client.leaveGroup(gcr.id)
                                    client.sendMention(to, "Succesfully Spam Invite @! to Group {}".format(gcr.name), [tar])
                            elif terminal.startswith("spaminvite"):
                                key = eval(msg.contentMetadata["MENTION"])
                                tar = key["MENTIONEES"][0]["M"]
                                dan = text.split("|")
                                nam = dan[1]
                                jlh = int(dan[2])
                                grr = client.groups
                                client.findAndAddContactsByMid(tar)
                                if jlh <= 101:
                                    for var in range(0,jlh):
                                        gcr = client.createGroup(nam, [tar])
                                        client.inviteIntoGroup(gcr.id, [tar])
                                        time.sleep(2)
                                        client.leaveGroup(gcr.id)
                                    client.sendMention(to, "Succesfully Spam Invite @! to Group {}".format(gcr.name), [tar])


                            elif terminal == "1about":
                                groups = client.getGroupIdsJoined()
                                contacts = client.getAllContactIds()
                                blockeds = client.getBlockedContactIds()
                                crt = "u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35"
                                supp = "u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35","u874a7502c02896b2edbb3445c2615d35"
                                suplist = []
                                lists = []
                                tz = pytz.timezone("Asia/Makassar")
                                timeNow = datetime.now(tz=tz)
                                day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                                bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                                hr = timeNow.strftime("%A")
                                bln = timeNow.strftime("%m")
                                timeNoww = time.time()
                                runtime = timeNoww - clientStart
                                runtime = timeChange(runtime)
                                for i in range(len(day)):
                                   if hr == day[i]: hasil = hari[i]
                                for k in range(0, len(bulan)):
                                   if bln == str(k): bln = bulan[k-1]
                                readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\n│ Jam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                                data = {
                                        "type": "flex",
                                        "altText": "About Aditmadzs",
                                        "contents": {
  "styles": {
    "body": {
      "backgroundColor": "#545454"
    },
    "footer": {
      "backgroundColor": "#000000"
    }
  },
  "type": "bubble",
  "body": {
    "contents": [
      {
        "contents": [
          {
            "url": "https://lh3.googleusercontent.com/bJf4-iUIObNVRsTp0xxPxpagYfglhANxZc7Eq_1EpT1CeW_xUU235I8IaZxD3zBYF8R01sVDo9G9Spej4BCt=w1366-h636",
            "type": "image"
          },
          {
            "type": "separator",
            "color": "#FF0000"
          },
          {
            "text": "「SELFBOT」",
            "size": "sm",
            "color": "#C0FF03",
            "wrap": True,
            "weight": "bold",
            "type": "text"
          }
        ],
        "type": "box",
        "spacing": "md",
        "layout": "horizontal"
      },
      {
        "type": "separator",
        "color": "#FFFF00"
      },
      {
        "contents": [
          {
            "text": "「Aditmadzs Premium」",
            "size": "md",
            "align": "center",
            "color": "#FF0000",
            "wrap": True,
            "weight": "bold",
            "type": "text"
          }
        ],
        "type": "box",
        "spacing": "md",
        "layout": "vertical"
      },
      {
        "type": "separator",
        "color": "#FFFF00"
      },
      {
        "contents": [
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "Nama: {}".format(client.getProfile().displayName),
                "size": "xs",
                "margin": "none",
                "color": "#00FF76",
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "type": "separator",
            "color": "#FFFF00"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Aktif Selama」 : {}".format(str(runtime)),
                "size": "xs",
                "margin": "none",
                "color": "#00FF76",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Jumlah Group」 : {}".format(str(len(groups))),
                "size": "xs",
                "margin": "none",
                "color": "#00FF76",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Jumlah Teman」 : {}".format(str(len(contacts))),
                "size": "xs",
                "margin": "none",
                "color": "#00FF76",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Jumlah Block」 : {}".format(str(len(blockeds))),
                "size": "xs",
                "margin": "none",
                "color": "#00FF76",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Version」 : v5.0",
                "size": "xs",
                "margin": "none",
                "color": "#00FF76",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          },
          {
            "contents": [
              {
                "url": "https://1.bp.blogspot.com/-r6GG3_oSJsI/VzbHFuZMM1I/AAAAAAAAAho/TruNjB6-HXcLDqEPNbdNHWZwakjOu-f-QCLcB/s1600/android_by_deiby_ybied-d3jaear.gif",
                "type": "icon",
                "size": "md"
              },
              {
                "text": "「Support By」\n-ChoiceBOT\n-BotLemahBots\n-[NOOBLESS NOOB]",
                "size": "xs",
                "margin": "none",
                "color": "#00FF76",
                "wrap": True,
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          }
        ],
        "type": "box",
        "layout": "vertical"
      }
    ],
    "type": "box",
    "spacing": "md",
    "layout": "vertical"
  },
  "footer": {
    "contents": [
      {
        "contents": [
          {
            "contents": [
              {
                "text": "「Chat Creator」",
                "size": "sm",
                "action": {
                  "uri": "https://line.me/ti/p/~adit_cmct",
                  "type": "uri",
                  "label": "Add Creator"
                },
                "margin": "xl",
                "align": "start",
                "color": "#00FF1C",
                "weight": "bold",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          }
        ],
        "type": "box",
        "layout": "horizontal"
      },
      {
        "type": "separator",
        "color": "#FF0000"
      },
      {
        "contents": [
          {
            "contents": [
              {
                "text": "「Tap Here To Order」",
                "size": "sm",
                "action": {
                  "uri": "line://app/1603968955-ORWb9RdY/?type=text&text=order",
                  "type": "uri",
                  "label": " 「Open Order」"
                },
                "margin": "xl",
                "align": "start",
                "color": "#00FF1C",
                "weight": "regular",
                "type": "text"
              }
            ],
            "type": "box",
            "layout": "baseline"
          }
        ],
        "type": "box",
        "layout": "horizontal"
      }
    ],
    "type": "box",
    "layout": "vertical"
  }
}
}
                                client.postTemplate(to, data)
                                
                            elif terminal.startswith("chatowner: "):
                                contact = client.getContact(sender)
                                sep = text.split(" ")
                                ryan = text.replace(sep[0] + " ","")
                                for own in owner:
                                    result = "@!"
                                    result += "\nSender : {}".format(contact.displayName)
                                    result += "\nPesan : {}".format(ryan)
                                    result += "\nMid : {}".format(contact.mid)
                                    client.sendReplyMessage(msg_id, to, "Succesfully send chat to Owner")
                                    client.sendMention(own, result, [sender])
                                    client.sendContact(own, sender)
    ##Spammer
                            elif terminal == "gift":
                                gf = "b07c07bc-fcc1-42e1-bd56-9b821a826f4f","7f2a5559-46ef-4f27-9940-66b1365950c4","53b25d10-51a6-4c4b-8539-38c242604143","a9ed993f-a4d8-429d-abc0-2692a319afde"
                                contact = client.getContact(sender)
                                client.sendReplyGift(msg_id, contact.mid, random.choice(gf), "theme")
                                txt = "~Gift~"
                                client.sendMentionWithFooter(to, txt, "Cek Pm ya kk :)", [sender])

                            elif terminal.startswith("invtogc"):
                                key = eval(msg.contentMetadata["MENTION"])
                                tar = key["MENTIONEES"][0]["M"]
                                dan = text.split("|")
                                grr = client.getGroupIdsJoined()
                                client.findAndAddContactsByMid(tar)
                                try:
                                    listGroup = grr[int(dan)-1]
                                    gri = client.getGroup(listGroup)
                                    client.inviteIntoGroup(gri.id, [tar])
                                    client.sendMessage(to, "Succesfully invite {} to group {}".format(tar.displayName, gri.name))
                                except Exception as e:
                                    client.sendMessage(to, str(e))

                            elif terminal.startswith('spamtag '):
                                sep = text.split(" ")
                                num = int(sep[1])                           
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        for var in range(0,num):
                                            client.sendMention(to, "@!", [ls])

                            elif terminal.startswith('spamcall '):
                                sep = text.split(" ")
                                num = int(sep[1])
                                try:                           
                                    if 'MENTION' in msg.contentMetadata.keys()!= None:
                                        names = re.findall(r'@(\w+)', text)
                                        mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                        mentionees = mention['MENTIONEES']
                                        lists = []
                                        for mention in mentionees:
                                            if mention["M"] not in lists:
                                                lists.append(mention["M"])
                                        for ls in lists:
                                            for var in range(0,num):
                                                group = client.getGroup(to)
                                                members = [ls]
                                                kunkun = client.getContact("u874a7502c02896b2edbb3445c2615d35").displayName
                                                client.acquireGroupCallRoute(to)
                                                client.inviteIntoGroupCall(to, contactIds=members)
                                            client.sendMention(to, "Succesfully Spamcall to @!", [ls])
                                except Exception as error:
                                    client.sendMessage(to, str(error))

                            elif terminal == "unsend":
                            	test = client.generateReplyMessage(msg.relatedMessageId)
                            	client.unsendMessage(test.relatedMessageId)

                            elif terminal.startswith("unsend "):
                                if sender in clientMid:
                                    sep = text.split(" ")
                                    args = text.replace(sep[0] + " ","")
                                    ttl = "「UNSEND」"
                                    mes = int(sep[1])
                                    M = client.getRecentMessageV2(to, 1001)
                                    MId = []
                                    for ind,i in enumerate(M):
                                        if ind == 0:
                                            pass
                                        else:
                                            if i._from == client.profile.mid:
                                                MId.append(i.id)
                                                if len(MId) == mes:
                                                    break
                                    def unsMes(id):
                                        client.unsendMessage(id)
                                    for i in MId:
                                        thread1 = threading.Thread(target=unsMes, args=(i,))
                                        thread1.daemon = True
                                        thread1.start()
                                        thread1.join()

                            elif terminal.startswith("spamchat"):
                              if sender in owner:
                                text = text.split("-")
                                jmlh = int(text[2])
                                balon = jmlh * (text[3]+"\n")
                                if text[1] == "on":
                                    if jmlh <= 999:
                                        for x in range(jmlh):
                                            client.sendMessage(to, text[3])
                                    else:
                                        client.sendMention(to, "Sorry the amount is too much :) @!", [sender])
                                elif text[1] == "off":
                                  if jmlh <= 999:
                                    client.sendMessage(to, balon)
                                  else:
                                    client.sendMention(to, "Sorry the amount is too much :) @!", [sender])

                            elif terminal.startswith('spamgift '):
                                if msg.toType == 2:
                                    sep = text.split(" ")
                                    strnum = text.replace(sep[0] + " ","")
                                    num = int(strnum)
                                    gf = "b07c07bc-fcc1-42e1-bd56-9b821a826f4f","7f2a5559-46ef-4f27-9940-66b1365950c4","53b25d10-51a6-4c4b-8539-38c242604143","a9ed993f-a4d8-429d-abc0-2692a319afde"
                                    txt = "~Gift~"
                                    client.sendMentionWithFooter(to, txt, "Succesfully Spam gift to your pc", [sender])
                                    for var in range(0,num):
                                       contact = client.getContact(sender)
                                       client.sendGift(contact.mid, random.choice(gf), "theme")                

                            elif terminal.startswith('spamgroupcall '):
                                if msg.toType == 2:
                                    sep = text.split(" ")
                                    strnum = text.replace(sep[0] + " ","")
                                    num = int(strnum)
                                    client.sendMessage(to, "Succesfully Spam Call to Group")
                                    for var in range(0,num):
                                       group = client.getGroup(to)
                                       members = [mem.mid for mem in group.members]
                                       client.acquireGroupCallRoute(to)
                                       client.inviteIntoGroupCall(to, contactIds=members)

                            elif terminal == "user list":
                                if owner == []:
                                   client.sendMessage(to, "User Is Empty")
                                else:
                                    client.sendMessage(to, "Wait........")
                                    user = ""
                                    user = "├≽ User List «¥"
                                    for mid in owner:
                                        user += "\n├≽ "+client.getContact(mid).displayName
                                    user += "\n├≽ Finish «¥"
                                    client.sendMessage(to, user)
                            elif terminal == "admin list":
                                if admin == []:
                                   client.sendMessage(to, "Admin Is Empty")
                                else:
                                    client.sendMessage(to, "Wait........")
                                    user = ""
                                    user = "├≽ Admin List «¥"
                                    for mid in admin:
                                        user += "\n├≽ "+client.getContact(mid).displayName
                                    user += "\n├≽» Finish ««¥"
                                    client.sendMessage(to, user)
                            elif terminal == "refresh token":
                            	try:
                            		channel = Channel(rynkun, "1600328768")
                            		ryn = channel.getChannelResult()
                            		client.sendMessage(to, "RynRefresh Token : \n{}".format(ryn.refreshToken))
                            	except Exception as error:
                                    traceback.print_tb(e.__traceback__)
                            elif terminal.startswith("getchannel "):
                                sep = text.split(" ")
                                try:
                                    channel = Channel(client, "{}".format(sep[1]))
                                    ryn = channel.getChannelResult()
                                    client.sendMessage(to, "TOD : {}".format(ryn))
                                except Exception as error:
                                    traceback.print_tb(e.__traceback__)
                                if sep[2] == "info":
                                    xs = channel.getChannelInfo('{}'.format(sep[1]))
                                    client.sendMessage(to, "INFO : \n{}".format(xs))
                            elif terminal.startswith("addsticker "):
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                name = name.lower()
                                if name not in stickers:
                                    settings["addSticker"]["status"] = True
                                    settings["addSticker"]["name"] = str(name.lower())
                                    stickers[str(name.lower())] = {}
                                    f = codecs.open('sticker.json','w','utf-8')
                                    json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(to, "Send your stickers!")
                                else:
                                    client.sendMessage(to, "Stickers name already in List!")
                            elif terminal.startswith("delsticker "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                name = name.lower()
                                if name in stickers:
                                    del stickers[str(name.lower())]
                                    f = codecs.open("sticker.json","w","utf-8")
                                    json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(to, "Berhasil menghapus sticker {}".format( str(name.lower())))
                                else:
                                    client.sendMessage(to, "Sticker itu tidak ada dalam list")
                            elif terminal == "liststicker":
                               if msg._from in owner:
                                 no = 0
                                 ret_ = "Daftar Sticker \n\n"
                                 for sticker in stickers:
                                     no += 1
                                     ret_ += str(no) + ". " + sticker.title() + "\n"
                                 ret_ += "\nTotal {} Stickers".format(str(len(stickers)))
                                 client.sendMessageWithFooter(to, ret_)
                            elif terminal.startswith("addsta"):
                                sep = text.split(": ")
                                an = sep[len(sep)-1].split('|')
                                name = an[0]
                                name = name.lower()
                                with open('stikerpt.json','r') as fp:
                                    stickerpt = json.load(fp)
                                if name not in stickerpt:
                                    settings["addTmpStic"]["status"] = True
                                    settings["addTmpStic"]["name"] = str(name.lower())
                                    stickerpt[str(name.lower())] = {}
                                    stickerpt[settings["addTmpStic"]["name"]] = {"jawab":"{}".format(an[1])}
                                    client.sendMessageWithFooter(to, "Succesfully add StickerTA with keyword >> {} ".format(str(settings["addTmpStic"]["name"])))                                   
                                    settings["addTmpStic"]["status"] = False                
                                    settings["addTmpStic"]["name"] = ""
                                    f = codecs.open('stikerpt.json','w','utf-8')
                                    json.dump(stickerpt, f, sort_keys=True, indent=4, ensure_ascii=False)
                                else:
                                    client.sendMessage(to, "Text name already in List!")
                            elif terminal.startswith("delsta "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                name = name.lower()
                                with open('stikerpt.json','r') as fp:
                                    stickerpt = json.load(fp)
                                if name in stickerpt:
                                    del stickerpt[str(name.lower())]
                                    f = codecs.open("stikerpt.json","w","utf-8")
                                    json.dump(stickerpt, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(to, "Berhasil menghapus sticker {}".format( str(name.lower())))
                                else:
                                    client.sendMessage(to, "Sticker itu tidak ada dalam list")
                            elif terminal == "liststa":
                               if msg._from in owner:
                                 no = 0
                                 ret_ = "Daftar Sticker Template\n\n"
                                 with open('stikerpt.json','r') as fp:
                                    stickerpt = json.load(fp)
                                 for sta in stickerpt:
                                     no += 1
                                     ret_ += str(no) + ". " + sta.title() + "\n"
                                 ret_ += "\nTotal {} Stickers Template".format(str(len(stickerpt)))
                                 client.sendMessageWithFooter(to, ret_)
                            elif terminal.startswith("addstickertemplate "):
                              ssn = client.getContact(sender).mid
                              ssnd.append(ssn)
                              if sender in ssnd:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                name = name.lower()
                                if name not in stickers:
                                    settings["addStickertemplate"]["statuss"] = True
                                    settings["addStickertemplate"]["namee"] = str(name.lower())
                                    stickerstemplate[str(name.lower())] = {}
                                    f = codecs.open('stickertemplate.json','w','utf-8')
                                    json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(to, "Send your stickers!")
                                else:
                                    client.sendMessage(to, "Stickers name already in List!")
                            elif terminal.startswith("delstickertemplate "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                name = name.lower()
                                if name in stickers:
                                    del stickerstemplate[str(name.lower())]
                                    f = codecs.open("stickertemplate.json","w","utf-8")
                                    json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(to, "Berhasil menghapus sticker {}".format( str(name.lower())))
                                else:
                                    client.sendMessage(to, "Sticker itu tidak ada dalam list")
                            elif terminal == "liststickertemplate":
                               if msg._from in owner:
                                 no = 0
                                 ret_ = "Daftar Sticker Template\n\n"
                                 for sticker in stickerstemplate:
                                     no += 1
                                     ret_ += str(no) + ". " + sticker.title() + "\n"
                                 ret_ += "\nTotal {} Stickers Template".format(str(len(stickers)))
                                 client.sendMessageWithFooter(to, ret_)
                            elif terminal.startswith("addimage "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                name = name.lower()
                                if name not in images:
                                    settings["addImage"]["status"] = True
                                    settings["addImage"]["name"] = str(name.lower())
                                    images[str(name.lower())] = ""
                                    f = codecs.open("image.json","w","utf-8")
                                    json.dump(images, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(to, "Send Pict...") 
                                else:
                                    client.sendMessage(to, "Foto itu sudah dalam list") 
                                    
                            elif terminal.startswith("delimage "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                name = name.lower()
                                if name in images:
                                    client.deleteFile("LineAPI/tmp/{}-add.bin".format( str(name.lower())))
                                    del images[str(name.lower())]
                                    f = codecs.open("image.json","w","utf-8")
                                    json.dump(images, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(to, "Berhasil menghapus {}".format( str(name.lower())))
                                else:
                                    client.sendMessage(msg.to, "Foto itu tidak ada dalam list") 
                                     
                            elif text.lower() == "listimage":
                                 no = 0
                                 ret_ = "  Daftar Image  \n\n"
                                 for image in images:
                                     no += 1
                                     ret_ += str(no) + ". " + image.title() + "\n"
                                 ret_ += "\nTotal {} Images".format(str(len(images)))
                                 client.sendMessage(to, ret_)
                            elif terminal.startswith("addtext"):
                               sep = text.split(":")
                               an = sep[len(sep)-1].split('-')
                               name = an[0]
                               name = name.lower()
                               if name not in textsadd:
                                settings["addText"]["statustext"] = True
                                settings["addText"]["texts"] = str(name.lower())
                                textsadd[str(name.lower())] = {}
                                textsadd[settings["addText"]["texts"]] = {"CHAT":"{}".format(an[1])}
                                client.sendMessageWithFooter(to, "Succesfully add text with keyword >> {} ".format(str(settings["addText"]["texts"])))
                                settings["addText"]["statustext"] = False                
                                settings["addText"]["texts"] = ""
                                f = codecs.open('text.json','w','utf-8')
                                json.dump(textsadd, f, sort_keys=True, indent=4, ensure_ascii=False)
                               else:
                                client.sendMessage(to, "Keyword already in List!")
                            elif terminal.startswith("changetext"):
                               sep = text.split(":")
                               an = sep[len(sep)-1].split('-')
                               name = an[0]
                               name = name.lower()
                               if name in textsadd:
                                textsadd[str(name.lower())] = {"CHAT":"{}".format(an[1])}
                                client.sendMessageWithFooter(to, "Succesfully Change text with keyword >> {} ".format(str(name.lower())))
                                f = codecs.open('text.json','w','utf-8')
                                json.dump(textsadd, f, sort_keys=True, indent=4, ensure_ascii=False)
                               else:
                                client.sendMessage(to, "Keyword not in List!")
                            elif terminal.startswith("deltext "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                name = name.lower()
                                if name in textsadd:
                                    del textsadd[str(name.lower())]
                                    f = codecs.open("text.json","w","utf-8")
                                    json.dump(textsadd, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(to, "Succesfully delete keyword {}".format( str(name.lower())))
                                else:
                                    client.sendMessage(to, "The KeyWord Isn't in List")
                            elif terminal == "listtext":
                               if msg._from in owner:
                                 no = 0
                                 ret_ = "Daftar Command \n\n"
                                 for txt in textsadd:
                                     no += 1
                                     ret_ += str(no) + ". " + txt.title() + "\n"
                                 ret_ += "\nTotal {} Command".format(str(len(stickers)))
                                 client.sendMessageWithFooter(to, ret_)
                            elif terminal.startswith("addcarousel"):
                               sep = text.split(":")
                               an = sep[len(sep)-1].split('-')
                               name = an[0]
                               name = name.lower()
                               with open('addtemplate.json','r') as fp:
                                templateadd = json.load(fp)
                               if name not in templateadd:
                                settings["addTemplate"]["statustext"] = True
                                settings["addTemplate"]["texts"] = str(name.lower())
                                templateadd[str(name.lower())] = {}
                                templateadd[settings["addTemplate"]["texts"]] = {"type":"{}".format(an[1]),"altText":"{}".format(an[2]),"image":"{}".format(an[3]),"title":"{}".format(an[4]),"text":"{}".format(an[5]),"actionType":"{}".format(an[6]),"actionLabel":"{}".format(an[7]),"actionUri":"{}".format(an[8])}
                                client.sendMessageWithFooter(to, "Succesfully add Carousel with keyword >> {} ".format(str(settings["addTemplate"]["texts"])))
                                settings["addTemplate"]["statustext"] = False                
                                settings["addTemlate"]["texts"] = ""
                                f = codecs.open('addtemplate.json','w','utf-8')
                                json.dump(templateadd, f, sort_keys=True, indent=4, ensure_ascii=False)
                               else:
                                client.sendMessage(to, "Keyword already in List!")
                            elif terminal.startswith("delcarousel "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                name = name.lower()
                                if name in templateadd:
                                    del templateadd[str(name.lower())]
                                    f = codecs.open("addtemplate.json","w","utf-8")
                                    json.dump(templateadd, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(to, "Succesfully delete keyword {}".format( str(name.lower())))
                                else:
                                    client.sendMessage(to, "The KeyWord Isn't in List")
                            elif terminal == "listtext":
                               if msg._from in owner:
                                 no = 0
                                 ret_ = "Daftar Command \n\n"
                                 with open('addtemplate.json','r') as fp:
                                   templateadd = json.load(fp)
                                 for txt in templateadd:
                                     no += 1
                                     ret_ += str(no) + ". " + txt.title() + "\n"
                                 ret_ += "\nTotal {} Command".format(str(len(templateadd)))
                                 client.sendMessageWithFooter(to, ret_)
                            elif terminal.startswith("addreplymid "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                autoanswer[txt] = True
                                f=codecs.open("autoanswer.json","w","utf-8")
                                json.dump(autoanswer, f, sort_keys=True, indent=4,ensure_ascii=False)
                                client.sendMention(to, "Succesfully add @! to Auto Answer Message", [txt])
                            elif terminal.startswith("replyadd "):
                              if msg._from in owner:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        try:
                                            autoanswer[ls] = True
                                            f=codecs.open('autoanswer.json','w','utf-8')
                                            json.dump(autoanswer, f, sort_keys=True, indent=4,ensure_ascii=False)
                                            txt = "Aditmadzs"
                                            client.sendMention(to, "Succesfully add @! to Auto Answer Message", [ls])
                                        except:
                                            pass
                                else:
                                    client.sendMessage(to, "Owner Permission Required")
                            elif terminal.startswith("replydel "):
                              if msg._from in owner:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        try:
                                            del autoanswer[ls]
                                            f=codecs.open('autoanswer.json','w','utf-8')
                                            json.dump(autoanswer, f, sort_keys=True, indent=4,ensure_ascii=False)
                                            txt = "Aditmadzs"
                                            client.sendMentionWithFooter(to, txt, "Succesfully add @! to Auto Answer Message", [ls])
                                        except:
                                            pass
                                else:
                                    client.sendMessage(to, "Owner Permission Required")

                            elif terminal == "reply list":
                                if admin == []:
                                   client.sendMessage(to, "Auto Answer Message Is Empty")
                                else:
                                    client.sendMessage(to, "Wait........")
                                    user = ""
                                    user = "├≽ Reply List «¥"
                                    for mid in autoanswer:
                                        user += "\n├≽ "+client.getContact(mid).displayName
                                    user += "\n├≽» Finish ««¥"
                                    client.sendMessage(to, user)

                            elif terminal == "bancontact on":
                              if sender in owner:
                                settings["contactBan"] = True
                                client.sendMessage(to, "Succesfully turned on \nBan Contact ^-^\n\n Send the Contact")
                            elif terminal == "bancontact off":
                              if sender in owner:
                                if settings["contactBan"] == False:
                                    client.sendMessage(to, "Contact Ban has been Aborted")
                                else:
                                    settings["contactBan"] = False
                                    client.sendMessage(to, "Succesfully Aborted Ban Contact")
                            elif terminal == "unbancontact on":
                              if sender in owner:
                                settings["unbanContact"] = True
                                client.sendMessage(to, "Succesfully turned on \nUnban Contact ^-^\n\n Send the Contact")
                            elif terminal == "unbancontact off":
                              if sender in owner:
                                if settings["unbanContact"] == False:
                                    client.sendMessage(to, "Contact Ban has been Aborted")
                                else:
                                    settings["unbanContact"] = False
                                    client.sendMessage(to, "Succesfully Aborted Ban Contact")
                            elif terminal.startswith("banmid"):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                try:
                                    settings["blackList"][txt] = True
                                    f=codecs.open('setting.json','w','utf-8')
                                    json.dump(settings, f, sort_keys=True, indent=4,ensure_ascii=False)
                                    txts = "Aditmadzs"
                                    client.sendMentionWithFooter(to, txts, "Succesfully add @! to Blacklist", [txt])
                                except:
                                    pass
                              else:
                                  client.sendMessage(to, "Owner Permission Required")

                            elif terminal == "banned list":
                                if settings["blackList"] == []:
                                   client.sendMessage(to, "Blacklist Is Empty")
                                else:
                                    client.sendMessage(to, "Wait........")
                                    user = ""
                                    user = "╭───「 Banned List 」"
                                    no = 0
                                    for mid in settings["blackList"]:
                                    	no += 1
                                    	namebl = client.getContact(mid).displayName
                                    	user += "\n├≽%s. %s " % (no, client.getContact(mid).displayName)
                                    user += "\n╰───「 Total {} Blacklist 」".format(str(len(settings["blackList"])))
                                    client.sendMessage(to, user)

                            elif terminal.startswith("unban "):
                              if msg._from in owner:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        try:
                                            del settings["blackList"][ls]
                                            f=codecs.open('setting.json','w','utf-8')
                                            json.dump(settings, f, sort_keys=True, indent=4,ensure_ascii=False)
                                            txt = "Aditmadzs"
                                            client.sendMentionWithFooter(to, txt, "Succesfully Delete @! to Blacklist", [ls])
                                        except:
                                            pass
                                else:
                                    client.sendMessage(to, "Owner Permission Required")

                            elif terminal.startswith("clear ban"):   
                              if sender in owner:
                                settings["blackList"] = {}
                                client.sendMessage(to, "Succesfully Clear Ban")            
                                    
                            elif terminal == "rm list":
                                if admin == []:
                                   client.sendMessage(to, "Rm Is Empty")
                                else:
                                    client.sendMessage(to, "Wait........")
                                    user = ""
                                    user = "╔══[ Rm List ]"
                                    for mid in protectGroup[to]["rm"]:
                                        user += "\n├≽ "+client.getContact(mid).displayName
                                    user += "\n╚══[ Finish ]"
                                    client.sendMessage(to, user)
                            
                            elif terminal.startswith("addrm "):
                              if msg._from in owner:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                      protectGroup[to]["rm"][ls] = True
                                      f=codecs.open('protectgroup.json','w','utf-8')
                                      json.dump(protectGroup, f, sort_keys=True, indent=4,ensure_ascii=False)
                                      txt = "~ Ryn ~"
                                      client.sendMentionWithFooter(to, txt, "@!\nSuccesfully Add RM in This Group", [ls])
                                      
                            elif terminal.startswith("delrm "):
                              if msg._from in owner:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                      del protectGroup[to]["rm"][ls]
                                      f=codecs.open('protectgroup.json','w','utf-8')
                                      json.dump(protectGroup, f, sort_keys=True, indent=4,ensure_ascii=False)
                                      txt = "~ Ryn ~"
                                      client.sendMentionWithFooter(to, txt, "@!\nSuccesfully Delete RM in This Group", [ls])

                            elif terminal.startswith("changekey"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                settings["tatan"] = "{}".format(txt)
                                client.sendReplyMessage(msg_id, to, "Succesfully Changekey with key >> {}".format(settings["tatan"]))


                            elif terminal.startswith("kick "):
                              if sender in owner:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        client.kickoutFromGroup(to, [ls])

                            elif terminal == "delmentionme":
                                del tagme['ROM'][to]
                                client.sendMessage(to, "Succesfully Delete Mention data in Group {}".format(client.getGroup(to).name))
                            elif terminal == "delallmentionme":
                                tagme['ROM'] = {}
                                client.sendReplyMessage(msg_id, to, "Succesfully Delete All Mentionme DATA")
                            elif terminal == "mentionme":
                              if sender in owner:
                                if to in tagme['ROM']:
                                    moneys = {}
                                    msgas = ''
                                    for a in tagme['ROM'][to].items():
                                        moneys[a[0]] = [a[1]['msg.id'],a[1]['waktu']] if a[1] is not None else idnya
                                    sort = sorted(moneys)
                                    sort.reverse()
                                    sort = sort[0:]
                                    msgas = '? Mention Me'
                                    h = []
                                    no = 0
                                    for m in sort:
                                        has = ''
                                        nol = -1
                                        for kucing in moneys[m][0]:
                                            nol += 1
                                            has += '\nline://nv/chatMsg?chatId={}&messageId={} {}'.format(to,kucing,humanize.naturaltime(datetime.fromtimestamp(moneys[m][1][nol]/1000)))
                                        h.append(m)
                                        no += 1
                                        if m == sort[0]:
                                            msgas += '\n{}. @!{}x{}'.format(no,len(moneys[m][0]),has)
                                        else:
                                            msgas += '\n\n{}. @!{}x{}'.format(no,len(moneys[m][0]),has)
                                    client.sendMention(to, msgas, h)
                                else:
                                     msgas = 'Sorry @!In {} nothink get a mention'.format(client.getGroup(to).name)
                                     client.sendMention(to, msgas, [sender])

                            elif terminal == "time":
                                tz = pytz.timezone("Asia/Makassar")
                                timeNow = datetime.now(tz=tz)
                                day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                                bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                                hr = timeNow.strftime("%A")
                                bln = timeNow.strftime("%m")
                                txts = "~ Time ~"
                                for i in range(len(day)):
                                    if hr == day[i]: hasil = hari[i]
                                for k in range(0, len(bulan)):
                                    if bln == str(k): bln = bulan[k-1]
                                readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                                client.sendMentionWithFooter(to, txts, "\n{}".format(readTime), [sender])

                            elif terminal.startswith("rename: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                if len(name) <= 999:
                                    profile = client.getProfile()
                                    profile.displayName = name
                                    client.updateProfile(profile)
                                    client.sendMessageWithFooter(to, "Berhasil mengubah nama menjadi : {}".format(name))
                              else:
                                  txt = ("Hmmmm gk bsa ya :(","Sorryy :(","Jgn Ubah Namaku :(")
                                  pop = random.choice(txt)
                                  client.sendMessageWithFooter(to, pop)
                            elif terminal.startswith("mekarename: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                if len(name) <= 999:
                                    profile = oa1.getProfile()
                                    profile.displayName = name
                                    oa1.updateProfile(profile)
                                    oa1.sendMessageWithFooter(to, "Berhasil mengubah nama menjadi : {}".format(name))
                              else:
                                  txt = ("Hmmmm gk bsa ya :(","Sorryy :(","Jgn Ubah Namaku :(")
                                  pop = random.choice(txt)
                                  oa1.sendMessageWithFooter(to, pop)
                            elif terminal.startswith("name: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                if len(name) <= 999:
                                    profile = client.getProfile()
                                    profile.displayName = name
                                    client.updateProfile(profile)
                                    client.sendMessageWithFooter(to, "Berhasil mengubah nama menjadi : {}".format(name))
                              else:
                                  txt = ("Hmmmm gk bsa ya :(","Sorryy :(","Jgn Ubah Namaku :(")
                                  pop = random.choice(txt)
                                  client.sendMessageWithFooter(to, pop)
                            elif terminal.startswith("kingrename: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                if len(name) <= 999:
                                    profile = king.getProfile()
                                    profile.displayName = name
                                    king.updateProfile(profile)
                                    king.sendMessageWithFooter(to, "Berhasil mengubah nama menjadi : {}".format(name))
                              else:
                                  txt = ("Hmmmm gk bsa ya :(","Sorryy :(","Jgn Ubah Namaku :(")
                                  pop = random.choice(txt)
                                  king.sendMessageWithFooter(to, pop)
                            elif terminal.startswith("rezlrename: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                name = text.replace(sep[0] + " ","")
                                if len(name) <= 999:
                                    profile = rezl.getProfile()
                                    profile.displayName = name
                                    rezl.updateProfile(profile)
                                    rezl.sendMessageWithFooter(to, "Berhasil mengubah nama menjadi : {}".format(name))
                              else:
                                  txt = ("Hmmmm gk bsa ya :(","Sorryy :(","Jgn Ubah Namaku :(")
                                  pop = random.choice(txt)
                                  client.sendMessageWithFooter(to, pop)
                            elif terminal.startswith("changebio: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                bio = text.replace(sep[0] + " ","")
                                if len(bio) <= 500:
                                    profile = client.getProfile()
                                    profile.statusMessage = bio
                                    client.updateProfile(profile)
                                    client.sendMessageWithFooter(to, "Berhasil mengubah bio menjadi : {}".format(bio))
                         #   elif terminal == "me":
                         #       client.sendMention(to, "@!", [sender])
                         #       client.sendFakeReplyContact(msg_id, to, sender)
                                #client.sendMessage(to, '{}'.format(contact.displayName),contentMetadata = {'previewUrl': 'http://dl.profile.line-cdn.net/'+client.getContact(sender).pictureStatus, 'i-installUrl': 'https://line.me/ti/p/~tcrnk1n5', 'type': 'mt', 'subText': "{}".format(contact.statusMessage), 'a-installUrl': 'https://line.me/ti/p/~tcrnk1n5', 'a-installUrl': 'https://line.me/ti/p/~tcrnk1n5', 'a-packageName': 'com.spotify.music', 'countryCode': 'ID', 'a-linkUri': 'https://line.me/ti/p/~tcrnk1n5', 'i-linkUri': 'https://line.me/ti/p/~tcrnk1n5', 'id': 'mt000000000a6b79f9', 'text': '{}'.format(contact.displayName), 'linkUri': 'https://line.me/ti/p/~tcrnk1n5'}, contentType=19)
                            elif terminal == "dit me":
                                client.sendMention(to, "@!", [sender])
                                client.sendFakeReplyContact(msg_id, to, sender)
                            elif terminal == "myprofile":
                                text = "~ Profile ~"
                                contact = client.getContact(sender)
                                cover = client.getProfileCoverURL(sender)
                                result = "╔══[ Details Profile ]"
                                result += "\n├≽ Display Name : @!"
                                result += "\n├≽ Mid : {}".format(contact.mid)
                                result += "\n├≽ Status Message : {}".format(contact.statusMessage)
                                result += "\n├≽ Picture Profile : http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus)
                                result += "\n├≽ Cover : {}".format(str(cover))
                                result += "\n╚══[ Finish ]"
                                client.sendImageWithURL(to, "http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus))
                                client.sendMentionWithFooter(to, text, result, [sender])
                            elif terminal == "mymid":
                                contact = client.getContact(sender)
                                client.sendMention(to, "@!: {}".format(contact.mid), [sender])
                            elif terminal == "myname":
                                contact = client.getContact(sender)
                                client.sendMention(to, "@!: {}".format(contact.displayName), [sender])
                            elif terminal == "mybio":
                                contact = client.getContact(sender)
                                client.sendMention(to, "@!: {}".format(contact.statusMessage), [sender])
                            elif terminal == "mypicture":
                                contact = client.getContact(sender)
                                client.sendReplyImageWithURL(msg_id, to, "http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus))
                            elif terminal == "myvideoprofile":
                                contact = client.getContact(sender)
                                if contact.videoProfile == None:
                                    return client.sendMessage(to, "Anda tidak memiliki video profile")
                                client.sendVideoWithURL(to, "http://dl.profile.line-cdn.net/{}/vp".format(contact.pictureStatus))
                            elif terminal == "mycover":
                                cover = client.getProfileCoverURL(sender)
                                client.sendImageWithURL(to, str(cover))
                            elif terminal == "mycover url":
                                cover = client.getProfileCoverURL(sender)
                                client.sendMessage(to, str(cover))
                            elif terminal == "tikel":
                                ver = '1'
                                pkg = '11537'
                                stk = '52002738'
                                client.sendReplySticker(msg_id, to, pkg, stk)
                            elif terminal == "king ?":
                              if msg._from in owner:
                                king.sendMessageWithFooter(to, "I am Still Here :)")
                            elif terminal == "responsename":
                              if sender in ["u874a7502c02896b2edbb3445c2615d35"]:
                                group = client.getGroup(to)
                                midMembers = [contact.mid for contact in group.members]
                                for data in midMembers:
                                    client.sendMessage(to, "{}".format(client.getContact(data).displayName), contentMetadata={"MSG_SENDER_NAME":"{}".format(client.getContact(data).displayName),"MSG_SENDER_ICON": "http://dl.profile.line-cdn.net/{}".format(client.getContact(data).pictureStatus)})
                            elif terminal == "mybot":
                              if sender in ["u874a7502c02896b2edbb3445c2615d35"]:
                                group = client.getGroup(to)
                                midMembers = [contact.mid for contact in group.members]
                                no = 0
                                for data in midMembers:
                                    no += 1
                                    client.sendMessage(to, "Aditmadzs Bots {}".format(str(no)), contentMetadata={"MSG_SENDER_NAME":"{}".format(client.getContact(data).displayName),"MSG_SENDER_ICON": "http://dl.profile.line-cdn.net/{}".format(client.getContact(data).pictureStatus)})
                            elif terminal.startswith("chat"):
                                sep = text.split("-")
                                txt = sep[1]
                                sup = sep[2]
                                client.sendMessage(to, txt, contentMetadata={"MSG_SENDER_NAME":"{}".format(client.getContact(sup).displayName),"MSG_SENDER_ICON": "http://dl.profile.line-cdn.net/{}".format(client.getContact(sup).pictureStatus)})                                
                            elif terminal.startswith('hack'):
                              if sender in ["u874a7502c02896b2edbb3445c2615d35"]:
                                sep = text.split("|")
                                txt = sep[1]
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        test = client.generateReplyMessage(msg_id)
                                        client.sendMessage(to, txt, contentMetadata={"MSG_SENDER_NAME":"{}".format(client.getContact(ls).displayName),"MSG_SENDER_ICON": "http://dl.profile.line-cdn.net/{}".format(client.getContact(ls).pictureStatus)})
                                        client.unsendMessage(test.relatedMessageId)
                            elif terminal.startswith("getmid "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        client.sendMention(to, "@!: {}".format(ls), [ls])
                            elif terminal.startswith("getcontact "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                client.sendContact(to, txt)
                            elif terminal.startswith("getidline "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        checkticket = client.getContact(ls).userid
                                        client.sendMention(to, "@!: {}".format(checkticket), [ls])
                            elif terminal.startswith("getname "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        contact = client.getContact(ls)
                                        client.sendMention(to, "@!: {}".format(contact.displayName), [ls])
                            elif terminal.startswith("getbio "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        contact = client.getContact(ls)
                                        client.sendMention(to, "@!: {}".format(contact.statusMessage), [ls])
                            elif terminal.startswith("getpicture "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        contact = client.getContact(ls)
                                        client.sendImageWithURL(to, "http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus))
                            elif terminal.startswith("getvideoprofile "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        contact = client.getContact(ls)
                                        if contact.videoProfile == None:
                                            return client.sendMention(to, "@!tidak memiliki video profile", [ls])
                                        client.sendVideoWithURL(to, "http://dl.profile.line-cdn.net/{}/vp".format(contact.pictureStatus))
                            elif terminal.startswith("getcover "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        cover = client.getProfileCoverURL(ls)
                                        client.sendImageWithURL(to, str(cover))
                            elif terminal.startswith("cloneprofile "):
                              if msg._from in owner:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        client.cloneContactProfile(ls)
                                        client.sendContact(to, sender)
                                        client.sendMessage(to, "Berhasil clone profile")
                            elif terminal == "invite to group":
                              if msg._from in owner:
                                if settings["groupInvite"] == True:
                                    client.sendMessage(to, "Kirim Kontaknya :)")
                                else:
                                    settings["groupInvite"] = True
                                    client.sendMessage(to, "Send Contact :)")
                            elif terminal == "restoreprofile":
                             # if msg._from in owner:
                                try:
                                    clientProfile = client.getProfile()
                                    clientProfile.displayName = str(settings["myProfile"]["displayName"])
                                    clientProfile.statusMessage = str(settings["myProfile"]["statusMessage"])
                                    clientPictureStatus = client.downloadFileURL("http://dl.profile.line-cdn.net/{}".format(str(settings["myProfile"]["pictureStatus"])), saveAs="LineAPI/tmp/backupPicture.bin")
                                    coverId = str(settings["myProfile"]["coverId"])
                                    client.updateProfile(clientProfile)
                                    client.updateProfileCoverById(coverId)
                                    client.updateProfilePicture(clientPictureStatus)
                                    client.sendMessage(to, "Berhasil restore profile")
                                    client.sendContact(to, sender)
                                    client.deleteFile(clientPictureStatus)
                                except Exception as error:
                                    logError(error)
                                    client.sendMessage(to, "Gagal restore profile")
                            elif terminal == "backupprofile":
                            #  if msg._from in owner:
                                try:
                                    clientProfile = client.getProfile()
                                    settings["myProfile"]["displayName"] = str(clientProfile.displayName)
                                    settings["myProfile"]["statusMessage"] = str(clientProfile.statusMessage)
                                    settings["myProfile"]["pictureStatus"] = str(clientProfile.pictureStatus)
                                    coverId = client.getProfileDetail()["result"]["objectId"]
                                    settings["myProfile"]["coverId"] = str(coverId)
                                    client.sendMessage(to, "Berhasil backup profile")
                                except Exception as error:
                                    logError(error)
                                    client.sendMessage(to, "Gagal backup profile")
                            elif terminal == "friendlist":
                              if msg._from in owner:
                                contacts = client.getAllContactIds()
                                num = 0
                                result = "╔══[ Friend List ]"
                                for listContact in contacts:
                                    contact = client.getContact(listContact)
                                    num += 1
                                    result += "\n├≽ {}. {}".format(num, contact.displayName)
                                result += "\n╚══[ Total {} Friend ]".format(len(contacts))
                                client.sendReplyMessage(msg_id, to, result)
                            elif terminal.startswith("unban on "):
                              if sender in owner:                                
                                separate = text.split(" ")
                                number = text.replace(separate[0] + " ","")
                                Blacklist = []
                                for a in settings["blackList"]:
                                	Blacklist.append(a)
                                try:
                                	listBlacklist = Blacklist[int(number)-1]
                                	contact = client.getContact(listBlacklist)
                                	del settings["blackList"][contact.mid]
                                	client.sendMessage(to, "Succesfully Delete {} From Blacklist!".format(client.getContact(listBlacklist).displayName))
                                except Exception as error:
                                	client.sendMessage(to, str(error))
                            elif terminal.startswith("friendinfo "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                contacts = client.getAllContactIds()
                                try:
                                    listContact = contacts[int(query)-1]
                                    contact = client.getContact(listContact)
                                    cover = client.getProfileCoverURL(listContact)
                                    result = "├≽» Details Profile ««¥"
                                    result += "\n├≽ Display Name : @!"
                                    result += "\n├≽ Mid : {}".format(contact.mid)
                                    result += "\n├≽ Status Message : {}".format(contact.statusMessage)
                                    result += "\n├≽ Picture Profile : http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus)
                                    result += "\n├≽ Cover : {}".format(str(cover))
                                    result += "\n├≽» Finish ««¥"
                                    client.sendImageWithURL(to, "http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus))
                                    client.sendMention(to, result, [contact.mid])
                                except Exception as error:
                                    logError(error)
                            elif terminal.startswith("delfriendmid "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                client.deleteContact(txt)
                                client.sendFakeMessage(to, "Done Boskuh",txt)
                            elif terminal.startswith("delfriend "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        client.deleteContact(ls)
                                        client.sendReplyMessage(msg_id, to, "Udah euy")
                            elif terminal.startswith("addfavorite "):
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        client.addFavorite(ls)
                                        client.sendReplyMention(msg_id, to, "Succesfully add @! to Favorite Friend", [ls])
                            elif terminal.startswith("rename "):
                                sep = text.split(" ")
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        client.renameContact(ls,sep[1])
                                        client.sendReplyMention(msg_id, to, "Succesfully change @! display name to {}".format(sep[1]), [ls])
                            elif terminal == "blocklist":
                              if msg._from in owner:
                                blockeds = client.getBlockedContactIds()
                                num = 0
                                result = "├≽» List Blocked ««¥"
                                for listBlocked in blockeds:
                                    contact = client.getContact(listBlocked)
                                    num += 1
                                    result += "\n├≽ {}. {}".format(num, contact.displayName)
                                result += "\n├≽ Total {} Blocked ]".format(len(blockeds))
                                client.sendMessage(to, result)
                            elif terminal.startswith("friendbroadcast: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                contacts = client.getAllContactIds()
                                for contact in contacts:
                                    client.sendMessage(contact, "[ Broadcast ]\n{}".format(str(txt)))
                                client.sendMessage(to, "Berhasil broadcast ke {} teman".format(str(len(contacts))))

                            elif terminal.startswith("changegroupname: "):
                                if msg.toType == 2:
                                    sep = text.split(" ")
                                    groupname = text.replace(sep[0] + " ","")
                                    if len(groupname) <= 100:
                                        group = client.getGroup(to)
                                        group.name = groupname
                                        client.updateGroup(group)
                                        client.sendMessage(to, "Berhasil mengubah nama group menjadi : {}".format(groupname))
                            elif terminal == "openqr":
                              if msg._from in owner or admin:
                                if msg.toType == 2:
                                    group = client.getGroup(to)
                                    group.preventedJoinByTicket = False
                                    client.updateGroup(group)
                                    groupUrl = client.reissueGroupTicket(to)
                                    client.sendMessage(to, "Berhasil membuka QR Group\n\nGroupURL : line://ti/g/{}".format(groupUrl))
                            elif terminal.startswith("no"):
                                sep = text.split("|")
                                nom = sep[1]
                                nam = sep[2]
                                client.sendContactHP(to, "Kntlll", nom, nam)
                            elif terminal == "foot":
                                con = {'AGENT_ICON': 'http://profile.line-cdn.net/0hcr26oFItPF0PTxGrOrtDCjMKMjB4YToVdyx1MypOZmR1LXMPMiF2b31GMD5xfSgPZCogOC1GZmwq', 'AGENT_NAME': 'Runtime', 'AGENT_LINK': 'line://app/1600328768-y3yq64nw/?type=text&text=runtime'}
                                client.sendMessage(to, "LKJ", con, 0)
                            elif terminal == "gcvid":
                                group = client.getGroup(to)
                                con = {'GC_MEDIA_TYPE': 'VIDEO', 'SKIP_BADGE_COUNT': 'false', 'VERSION': 'X', 'DURATION': '0', 'GC_EVT_TYPE': 'S', 'CAUSE': '16', 'GC_IGNORE_ON_FAILBACK': 'false', 'GC_CHAT_MID': '{}', 'RESULT': 'INFO', 'TYPE': 'G'.format(group)}
                                client.sendMessage(to, "Join EUY", con, 2)
                            elif terminal == "gif":
                                data = {
                                 "messages": [{
                                  "type": "image",
                                  "originalContentUrl": "https://media.tenor.com/images/848b44048a6d5ba991153a47b42914bf/tenor.gif",
                                  "previewImageUrl": "https://media.tenor.com/images/220ee807c5b9deb79cebb5c1ae520d63/tenor.png",
                                  "animated": True,
                                  "extension": "gif",
                                  "sentBy": {
                                   "label": "Tenor GIFs",
                                   "iconUrl": "https://tenor.com/assets/img/favicon/favicon-80x80.png",
                                   "linkUrl": "line://app/1562242036-RW04okm"
                                  }
                                 }]
                                }
                                client.postTemplate(to, data)
                            elif terminal == "gifv2":
                                data = {
                                    "messages": [
                                        {
                                            "type": "image",
                                            "originalContentUrl": "https://media.tenor.com/images/848b44048a6d5ba991153a47b42914bf/tenor.gif",
                                            "previewImageUrl": "https://media.tenor.com/images/220ee807c5b9deb79cebb5c1ae520d63/tenor.png",
                                            "animated": True,
                                            "extension": "gif",
                                            "sentBy": {
                                                "label": "Tenor Gifs",
                                                "iconUrl": "https://tenor.com/assets/img/favicon/favicon-80x80.png",
                                                "linkUrl": "line://app/1562242036-RW04okm"
                                            }
                                        }
                                    ]
                                }
                                client.postTemplate(to, data)
                            elif terminal == "mute group":
                                group = client.getGroup(to)
                                group.notificationDisabled = True
                                client.updateGroup(group)
                                client.sendMessage(to, "Sssstt")
                            elif terminal.startswith("gcqr"):
                              if sender in owner:
                                dan = text.split(" ")
                                groups = client.getGroupIdsJoined()
                                try:
                                    listGroup = groups[int(dan[1])-1]
                                    group = client.getGroup(listGroup)
                                    group.preventedJoinByTicket = False
                                    client.updateGroup(group)
                                    groupUrl = client.reissueGroupTicket(group.id)
                                    client.sendMessage(to, "{} : line://ti/g/{}".format(group.name,groupUrl))
                                except:
                                    pass
                            elif terminal == "closeqr":
                              if msg._from in owner or admin:
                                if msg.toType == 2:
                                    group = client.getGroup(to)
                                    group.preventedJoinByTicket = True
                                    client.updateGroup(group)
                                    client.sendMessage(to, "Berhasil menutup QR Group")
                            elif terminal == "grouppicture":
                                if msg.toType == 2:
                                    group = client.getGroup(to)
                                    groupPicture = "http://dl.profile.line-cdn.net/{}".format(group.pictureStatus)
                                    client.sendImageWithURL(to, groupPicture)
                            elif terminal == "groupname":
                                if msg.toType == 2:
                                    group = client.getGroup(to)
                                    client.sendMessage(to, "Nama Group : {}".format(group.name))
                            elif terminal == "groupid":
                                if msg.toType == 2:
                                    group = client.getGroup(to)
                                    client.sendMessage(to, "Group ID : {}".format(group.id))
                            elif terminal == "grouplist":
                                groups = client.getGroupIdsJoined()
                                ret_ = "╭───「 Group List 」"
                                no = 0
                                for gid in groups:
                                    group = client.getGroup(gid)
                                    no += 1
                                    ret_ += "\n├≽ {}. {} | {}".format(str(no), str(group.name), str(len(group.members)))
                                ret_ += "\n╰───「 Total {} Group 」".format(str(len(groups)))
                                client.sendReplyMessage(msg_id, to, str(ret_))
                            elif terminal == "memberlist":
                                if msg.toType == 2:
                                    group = client.getGroup(to)
                                    num = 0
                                    ret_ = "╭───「 Member List 」"
                                    for contact in group.members:
                                        num += 1
                                        ret_ += "\n├≽ {}. {}".format(num, contact.displayName)
                                    ret_ += "\n╰───「 Total {} Members 」".format(len(group.members))
                                    client.sendReplyMessage(msg_id, to, ret_)
                            elif terminal.startswith("nama "):
                                if msg.toType == 2:
                                    texst = rynSplitText(cmd)
                                    gs = client.getGroup(to)
                                    c = ['{}:-:{}'.format(a.displayName,a.mid) for a in gs.members]
                                    c.sort()
                                    b = []
                                    for s in c:
                                        if texst in s.split(':-:')[0].lower():
                                            b.append(s.split(':-:')[1])
                                    client.sendMention(to,'Mention By Name\n@!',b)
                            elif terminal == "all mid":
                                if msg.toType == 2:
                                    group = client.getGroup(to)
                                    num = 0
                                    ret_ = "╭───「 Mid List On Group {} 」".format(group.name)
                                    for contact in group.members:
                                        num += 1
                                        ret_ += "\n├≽ {}.{}\n├{}".format(num, contact.displayName, contact.mid)
                                    ret_ += "\n╰───「 Total {} Members 」".format(len(group.members))
                                    client.sendReplyMessage(msg_id, to, ret_)
                            elif terminal == "pendinglist":
                                if msg.toType == 2:
                                    group = client.getGroup(to)
                                    ret_ = "╭───「 Pending List 」"
                                    no = 0
                                    if group.invitee is None or group.invitee == []:
                                        return client.sendReplyMessage(msg_id, to, "Tidak ada pendingan")
                                    else:
                                        for pending in group.invitee:
                                            no += 1
                                            ret_ += "\n├≽ {}. {}".format(str(no), str(pending.displayName))
                                        ret_ += "\n╰───「 Total {} Pending 」".format(str(len(group.invitee)))
                                        client.sendReplyMessage(msg_id, to, str(ret_))

                        ## Remote
                            elif terminal.startswith("leavegc "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                groups = client.getGroupIdsJoined()
                                try:
                                    listGroup = groups[int(query)-1]
                                    group = client.getGroup(listGroup)
                                    client.leaveGroup(group.id)
                                    client.sendMessage(to, "Succesfully leave to Group {}".format(group.name))
                                except Exception as error:
                                    logError(error)

                            elif terminal.startswith("sendcrashtogc "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                groups = client.getGroupIdsJoined()
                                try:
                                    listGroup = groups[int(query)-1]
                                    group = client.getGroup(listGroup)
                                    client.sendContact(group.id, "u73629292,'")
                                    client.sendMessage(to, "Succesfully send Crash to Group {}".format(group.name))
                                except Exception as error:
                                    logError(error)

                            elif terminal.startswith("invitetogc "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                groups = client.getGroupIdsJoined()
                                try:
                                    listGroup = groups[int(query)-1]
                                    group = client.getGroup(listGroup)
                                    client.inviteIntoGroup(group.id, [sender])
                                    client.sendMention(to, "Succesfully invite @! to Group {}".format(group.name), [sender])
                                except Exception as error:
                                    logError(error)

                            elif terminal.startswith("mutebotingc "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                groups = client.getGroupIdsJoined()
                                try:
                                    listGroup = groups[int(query)-1]
                                    group = client.getGroup(listGroup)
                                    if group not in offbot:
                                      client.sendMessageWithFooter(to, "Berhasil Mure Bot Di Group {}".format(group.name))
                                      offbot.append(group.id)
                                      print(group.id)
                                    else:
                                      client.sendMessageWithFooter(to, "Failed Mute Bot In Group {}".format(group.name))
                                except Exception as error:
                                    logError(error)

                            elif terminal.startswith("unmutebotingc "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                groups = client.getGroupIdsJoined()
                                listGroup = groups[int(query)-1]
                                group = client.getGroup(listGroup)
                                if group.id in offbot:
                                    offbot.remove(group.id)
                                    client.sendMessageWithFooter(to, "Berhasil Unmute Bot Di Group {}".format(group.name))
                                    print(group.id)
                                else:
                                    client.sendMessageWithFooter(to, "Failed Unmute Bot In Group {}".format(group.name))

                            elif terminal.startswith("chattogc"):
                              if sender in owner:
                                dan = text.split("-")
                                groups = client.getGroupIdsJoined()
                                try:
                                    listGroup = groups[int(dan[1])-1]
                                    group = client.getGroup(listGroup)
                                    client.sendMessage(group.id, dan[2])
                                except:
                                    pass

                            elif terminal.startswith("chattogct"):
                              if sender in owner:
                                dan = text.split("|")
                                groups = client.getGroupIdsJoined()
                                try:
                                    listGroup = groups[int(dan[1])-1]
                                    group = client.getGroup(listGroup)
                                    data = {
                                        "cc": "{}".format(settings["ryncc"]), 
                                            "to": group.id,
                                            "messages": [
                                            {
                                                "type": "flex",
                                                "altText": "Broadcast",
                                                "contents": {
                                                   "type": "bubble",
                                                   "header": {
                                                      "type": "box",
                                                      "layout": "vertical",
                                                      "contents": [
                  {
                                                           "type": "text",
                                                           "text": "SORRY FOR BROADCAST"
                                                        }
                                                    ]                                                    
               },
                  "hero": {
                                                   "type": "image",
                                                   "url": "https://obs.line-scdn.net/{}".format(client.getContact(sender).pictureStatus),
                                                   "size": "full",
                  },
                     "body": {
                                                   "type": "box",
                                                   "layout": "vertical",
                                                   "contents": [
                  {
                                                        "type": "text",
                                                        "text": "{}".format(client.getContact(sender).displayName),
                                                        "size": "lg",
                                                        "weight": "bold",
                                                         "wrap": True
                  },
                                                      {
                                                        "type": "text",
                                                        "text": "{}".format(dan[2]),
                                                        "color": "#EF0505",
                                                        "wrap": True
                  }
                                                    ]
               },
                     "footer": {
                                                   "type": "box",
                                                   "layout": "horizontal",
                                                   "contents": [
                                                      {
                                                        "type": "button",
                                                         "style": "primary",
                                                         "color": "#0083FF",
                                                         "action": {
                                                            "type": "uri",
                                                            "label": "Change Name",
                                                            "uri": "https://line.me/ti/p/~mobaloghanabi"
                                    }
                               }
                                                ]
                                            }
                                        }
                                    }
                                ]
                            }
                                    sendTemplate(data)
                                except:
                                    pass

                            elif terminal.startswith("chattofr"):
                              if sender in owner:
                                dan = text.split("-")
                                frs = client.getAllContactIds()
                                try:
                                    listFriend = frs[int(dan[1])-1]
                                    friend = client.getContact(listFriend)
                                    client.sendMessage(friend.mid, dan[2])
                                except:
                                    pass

                            elif terminal.startswith("sendgifttogc "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                groups = client.getGroupIdsJoined()
                                try:
                                    listGroup = groups[int(query)-1]
                                    group = client.getGroup(listGroup)
                                    gf = "b07c07bc-fcc1-42e1-bd56-9b821a826f4f","7f2a5559-46ef-4f27-9940-66b1365950c4","53b25d10-51a6-4c4b-8539-38c242604143","a9ed993f-a4d8-429d-abc0-2692a319afde"
                                    client.sendGift(group.id, random.choice(gf), "theme")
                                    txt = "~Gift~"
                                    client.sendMentionWithFooter(to, txt, "Succesfully send gift to Group {} :)".format(group.name), [sender])
                                except:
                                    pass
                            elif terminal == "checkme":
                              client.sendMessage(to, "waiting...")
                              if sender in owner:
                                contact = client.getContact(sender)
                                cover = client.getProfileCoverURL(sender)
                                result = "╔══[ Check Profile ]"
                                result += "\n├≽ Display Name : @!"
                                result += "\n├≽ Mid : {}".format(contact.mid)
                                result += "\n├≽ Status Profile"
                                result += "\n├≽ Whitelist : True"
                                result += "\n├≽ Blacklist : False"
                                result += "\n╚══[ Finish ]"
                                client.sendMention(to, result, [sender])
                              elif sender in settings["blackList"]:
                                contact = client.getContact(sender)
                                cover = client.getProfileCoverURL(sender)
                                result = "╔══[ Check Profile ]"
                                result += "\n├≽ Display Name : @!"
                                result += "\n├≽ Mid : {}".format(contact.mid)
                                result += "\n├≽ Status Profile"
                                result += "\n├≽ Whitelist : False"
                                result += "\n├≽ Blacklist : True"
                                result += "\n╚══[ Finish ]"
                                client.sendMention(to, result, [sender])
                              else:
                                contact = client.getContact(sender)
                                cover = client.getProfileCoverURL(sender)
                                result = "╔══[ Check Profile ]"
                                result += "\n├≽ Display Name : @!"
                                result += "\n├≽ Mid : {}".format(contact.mid)
                                result += "\n├≽ Status Profile"
                                result += "\n├≽ Whitelist : False"
                                result += "\n├≽ Blacklist : False"
                                result += "\n╚══[ Finish ]"
                                client.sendMention(to, result, [sender])

                            elif terminal.startswith("get note"):
                                data = client.getGroupPost(to)
                                try:
                                    music = data['result']['feeds'][int(text.split(' ')[2]) - 1]
                                    b = [music['post']['userInfo']['writerMid']]
                                    try:
                                        for a in music['post']['contents']['textMeta']:b.append(a['mid'])
                                    except:pass
                                    try:
                                        g= "\n\nDescription:\n"+str(music['post']['contents']['text'].replace('@','@!'))
                                    except:
                                        g=""
                                    a="\n   Total Like: "+str(music['post']['postInfo']['likeCount'])
                                    a +="\n   Total Comment: "+str(music['post']['postInfo']['commentCount'])
                                    gtime = music['post']['postInfo']['createdTime']
                                    a +="\n   Created at: "+str(humanize.naturaltime(datetime.fromtimestamp(gtime/1000)))
                                    a += g
                                    zx = ""
                                    zxc = " 「 Groups 」\nType: Get Note\n   Penulis : "+a
                                    try:
                                        client.sendReplyMessage(msg_id, to, zxc)
                                    except Exception as e:
                                        client.sendMessage(to, str(e))
                                    try:
                                        for c in music['post']['contents']['media']:
                                            params = {'userMid': client.getProfile().mid, 'oid': c['objectId']}
                                            path = client.server.urlEncode(client.server.LINE_OBS_DOMAIN, '/myhome/h/download.nhn', params)
                                            if 'PHOTO' in c['type']:
                                                try:
                                                    client.sendImageWithURL(to,path,'POST')
                                                except:pass
                                            else:
                                                pass
                                            if 'VIDEO' in c['type']:
                                                try:
                                                    client.sendVideoWithURL(to,path)
                                                except:pass
                                            else:
                                                pass
                                    except:
                                        pass
                                except Exception as e:
                                    return client.sendMessage(to,"「 Auto Respond 」\n"+str(e))

                            elif terminal == "groupinfo":
                                group = client.getGroup(to)
                                try:
                                    try:
                                        groupCreator = group.creator.mid
                                    except:
                                        groupCreator = "Tidak ditemukan"
                                    if group.invitee is None:
                                        groupPending = "0"
                                    else:
                                        groupPending = str(len(group.invitee))
                                    if group.preventedJoinByTicket == True:
                                        groupQr = "Tertutup"
                                        groupTicket = "Tidak ada"
                                    else:
                                        groupQr = "Terbuka"
                                        groupTicket = "https://line.me/R/ti/g/{}".format(str(client.reissueGroupTicket(group.id)))
                                    ret_ = "╔══[ Group Information ]"
                                    ret_ += "\n├≽ Nama Group : {}".format(group.name)
                                    ret_ += "\n├≽ ID Group : {}".format(group.id)
                                    ret_ += "\n├≽ Pembuat : @!"
                                    ret_ += "\n├≽ Jumlah Member : {}".format(str(len(group.members)))
                                    ret_ += "\n├≽ Jumlah Pending : {}".format(groupPending)
                                    ret_ += "\n├≽ Group Qr : {}".format(groupQr)
                                    ret_ += "\n├≽ Group Ticket : {}".format(groupTicket)
                                    ret_ += "\n╚══[ Success ]"
                                    client.sendImageWithURL(to, "http://dl.profile.line-cdn.net/{}".format(group.pictureStatus))
                                    client.sendMention(to, str(ret_), [groupCreator])
                                except:
                                    ret_ = "╔══[ Group Information ]"
                                    ret_ += "\n├≽ Nama Group : {}".format(group.name)
                                    ret_ += "\n├≽ ID Group : {}".format(group.id)
                                    ret_ += "\n├≽ Pembuat : {}".format(groupCreator)
                                    ret_ += "\n├≽ Jumlah Member : {}".format(str(len(group.members)))
                                    ret_ += "\n├≽ Jumlah Pending : {}".format(groupPending)
                                    ret_ += "\n├≽ Group Qr : {}".format(groupQr)
                                    ret_ += "\n├≽ Group Ticket : {}".format(groupTicket)
                                    ret_ += "\n╚══[ Success ]"
                                    client.sendImageWithURL(to, "http://dl.profile.line-cdn.net/{}".format(group.pictureStatus))
                                    client.sendMessage(to, str(ret_))
                            elif terminal.startswith("groupbroadcast: "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                groups = client.getGroupIdsJoined()
                                for group in groups:
                                    client.sendMessage(group, "[ Broadcast ]\n{}".format(str(txt)))
                                client.sendMessage(to, "Berhasil broadcast ke {} group".format(str(len(groups))))
                            elif terminal.startswith("groupvideocall "):
                              if msg._from in owner:
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                num = int(txt)
                                client.sendMessage(to, "Berhasil Invite Ke Dalam VideoCall Group :)")
                                for anu in range(0,num):
                                    group = client.getGroup(to)
                                    members = [mem.mid for mem in group.members]
                                    client.inviteIntoGroupVideoCall(to, contactIds=members)

                            elif terminal in ('mentionall','tag all','oi kalian'):
                                try:group = client.getGroup(to);midMembers = [contact.mid for contact in group.members]
                                except:group = client.getRoom(to);midMembers = [contact.mid for contact in group.contacts]
                                midSelect = len(midMembers)//20
                                for mentionMembers in range(midSelect+1):
                                    no = 0
                                    ret_ = "╭───「 Mention Members 」"
                                    dataMid = []
                                    if msg.toType == 2:
                                        for dataMention in group.members[mentionMembers*20 : (mentionMembers+1)*20]:
                                            dataMid.append(dataMention.mid)
                                            no += 1
                                            ret_ += "\n"+"├≽ {}. @!".format(str(no))
                                        ret_ += "\n╰───「 Total {} Members 」".format(str(len(dataMid)))
                                        client.sendReplyMention(msg_id, to, ret_, dataMid)
                                    else:
                                        for dataMention in group.contacts[mentionMembers*20 : (mentionMembers+1)*20]:
                                            dataMid.append(dataMention.mid)
                                            no += 1
                                            ret_ += "\n"+"├≽ {}. @!".format(str(no))
                                        ret_ += "\n╰───「 Total {} Members 」".format(str(len(dataMid)))
                                        client.sendReplyMention(msg_id, to, ret_, dataMid)
                            elif terminal == "sider on":
                                try:
                                    del RfuCctv['Point2'][to]
                                    del RfuCctv['Point3'][to]
                                    del RfuCctv['Point1'][to]
                                except:
                                    pass
                                RfuCctv['Point2'][to] = msg.id
                                RfuCctv['Point3'][to] = ""
                                RfuCctv['Point1'][to] = True
                                client.sendReplyMessage(msg_id, to,":))")
                            elif terminal == "sider off":
                                if to in RfuCctv['Point2']:
                                    RfuCctv['Point1'][to] = False
                                    client.sendReplyMessage(msg_id, to, RfuCctv['Point3'][to])
                                else:
                                    client.sendReplyMessage(msg_id, to, "Off not going")
                            elif terminal == "lurking on":
                              if msg._from in owner or admin:
                                tz = pytz.timezone("Asia/Makassar")
                                timeNow = datetime.now(tz=tz)
                                day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                                bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                                hr = timeNow.strftime("%A")
                                bln = timeNow.strftime("%m")
                                for i in range(len(day)):
                                    if hr == day[i]: hasil = hari[i]
                                for k in range(0, len(bulan)):
                                    if bln == str(k): bln = bulan[k-1]
                                readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                                if to in read['readPoint']:
                                    try:
                                        del read['readPoint'][to]
                                        del read['readMember'][to]
                                    except:
                                        pass
                                    read['readPoint'][to] = msg_id
                                    read['readMember'][to] = []
                                    client.sendMessage(to, "Lurking telah diaktifkan")
                                else:
                                    try:
                                        del read['readPoint'][to]
                                        del read['readMember'][to]
                                    except:
                                        pass
                                    read['readPoint'][to] = msg_id
                                    read['readMember'][to] = []
                                    client.sendMessage(to, "Set reading point : \n{}".format(readTime))
                            elif terminal == "lurking off":
                              if msg._from in owner or admin:
                                tz = pytz.timezone("Asia/Makassar")
                                timeNow = datetime.now(tz=tz)
                                day = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday","Friday", "Saturday"]
                                hari = ["Minggu", "Senin", "Selasa", "Rabu", "Kamis", "Jumat", "Sabtu"]
                                bulan = ["Januari", "Februari", "Maret", "April", "Mei", "Juni", "Juli", "Agustus", "September", "Oktober", "November", "Desember"]
                                hr = timeNow.strftime("%A")
                                bln = timeNow.strftime("%m")
                                for i in range(len(day)):
                                    if hr == day[i]: hasil = hari[i]
                                for k in range(0, len(bulan)):
                                    if bln == str(k): bln = bulan[k-1]
                                readTime = hasil + ", " + timeNow.strftime('%d') + " - " + bln + " - " + timeNow.strftime('%Y') + "\nJam : [ " + timeNow.strftime('%H:%M:%S') + " ]"
                                if to not in read['readPoint']:
                                    client.sendMessage(to,"Lurking telah dinonaktifkan")
                                else:
                                    try:
                                        del read['readPoint'][to]
                                        del read['readMember'][to]
                                    except:
                                        pass
                                    client.sendMessage(to, "Delete reading point : \n{}".format(readTime))
                            elif "lurking" in msg.text.lower():
                              if msg._from in owner or admin:
                                if to in read['readPoint']:
                                    if read["readMember"][to] == []:
                                        return client.sendMessage(to, "Tidak Ada Sider")
                                    else:
                                        no = 0
                                        result = "╔══[ Reader ]"
                                        for dataRead in read["readMember"][to]:
                                            no += 1
                                            result += "\n├≽ {}. @!".format(str(no))
                                        result += "\n╚══[ Total {} Sider ]".format(str(len(read["readMember"][to])))
                                        client.sendMention(to, result, read["readMember"][to])
                                        read['readMember'][to] = []
                            elif terminal == "clonecontact":
                              if msg._from in owner:
                                settings["cloneContact"] = True
                                client.sendMessageWithFooter(to, "Silahkan Kirim Contactnya :)")
                            elif terminal == "clone contact off":
                                if settings["cloneContact"] == False:
                                    client.sendMessage(to, "Clone Contact Has been Aborted")
                                else:
                                    settings["cloneContact"] = False
                                    client.sendMessage(to, "Succesfully Aborted \n\nClone Contact Profile")
                            elif terminal == "changedual":
                             # if sender in owner:
                                settings["changeDual"] = True
                                client.sendMessage(to, "Send Vidd :)")
                            elif terminal == "allcvp off":
                              if sender in owner:
                                if settings["allchangedual"] == False:
                                    client.sendMessage(to, "CVP Has Been Aborted")
                                else:
                                    settings["allchangedual"] = False
                                    client.sendMessage(to, "Succesfully Aborted \n\nChange Video & Picture")
                            elif terminal == "cvp off":
                          #    if sender in owner:
                                if settings["changeDual"] == False:
                                    client.sendMessage(to, "CVP Has Been Aborted")
                                else:
                                    settings["changeDual"] = False
                                    client.sendMessage(to, "Succesfully Aborted \n\nChange Video & Picture")
                            elif terminal == "changepict":
                              if msg._from in owner:
                                settings["changePictureProfile"] = True
                                client.sendMessage(to, "Silahkan kirim gambarnya")
                            elif terminal == "changecover":
                              if sender in owner:
                                settings["changeCover"] = True
                                client.sendMessage(to, "Send Pict :)")
                            elif terminal == "changevp":
                              if msg._from in owner:
                                settings["changeVpProfile"] = True
                                client.sendMessage(to, "Silahkan kirim Videonya")
                            elif terminal == "changegrouppicture":
                                if msg.toType == 2:
                                    if to not in settings["changeGroupPicture"]:
                                        settings["changeGroupPicture"].append(to)
                                    client.sendMessage(to, "Silahkan kirim gambarnya")
                            elif terminal == "mimic on":
                             # if msg._from in ["u874a7502c02896b2edbb3445c2615d35"]:
                                if settings["mimic"]["status"] == True:
                                    client.sendMessage(to, "Reply message telah aktif")
                                else:
                                    settings["mimic"]["status"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan reply message")
                            elif terminal == "mimic off":
                              if msg._from in owner:
                                if settings["mimic"]["status"] == False:
                                    client.sendMessage(to, "Reply message telah nonaktif")
                                else:
                                    settings["mimic"]["status"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan reply message")
                            elif terminal == "mimiclist":
                              if msg._from in owner:
                                if settings["mimic"]["target"] == {}:
                                    client.sendMessage(to, "Tidak Ada Target")
                                else:
                                    no = 0
                                    result = "╔══[ Mimic List ]"
                                    target = []
                                    for mid in settings["mimic"]["target"]:
                                        target.append(mid)
                                        no += 1
                                        result += "\n├≽ {}. @!".format(no)
                                    result += "\n╚══[ Total {} Mimic ]".format(str(len(target)))
                                    client.sendMention(to, result, target)
                            elif terminal.startswith("mimicadd "):
                           #   if msg._from in owner:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        try:
                                            if ls in settings["mimic"]["target"]:
                                                client.sendMessage(to, "Target sudah ada dalam list")
                                            else:
                                                settings["mimic"]["target"][ls] = True
                                                client.sendMessage(to, "Berhasil menambahkan target")
                                        except:
                                            client.sendMessage(to, "Gagal menambahkan target")
                            elif terminal.startswith("mimicdel "):
                              if msg._from in owner:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    lists = []
                                    for mention in mentionees:
                                        if mention["M"] not in lists:
                                            lists.append(mention["M"])
                                    for ls in lists:
                                        try:
                                            if ls not in settings["mimic"]["target"]:
                                                client.sendMessage(to, "Target sudah tida didalam list")
                                            else:
                                                del settings["mimic"]["target"][ls]
                                                client.sendMessage(to, "Berhasil menghapus target")
                                        except:
                                            client.sendMessage(to, "Gagal menghapus target")
                            elif terminal.startswith("instagramv2"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("http://corrykalam.pw/api/instagram.php?username={}".format(txt))
                                data = url.json()
                                result = "≽ Name        : {}".format(data["fullname"])
                                result += "\n≽ Username  : {}".format(data["username"])
                                result += "\n≽ Bio       : {}".format(data["biography"])
                                result += "\n≽ Follower  : {}".format(data["follower"])
                                result += "\n≽ Following : {}".format(data["following"])
                                result += "\n≽ Private   : {}".format(data["private"])
                                result += "\n≽ Post      : {}".format(data["post"])
                                deta = {"result":[{
                                    "N":"Name",
                                    "N":"Username",
                                    "N":"Bio",
                                    "N":"Follower",
                                    "N":"Following",
                                    "N":"Private",
                                    "N":"Post"
                                        }
                                    ]
                                }
                                if deta["result"] != []:
                                    ret_ = []
                                    for fn in deta["result"]:
                                                ret_.append({
                                                        "type": "box",
                                                        "layout": "baseline",
                                                        "spacing": "sm",
                                                        "contents": [
                                                            {
                                                                "type": "text",
                                                                "text": "{}".format(fn["N"]),
                                                                "color": "#aaaaaa",
                                                                "size": "sm",
                                                                "flex": 1
                                                            },
                                                            {
                                                                "type": "text",
                                                                "text": "Test",
                                                                "wrap": True,
                                                                "size": "sm",
                                                                "color": "#666666",
                                                                "flex": 4
                                                            }
                                                        ]
                                                    }
                                                )
                                    data = {
                                        "type": "flex",
                                        "altText": "{}".format(data["fullname"]),
                                        "contents": {
                                            "type": "bubble",
                                            "header": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "contents": [
                                                    {
                                                        "type": "text",
                                                        "text": "「 Instagram 」",
                                                        "weight": "bold",
                                                        "size": "xl",
                                                        "align": "center"
                                                    }
                                                ]
                                            },
                                            "hero": {
                                                "type": "image",
                                                "url": "{}".format(data["profpic"]),
                                                "size": "full"
                                            },
                                            "body": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "md",
                                                "contents": [
                                                    {
                                                        "type": "box",
                                                        "layout": "vertical",
                                                        "margin": "lg",
                                                        "spacing": "sm",
                                                        "contents": [
                                                            {
                                                                "type": "box",
                                                                "layout": "baseline",
                                                                "spacing": "sm",
                                                                "contents": ret_
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "footer": {
                                                "type": "box",
                                                "layout": "horizontal",
                                                "contents": [
                                                    {
                                                        "type": "button",
                                                        "style": "primary",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "{}".format(data["fullname"]),
                                                            "uri": "https://www.instagram.com/{}".format(data["username"])
                                                        }
                                                    }
                                                ]
                                            }
                                        }
                                    }
                                    client.postTemplate(to, data)
                            elif terminal.startswith("instagram"):
                                try:
                                    sep = text.split(" ")
                                    txt = text.replace(sep[0] + " ","")
                                    website = requests.get("https://www.instagram.com/{}/".format(txt))
                                    data = BeautifulSoup(website.content, "lxml")
                                    for getInfoInstagram in data.findAll("script", {"type":"text/javascript"})[3]:
                                        getJsonInstagram = re.search(r'window._sharedData\s*=\s*(\{.+\})\s*;', getInfoInstagram).group(1)
                                        data = json.loads(getJsonInstagram)
                                        for instagramProfile in data["entry_data"]["ProfilePage"]:
                                            username = instagramProfile["graphql"]["user"]["username"]
                                            name = instagramProfile["graphql"]["user"]["full_name"]
                                            picture = instagramProfile["graphql"]["user"]["profile_pic_url_hd"]
                                            biography = instagramProfile["graphql"]["user"]["biography"]
                                            followers = instagramProfile["graphql"]["user"]["edge_followed_by"]["count"]
                                            following = instagramProfile["graphql"]["user"]["edge_follow"]["count"]
                                            private = instagramProfile["graphql"]["user"]["is_private"]
                                            media = instagramProfile["graphql"]["user"]["edge_owner_to_timeline_media"]["count"]
                                            if "razlayd" in username:
                                                folls = "{}".format(followers)
                                                fls = folls.replace('{}'.format(folls),'21534')
                                            else:
                                                fls = followers
                                            a = "╭───「 Instagram 」"
                                            a += "\n├≽Username : {}".format(username)
                                            a += "\n├≽Name       : {}".format(name)
                                            a += "\n├≽Bio          : {}".format(biography)
                                            a += "\n├≽Followers : {}".format(fls)
                                            a += "\n├≽Following : {}".format(following)
                                            a += "\n├≽Private    : {}".format(private)
                                            a += "\n├≽Post       : {}".format(media)
                                            a += "\n╰───「 {} 」".format(client.getProfile().displayName)
                                            client.sendImageWithURL(to, picture)
                                            client.sendMessage(to, a)
                                except Exception as e:
                                    client.sendMessage(to, str(e))
                            elif terminal.startswith("instapost"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://rest.farzain.com/api/ig_post.php?id={}=1&apikey=oQ61nCJ2YBIP1qH25ry6cw2ba".format(txt))
                                data = url.json()
                                result = "╭───「 Instagram Post 」"
                                result += "\n├≽ Caption : {}".format(data["caption"])
                                result += "\n├≽ Like: {}".format(data["like"])
                                result += "\n╰───「 {} 」".format(client.getProfile().displayName)
                                comm = "-≽ Comment : "
                                for com in data["comment"]:
                                	comm += "\n{}".format(com)
                                if "first_pict" in data:
                                	client.sendImageWithURL(to, data["first_pict"])
                                client.sendReplyMessage(msg_id, to, result)
                                client.sendReplyMessage(msg_id, to, comm)
                                client.sendVideoWithURL(to, data["first_video"])
                            elif terminal.startswith("pictureig"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://rest.farzain.com/api/ig_post.php?id={}=1&apikey=oQ61nCJ2YBIP1qH25ry6cw2ba".format(txt))
                                data = url.json()
                                client.sendImageWithURL(to, data["first_pict"])
                            elif terminal.startswith("instastory "):
                                sep = text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                cond = query.split("|")
                                search = str(cond[0])
                                if len(cond) == 2:
                                    url = requests.get("https://v1.mazterin.com/download_stories_instagram.php?username={}&key=c26ab3bbd8b137f99cd83c2c1c0963bcc1a35cad".format(search))
                                    data = url.json()
                                    num = int(cond[1])
                                    if num <= len(data["result"]):
                                        search = data["result"][num - 1]
                                        if "gambar" in search:
                                            Thread(target=client.sendImageWithURL,args=(to, str(search["gambar"],))).start()
                                        else:
                                            pass
                                        if "video" in search:
                                            Thread(target=client.sendVideoWithURL,args=(to, str(search["video"],))).start()
                                        else:
                                            pass
                            elif terminal.startswith("praytime "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0]+ " ","")
                                url = requests.get("https://time.siswadi.com/pray/{}".format(txt))
                                data = url.json()
                                ret_ = "╭───「 Praytime at {} 」".format(txt)
                                ret_ += "\n├≽ Date : {}".format(data["time"]["date"])
                                ret_ += "\n├≽ Subuh : {}".format(data["data"]["Fajr"])
                                ret_ += "\n├≽ Dzuhur : {}".format(data["data"]["Dhuhr"])
                                ret_ += "\n├≽ Ashar : {}".format(data["data"]["Asr"])
                                ret_ += "\n├≽ Magrib : {}".format(data["data"]["Maghrib"])
                                ret_ += "\n├≽ Isha : {}".format(data["data"]["Isha"])
                                ret_ += "\n├≽ 1/3 Malam : {}".format(data["data"]["SepertigaMalam"])
                                ret_ += "\n├≽ Tengah Malam : {}".format(data["data"]["TengahMalam"])
                                ret_ += "\n├≽ 2/3 Malam : {}".format(data["data"]["DuapertigaMalam"])
                                ret_ += "\n├≽ 「 Always Remember to Your God :) 」"
                                ret_ += "\n╰───「 {} 」".format(txt)
                                client.sendMessageWithFooter(to, str(ret_))
                                address = ''.format(data["location"]["address"])
                                latitude = float(data["location"]["latitude"])
                                longitude = float(data["location"]["longitude"])
                                client.sendLocation(to, address,latitude,longitude)
                            elif terminal.startswith("wiki"):
                            	sep = text.split("|")
                            	def wiks():
	                            	wiki.set_lang("{}".format(sep[1]))
	                            	wik = wiki.page("{}".format(sep[2]))
	                            	ttt = "{}".format(wik.title)
	                            	ttt+= "\n{}".format(wik.content)
	                            	client.sendReplyMessage(msg_id, to, ttt)
                            	ryn = Thread(target=wiks)
                            	ryn.daemon = True
                            	ryn.start()
                            elif terminal == "quotes":
                                url = requests.get("https://Botfamily.faith/api/quotes/?apikey=sourcecode")
                                data = url.json()
                                result = "╔══[ Quotes ]"
                                result += "\n├≽ Author : {}".format(data["result"]["author"])
                                result += "\n├≽ Category : {}".format(data["result"]["category"])
                                result += "\n├≽ Quote : {}".format(data["result"]["quote"])
                                result += "\n╚══[ Finish ]"
                                client.sendMessageWithFooter(to, result)
                            elif terminal == "motivation":
                                url = requests.get("https://Botfamily.faith/api/motivation/?apikey=sourcecode")
                                data = url.json()
                                result = "╔══[ Quotes ]"
                                result += "\n├≽ Motivation : {}".format(data["result"][0]["motivation"])
                                result += "\n╚══[ Finish ]"
                                thum = data["result"][0]["thumbnail"]
                                client.sendImageWithURL(to, thum)
                                client.sendMessageWithFooter(to, result)
                            elif terminal.startswith("acaratv "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://rest.farzain.com/api/acaratv.php?id={}&apikey=oQ61nCJ2YBIP1qH25ry6cw2ba&type=separate".format(txt))
                                data = url.json()
                                no = 0
                                result = "╔══[ ~ Acara TV ~ ]"
                                for anu in data:
                                    no += 1
                                    result += "\n├≽ {}. {} >>> {} ".format(str(no),str(anu["acara"]),str(anu["jam"]))
                                result += "\n╚══[ ~ Acara TV ~ ]"
                                client.sendMessageWithFooter(to, result)
                            elif terminal.startswith("zodiak "):
                              if msg._from in owner:
                                sep = msg.text.split(" ")
                                query = text.replace(sep[0] + " ","")
                                r = requests.post("https://aztro.herokuapp.com/?sign={}&day=today".format(urllib.parse.quote(query)))
                                data = r.text
                                data = json.loads(data)
                                data1 = data["description"]
                                data2 = data["color"]
                                translator = Translator()
                                hasil = translator.translate(data1, dest='id')
                                hasil1 = translator.translate(data2, dest='id')
                                A = hasil.text
                                B = hasil1.text
                                ret_ = "🍀 Ramalan zodiak {} hari ini 🍀\n".format(str(query))
                                ret_ += str(A)
                                ret_ += "\n======================\n🍀 Tanggal : " +str(data["current_date"])
                                ret_ += "\n🍀 Rasi bintang : "+query
                                ret_ += " ("+str(data["date_range"]+")")
                                ret_ += "\n🍀 Pasangan Zodiak : " +str(data["compatibility"])
                                ret_ += "\n🍀 Angka keberuntungan : " +str(data["lucky_number"])
                                ret_ += "\n🍀 Waktu keberuntungan : " +str(data["lucky_time"])
                                ret_ += "\n🍀 Warna kesukaan : " +str(B)
                                client.sendMessage(to, str(ret_))
                            elif terminal.startswith("bintang "):
                              if msg._from in owner:
                                sep = msg.text.split(" ")
                                url = msg.text.replace(sep[0] + " ","")    
                                with requests.session() as s:
                                    s.headers['user-agent'] = "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36"
                                    r = s.get("https://www.vemale.com/zodiak/{}".format(urllib.parse.quote(url)))
                                    soup = BeautifulSoup(r.content, 'html5lib')
                                    ret_ = ""
                                    for a in soup.select('div.vml-zodiak-detail'):
                                        ret_ += a.h1.string
                                        ret_ += "\n"+ a.h4.string
                                        ret_ += " : "+ a.span.string +""
                                    for b in soup.select('div.col-center'):
                                        ret_ += "\nTanggal : "+ b.string
                                    for d in soup.select('div.number-zodiak'):
                                        ret_ += "\nAngka keberuntungan : "+ d.string
                                    for c in soup.select('div.paragraph-left'):
                                        ta = c.text
                                        tab = ta.replace("    ", "")
                                        tabs = tab.replace(".", ".\n")
                                        ret_ += "\n"+ tabs
                                        #print (ret_)
                                    client.sendMessage(to, str(ret_))
                            elif terminal.startswith("samehadaku "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://rest.farzain.com/api/samehadaku.php?id={}&apikey=oQ61nCJ2YBIP1qH25ry6cw2ba".format(txt))
                                data = url.json()
                                no = 0
                                result = "╔══[ ~ Samehadaku ~ ]"
                                for anu in data:
                                    no += 1
                                    result += "\n├≽ {}. {}".format(str(no),str(anu["title"]))
                                    result += "\n├≽ {}".format(str(anu["url"]))
                                    result += "\n├≽ {}".format(str(anu["date"]))
                                result += "\n╚══[ {} Anime ]".format(str(len(data)))
                                client.sendMessageWithFooter(to, result)
                            elif terminal.startswith("brainly "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://rest.farzain.com/api/brainly.php?id={}&apikey=oQ61nCJ2YBIP1qH25ry6cw2ba".format(txt))
                                data = url.json()
                                no = 0
                                result = "╔══[ ~ Brainly ~ ]"
                                for anu in data:
                                    no += 1
                                    result += "\n├≽ {}. {}".format(str(no),str(anu["title"]))
                                    result += "\n├≽ {}".format(str(anu["url"]))
                                result += "\n╚══[ ~ {} Answer ~ ]".format(str(len(data)))
                                client.sendMessageWithFooter(to, result)
                            elif terminal.startswith("harinasional "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://rest.farzain.com/api/special/tanggal.php?id={}&type=nasional&apikey=ppqeuy".format(txt))
                                data = url.json()
                                no = 0
                                result = "╔══[ ~ HariNasional Indonesia ~ ]"
                                for anu in data["result"]:
                                    no += 1
                                    result += "\n├≽ {}. {}".format(str(no),str(anu["tanggal"]))
                                    result += "\n├≽ Keterangan {}".format(str(anu["keterangan"]))
                                result += "\n╚══[ ~ {} Hari Nasional ~ ]".format(str(len(data["result"])))
                                client.sendMessageWithFooter(to, result)
                               
                            ###### Islamic #########  
                             
                            elif terminal.startswith("mtoh "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("http://api.aladhan.com/v1/gToH?date={}".format(txt))
                                data = url.json()
                                result = "~ Hijriah ~ = {}".format(str(data["data"]["hijri"]["date"]))
                                result += "\n~ Masehi ~ = {}".format(str(data["data"]["gregorian"]["date"]))
                                client.sendMessageWithFooter(to, result)
                            elif terminal.startswith("asmaulhusna"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("http://api.aladhan.com/asmaAlHusna/{}".format(txt))
                                data = url.json()
                                result = "~ Asma Allah ke {} = ~ {} ~".format(txt,data["data"][0]["name"])
                                result += "\n~Artinya =~ {} ~".format(data["data"][0]["en"]["meaning"])
                                client.sendMessageWithFooter(to, result)
                            elif terminal.startswith("al-qur'an"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                web = requests.get("http://api.alquran.cloud/surah/{}".format(txt))
                                data = web.json()
                                result = "~[~{}~]~".format(data["data"]["englishName"])
                                quran = data["data"]
                                result += "\n~ Surah ke {} ~".format(quran["number"])
                                result += "\n~ Nama Surah ~ {} ~".format(quran["name"])
                                result += "\n~ {} Ayat ~".format(quran["numberOfAyahs"])
                                result += "\n~ {} ~".format(quran["name"])
                                result += "\n~ Ayat Sajadah = {} ~".format(quran["ayahs"][0]["sajda"])
                                result += "\n==================\n"
                                no = 0
                                for ayat in data["data"]["ayahs"]:
                                    no += 1
                                    result += "\n{}. {}".format(no,ayat['text'])
                                k = len(result)//10000
                                for aa in range(k+1):
                                    client.sendMessage(to,'{}'.format(result[aa*10000 : (aa+1)*10000]))
                            elif terminal.startswith("murrotal"):
                                try:
                                    sep = text.split(" ")
                                    txt = int(text.replace(sep[0] + " ",""))
                                    if 0 < txt < 115:
                                        if txt not in [2,3,4,5,6,7,9,10,11,12,16,17,18,20,21,23,26,37]:
                                            if len(str(txt)) == 1:
                                                audionya = "https://audio5.qurancentral.com/mishary-rashid-alafasy/mishary-rashid-alafasy-00" + str(txt) + "-muslimcentral.com.mp3"
                                                client.sendAudioWithURL(to, audionya)
                                            elif len(str(txt)) == 2:
                                                audionya =  "https://audio5.qurancentral.com/mishary-rashid-alafasy/mishary-rashid-alafasy-0" + str(txt) + "-muslimcentral.com.mp3"
                                                client.sendAudioWithURL(to, audionya)
                                            else:
                                                audionya =  "https://audio5.qurancentral.com/mishary-rashid-alafasy/mishary-rashid-alafasy-" + str(txt) + "-muslimcentral.com.mp3"
                                                client.sendAudioWithURL(to, audionya)
                                        else:
                                            client.sendMessage(to, "The Surah is too long")
                                    else:
                                        client.sendMessage(to, "Holy Qur'an Only have 114 surah :)")
                                except Exception as error:
                                    client.sendMessage(to, "error\n"+str(error))
                                    logError(error)
                            elif terminal == "ayat sajadah":
                                url = requests.get("http://api.alquran.cloud/sajda/quran-uthmani")
                                data = url.json()
                                result = "~[Ayat Sajadah]~"
                                for ayat in data["data"]["ayahs"]:
                                    ayatnya = ayat["text"]
                                    result += "\n{}".format(ayatnya)
                                    result += "\n Surah {}".format(ayat["surah"]["englishName"])
                                result += "\n ~~~~~~ Juz {} ~~~~~~".format(ayat["juz"])
                                client.sendMessageWithFooter(to, result)
                            elif terminal == "pulsk":                                
                                r = requests.get("https://farzain.com/api/pulsk.php?apikey=oQ61nCJ2YBIP1qH25ry6cw2ba")
                                data=r.text
                                data=json.loads(data)
                                if data != []:    
                                    no = 0
                                    hasil = "[ Pulsk Result ]"
                                    for sam in data:                                     
                                        no += 1                  
                                        hasil += "\n" + str(no) + ". " + str(sam["title"])+"\n"+ str(sam["link"])+"\n"+ str(sam["views"])+"\n"+ str(sam["share"])
                                    client.sendMessageWithFooter(to, str(hasil))
                            elif terminal.startswith("listmeme"):
                              if msg._from in owner:
                                proses = text.split(" ")
                                keyword = text.replace(proses[0] + " ","")
                                count = keyword.split("|")
                                search = str(count[0])
                                r = requests.get("http://api.imgflip.com/get_memes")
                                data = json.loads(r.text)
                                if len(count) == 1:
                                    no = 0
                                    hasil = "🍀 Daftar Meme Image 🍀\n"
                                    for aa in data["data"]["memes"]:
                                        no += 1
                                        hasil += "\n" + str(no) + ". "+ str(aa["name"])
                                    hasil += " "
                                    client.sendMessage(to,hasil)
                                    client.sendMention(to, "\nJika ingin menggunakan, \nSilahkan ketik:\n\n🍀 Listmeme | urutan\n🍀 Meme text1 | text2 | urutan", [sender])
                                if len(count) == 2:
                                    try:
                                        num = int(count[1])
                                        gambar = data["data"]["memes"][num - 1]
                                        hasil = "{}".format(str(gambar["name"]))
                                        client.sendMention(to, "🍀 Meme Image 🍀\nTunggu \nFoto sedang diproses...", [sender])
                                        client.sendMessage(to, hasil)
                                        client.sendImageWithURL(to, gambar["url"])
                                    except Exception as e:
                                        client.sendMessage(to," "+str(e))
                            elif terminal.startswith("meme "):  
                                if msg._from in owner:
                                    code = msg.text.split(" ")
                                    txt = msg.text.replace(code[0] + "/" + " ","")
                                    txt2 = msg.text.replace(txt[0] + "/" + " ","")
                                    naena = "https://api.imgflip.com/"+txt2+".jpg"
                                    try:
                                         start = time.time()
                                         client.sendMessage(to,"🍀Meme Image🍀\nType : Meme Image\nTime taken : %s seconds" % (start))
                                         client.sendImageWithURL(to, naena)
                                    except Exception as error:
                                         client.sendMessage(to, str(error))
                            elif terminal.startswith("fscosplay "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = "http://farzain.com/api/special/fansign/cosplay/cosplay.php?apikey=ppqeuy&text={}".format(txt)
                                client.sendImageWithURL(to, url)
                            elif terminal.startswith("fsv "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = "https://rest.farzain.com/api/special/fansign/indo/viloid.php?apikey=ppqeuy&text={}".format(txt)
                                client.sendImageWithURL(to, url)
                            elif terminal == "ss":
                                group = client.getGroup(to)
                                url = "api.echobots.net/screenshot/put/{}".format(group.id)
                                Thread(target=client.sendImageWithURL,args=(to, url,)).start()
                            elif terminal.startswith("decode "):
                            	txt = removeCmd("decode", text)
                            	url = urlDecode(txt)
                            	client.sendReplyMessage(msg_id, to, url)
                            elif terminal.startswith("encode "):
                            	txt = removeCmd("encode", text)
                            	url = urlEncode(txt)
                            	client.sendReplyMessage(msg_id, to, url)
                            elif terminal.startswith("ssweb "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = "https://api.site-shot.com//?url={}&width=1280&height=2080&5ba006ea23010.jpg".format(txt)
                                Thread(target=client.sendImageWithURL,args=(to, url,)).start()
                            elif terminal.startswith("linedownload "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                client.sendImageWithURL(to, txt)
                                client.sendVideoWithURL(to, txt)
                            elif terminal.startswith("linepost "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://farzain.com/api/special/line.php?id={}&apikey=ppqeuy".format(txt))
                                data = url.json()
                                client.sendImageWithURL(to, data["result"])
                                client.sendVideoWithURL(to, data["result"])
                            elif terminal.startswith("newalbum "):
                            	txt = removeCmd("newalbum", text)
                            	url = requests.get("http://api-jooxtt.sanook.com/web-fcgi-bin/web_search?country=id&lang=en&search_input={}&sin=0&ein=30".format(txt))
                            	data = url.json()
                            	urlv = requests.get("http://api-jooxtt.sanook.com/web-fcgi-bin/web_album_singer?country=id&lang=en&cmd=1&sin=0&ein=2&singerid={}".format(data["itemlist"][0]["singerid"]))
                            	datav = url.json()
                            	tex = "╭───「 New Album 」"
                            	tex += "\n├≽ Name : {}".format(urlDecode(datav["name"]))
                            	tex += "\n├≽ Song : {}".format(datav["songnum"])
                            	tex += "\n├≽ Album: {}".format(datav["albumnum"])
                            	tex += "\n╰───「 {} 」".format(urlDecode(datav["name"]))
                            	client.sendReplyImageWithURL(msg_id, to, datav["pic"])
                            	client.sendReplyMessage(msg_id, to, tex)
                            elif terminal.startswith("tiktok"):
                            	def tiktoks():
                            		try:
		                                url = requests.get("https://rest.farzain.com/api/tiktok.php?country=jp&apikey=oQ61nCJ2YBIP1qH25ry6cw2ba&type=json")
		                                data = url.json()
		                                client.sendVideoWithURL(to, data["first_video"])
                            		except:
		                            	client.sendMessage(to, data["result"])
                            	ryn = Thread(target=tiktoks)
                            	ryn.daemon = True
                            	ryn.start()
                            elif terminal.startswith("artinama "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://api.eater.site/api/name/?apikey=beta&name={}".format(txt))
                                data = url.json()
                                client.sendMessageWithFooter(to, str(data["result"][0]["name"]))
                            elif terminal.startswith("artimimpi "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://farzain.com/api/mimpi.php?q={}&apikey=oQ61nCJ2YBIP1qH25ry6cw2ba".format(txt))
                                data = url.json()
                                client.sendMessageWithFooter(to, str(data["result"]))
                            elif terminal.startswith("ytmp3"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                def yt():
                                    youtubeMp3(to, txt)
                                treding = Thread(target=yt)
                                treding.daemon = True
                                treding.start()
                            elif terminal.startswith("ytmp4"):
                                sep = text.split(" ")
                                txt = msg.text.replace(sep[0] + " ","")
                                treding = Thread(target=youtubeMp4,args=(to,txt,))
                                treding.daemon = True
                                treding.start()
                            elif cmd.startswith("youtubesearch "):
	                            sep = text.split(" ")
	                            search = text.replace(sep[0] + " ","")
	                            params = {"search_query": search}
	                            with _session as web:
	                                web.headers["User-Agent"] = random.choice(settings["userAgent"])
	                                r = web.get("https://www.youtube.com/results", params = params)
	                                soup = BeautifulSoup(r.content, "html5lib")
	                                ret_ =  "╭───「 Youtube Result 」"
	                                datas = []
	                                for data in soup.select(".yt-lockup-title > a[title]"):
	                                    if "&lists" not in data["href"]:
	                                        datas.append(data)
	                                for data in datas:
	                                    ret_ += "\n-≽[ {} ]".format(str(data["title"]))
	                                    ret_ += "\n-≽https://www.youtube.com{}".format(str(data["href"]))
	                                ret_ += "\n╰───「 {} 」".format(len(datas))
	                                client.sendMessage(to, str(ret_))
                            elif terminal.startswith("youtubemp4 "):
                                try:
                                    sep = msg.text.split(" ")
                                    textToSearch = msg.text.replace(sep[0] + " ","")
                                    query = urllib.parse.quote(textToSearch)
                                    search_url="https://www.youtube.com/results?search_query="
                                    mozhdr = {'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3'}
                                    sb_url = search_url + query
                                    sb_get = requests.get(sb_url, headers = mozhdr)
                                    soupeddata = BeautifulSoup(sb_get.content, "html.parser")
                                    yt_links = soupeddata.find_all("a", class_ = "yt-uix-tile-link")
                                    x = (yt_links[1])
                                    yt_href =  x.get("href")
                                    yt_href = yt_href.replace("watch?v=", "")
                                    qx = "https://youtu.be" + str(yt_href)
                                    vid = pafy.new(qx)
                                    stream = vid.streams
                                    best = vid.getbest()
                                    best.resolution, best.extension
                                    for s in stream:
                                        me = best.url
                                        hasil = ""
                                        title = "Judul [ " + vid.title + " ]"
                                        author = '\n\n•-≽ Author : ' + str(vid.author)
                                        durasi = '\n•-≽ Duration : ' + str(vid.duration)
                                        suka = '\n•-≽ Likes : ' + str(vid.likes)
                                        rating = '\n•-≽ Rating : ' + str(vid.rating)
                                        deskripsi = '\n•-≽ Deskripsi : ' + str(vid.description)
                                    client.sendVideoWithURL(msg.to, me)
                                    client.sendMessage(msg.to,title+ author+ durasi+ suka+ rating+ deskripsi)
                                except Exception as e:
                                    client.sendMessage(msg.to,str(e))
                            elif terminal.startswith("youtubemp3 "):
                                try:
                                    sep = msg.text.split(" ")
                                    textToSearch = msg.text.replace(sep[0] + " ","")
                                    query = urllib.parse.quote(textToSearch)
                                    search_url="https://www.youtube.com/results?search_query="
                                    mozhdr = {'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3'}
                                    sb_url = search_url + query
                                    sb_get = requests.get(sb_url, headers = mozhdr)
                                    soupeddata = BeautifulSoup(sb_get.content, "html.parser")
                                    yt_links = soupeddata.find_all("a", class_ = "yt-uix-tile-link")
                                    x = (yt_links[1])
                                    yt_href =  x.get("href")
                                    yt_href = yt_href.replace("watch?v=", "")
                                    qx = "https://youtu.be" + str(yt_href)
                                    vid = pafy.new(qx)
                                    stream = vid.streams
                                    bestaudio = vid.getbestaudio()
                                    bestaudio.bitrate
                                    best = vid.getbest()
                                    best.resolution, best.extension
                                    for s in stream:
                                        shi = bestaudio.url
                                        me = best.url
                                        vin = s.url
                                        hasil = ""
                                        title = "Judul [ " + vid.title + " ]"
                                        author = '\n\n❂⊱• Author : ' + str(vid.author)
                                        durasi = '\n❂⊱• Duration : ' + str(vid.duration)
                                        suka = '\n❂⊱• Likes : ' + str(vid.likes)
                                        rating = '\n❂⊱• Rating : ' + str(vid.rating)
                                        deskripsi = '\n❂⊱• Deskripsi : ' + str(vid.description)
                                    client.sendImageWithURL(to, me)
                                    client.sendAudioWithURL(to, shi)
                                    client.sendMessage(to,title+ author+ durasi+ suka+ rating+ deskripsi)
                                except Exception as e:
                                    client.sendMessage(to,str(e))
                            elif terminal.startswith("retrowave "):
                                sep = text.split(" ")
                                txt = sep[1]
                                txt2 = sep[2]
                                txt3 = sep[3]
                                bgg = sep[4]
                                ttp = sep[5]
                                if bgg in ["1","2","3","4","5"] and ttp in ["1","2,","3","4","5"]:
                                    def sendPict():
                                        url = requests.get("http://corrykalam.pw/api/retrowave.php?text1={}&text2={}&text3={}&btype={}&ttype={}".format(txt,txt2,txt3,bgg,ttp))
                                        data = url.json()
                                        client.sendImageWithURL(to, data["image"])
                                    td = Thread(target=sendPict)
                                    td.daemon = True
                                    td.start()
                            elif terminal.startswith("foggingwindows "):
                                sep = text.split(" ")
                                txt = sep[1]
                                bgg = sep[2]
                                if bgg in ["1","2","3","4","5"]:
                                    def sendPict():
                                        url = requests.get("http://corrykalam.pw/api/fwindow.php?text={}&btype={}".format(txt,bgg))
                                        data = url.json()
                                        client.sendImageWithURL(to, data["image"])
                                    td = Thread(target=sendPict)
                                    td.daemon = True
                                    td.start()
                            elif terminal.startswith("neontext "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                img = "https://ari-api.herokuapp.com/neon?text={}&color=green".format(txt)
                                Thread(target=client.sendImageWithURL,args=(to, img))
                            elif terminal.startswith("ledtext "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                img = "https://ari-api.herokuapp.com/led?text={}&sign=RYN".format(txt)
                                client.sendImageWithURL(to, img)
                            elif terminal.startswith("graffity "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                def sendPict():
                                    url = requests.get("http://corrykalam.pw/api/graffiti.php?text={}".format(txt))
                                    data = url.json()
                                    client.sendImageWithURL(to, data["image"])
                                td = Thread(target=sendPict)
                                td.daemon = True
                                td.start()
                            elif terminal.startswith("streetsigns "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("http://corrykalam.pw/api/streets.php?text={}".format(txt))
                                data = url.json() 
                                ryn = Thread(target=client.sendImageWithURL,args=(to, data["image"],)).start()
                            elif terminal.startswith("writecookies "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                def sendPict():
                                    url = requests.get("http://corrykalam.pw/api/wcookies.php?text={}".format(txt))
                                    data = url.json()
                                    client.sendImageWithURL(to, data["image"])
                                td = Thread(target=sendPict)
                                td.daemon = True
                                td.start()
                            elif terminal.startswith("soupsletters "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                def sendPict():
                                    url = requests.get("http://corrykalam.pw/api/sletters.php?text={}".format(txt))
                                    data = url.json()
                                    client.sendImageWithURL(to, data["image"])
                                td = Thread(target=sendPict)
                                td.daemon = True
                                td.start()
                            elif terminal.startswith("waifu "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://botfamily.faith/api/waifu/?apikey=sourcecode&q={}".format(txt))
                                data = url.json()
                                client.sendImageWithURL(to, data["img"])
                                client.sendMessageWithFooter(to, data["title"])
                            elif terminal.startswith("cooltext "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = "https://rest.farzain.com/api/cooltext.php?text={}&apikey=oQ61nCJ2YBIP1qH25ry6cw2ba".format(txt)
                                client.sendImageWithURL(to, url)
                            elif terminal.startswith('ssweb'):
                                sep = msg.text.split(" ")
                                nazri = msg.text.replace(sep[0] + " ","")
                                Thread(target=client.sendImageWithURL(to, 'http://api.screenshotmachine.com/?key=3ae749&dimension=1920x1080&format=jpg&url='+nazri)).start()
                            elif terminal.startswith("drakor"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://api.eater.pw/drakor/{}".format(txt))
                                dat = url.json()
                                drk = "「{}」".format(txt)
                                num = 0
                                for dr in dat["result"]:
                                    num += 1
                                    drk += "\n{}.「Judul」 : {}".format(str(num),str(dr["judul"]))
                                    drk += "\n   「Link」  : {}".format(str(dr["link"]))
                                drk += "\nTotal 「{}」 Drakor".format(str(len(dat["result"])))
                                client.sendReplyMessage(msg_id, to, drk)
                            elif terminal.startswith("ztext"):
                                txt = removeCmd("ztext", text)
                                zal = zalgo.zalgo().zalgofy('{}'.format(txt))
                                client.sendMessage(to, zal)

                            elif terminal.startswith("love"):
                                sep = text.split("|")
                                you = sep[1]
                                lop = sep[2]
                                per = random.randint(1,100)
                                client.sendReplyMessage(msg_id, to, "Kecocokan {} dan {} adalah {}% :)".format(you, lop, per), contentMetadata={"MSG_SENDER_NAME":"I am Love Percenter","MSG_SENDER_ICON": "http://universeofthoughts.com/wp-content/uploads/2016/01/firstlove-flowers.jpg"})
                                if per >= 80:
                                    client.sendMessage(to, "Cocok Sekaliiiiii ^_^",contentMetadata={"MSG_SENDER_NAME":"I am Love Percenter","MSG_SENDER_ICON": "http://universeofthoughts.com/wp-content/uploads/2016/01/firstlove-flowers.jpg"})
                                if per >= 50 <= 80:
                                        client.sendMessage(to, "Selamat Anda Cocok :) <3",contentMetadata={"MSG_SENDER_NAME":"I am Love Percenter","MSG_SENDER_ICON": "http://universeofthoughts.com/wp-content/uploads/2016/01/firstlove-flowers.jpg"})
                                if per <= 50:
                                    client.sendMessage(to, "Maaf {} Sepertinya Anda Kurang TamVan".format(you),contentMetadata={"MSG_SENDER_NAME":"I am Love Percenter","MSG_SENDER_ICON": "http://universeofthoughts.com/wp-content/uploads/2016/01/firstlove-flowers.jpg"})

                            elif terminal.startswith("deviantart "):
                                sep = text.split(" ")
                                search = text.replace(sep[0] + " ","")
                                def sendPict():
                                    with requests.session() as s:
                                        s.headers['user-agent'] = 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36'
                                        r = s.get("https://xeonwz.herokuapp.com/images/deviantart.api?q={}".format(urllib.parse.quote(search)))
                                        data = r.text
                                        data = json.loads(data)
                                        if data["status"] == True:
                                            path = random.choice(data["content"])
                                            client.sendImageWithURL(to, str(path))
                                            client.sendMessage(to,"[Image Result]\nGot image in %s seconds" %(elapsed_time))
                                        else:
                                            client.sendMessage(to, "Hasil pencarian tidak ditemukan")
                                td = Thread(target=sendPict)
                                td.daemon = True
                                td.start()
                            elif terminal.startswith("ytdl "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://rest.farzain.com/api/yt_download.php?id={}&apikey=ppqeuy".format(txt))
                                data = url.json()
                                def sendVid():
                                    client.sendVideoWithURL(to, data["urls"][1]["id"])
                                td = Thread(target=sendVid)
                                td.daemon = True
                                td.start()
                            elif terminal.startswith("ytdownload "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://rest.farzain.com/api/yt_download.php?id={}&apikey=ppqeuy".format(txt))
                                data = url.json()
                                data = data["urls"][1]["id"]
                                if "\/" in data:
                                	data = data.replace("\/","/")
                                else:
                                	pass
                                zzz = google_url_shorten(data)
                                client.sendMessageMusic(to, title='Youtube', url='line://app/1603138059-k9Egggar?type=video&ocu=https://{}&piu=https://ngebotantipusing.com/hmmk.jpg'.format(zzz))
                            elif terminal == "weaboe music":
                            	def fahmi():
	                            	url = requests.get("https://fahminogameno.life/api/api/music.php")
	                            	data = url.json()
	                            	client.sendReplyMessage(msg_id, to, "Titile : {}".format(data["title"]))
	                            	client.sendReplyAudioWithURL(msg_id, to, "{}".format(data["play_url"]))
                            	ryn = Thread(target=fahmi)
                            	ryn.daemon = True
                            	ryn.start()
                            elif terminal == "stah":
                                data = {
                                      "type": "template",
                                      "altText": "[JUNGLE PANG] Let\u0027s play together!",
                                      "template": {
                                        "type": "buttons",
                                        "thumbnailImageUrl": "http://dl-channel.line.naver.jp/image/9/UgEpMv_IMAGE_80X80.png",
                                        "title": "JUNGLE PANG",
                                        "text": "Who\u0027s the best with the Almighty Hand in jungle?",
                                        "actions": [
                                          {
                                            "type": "uri",
                                            "label": "PLAY!!!",
                                            "uri": "line://app/1603968955-ORWb9RdY/?type=text&text={}".format(urllib.parse.quote("Ryn Gansss"))
                                          }
                                        ]
                                      }
                                    }
                                client.postJunglepang(to, data)
                            elif terminal == "testv2":
                            	cin = {'ALT_TEXT': 'Alooo', 'FLEX_JSON': '{"type":"bubble","styles":{"footer":{"separator":true,"separatorColor":"#DFDFDF"}},"hero":{"type":"image","url":"https://belajarc.com/linegames/battleoften/images/banner/battle.png","size":"full","aspectRatio":"16:9"},"body":{"type":"box","layout":"vertical","contents":[{"type":"text","text":"Battle Room","weight":"bold","size":"sm"},{"type":"text","text":"Battle Room dibuat dalam group ini.\\nSilahkan bergabung dalam waktu 60 detik.","size":"xs","wrap":true}]},"footer":{"type":"box","layout":"horizontal","contents":[{"type":"button","flex":3,"style":"primary","color":"#FF2B00","height":"sm","action":{"type":"postback","label":"Cek","data":"act=pjoin&id=1255"}},{"type":"button","margin":"sm","flex":5,"style":"primary","color":"#4466FF","height":"sm","action":{"type":"postback","label":"Bergabung","data":"act=join&id=1255&tim=0&tok=28091212"}}]}}', 'BOT_CHECK': '1'}
                            	client.sendMessage(to, '',cin,0)
                            elif terminal == "stahv2":
                                url = "https://api.line.me/message/v3/share"
                                data = {"to": to,"messages": [
                                    {
                                      "type": "template",
                                      "altText": "Sticker",
                                      "template": {
                                        "type": "image_carousel",
                                        "columns": [
                                          {
                                            "imageUrl": "https://stickershop.line-scdn.net/stickershop/v1/sticker/36043977/ANDROID/sticker_animation@2x.png",
                                            "action": {
                                              "type": "uri",
                                              "uri": "http://line.me/ti/p/ZUmmIIAvi6"
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  ]
                                }
                                headers = {"User-Agent": "Mozilla/5.0 (Linux; Android 8.10.1; SM-T116NU Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Safari/537.36 Line/8.13.3", "Authorization" : "Bearer eyJhbGciOiJIUzI1NiJ9.5uMcEEHahauPb5_MKAArvGzEP8dFOeVQeaMEUSjtlvMV9uuGpj827IGArKqVJhiGJy4vs8lkkseiNd-3lqST14THW-SlwGkIRZOrruV4genyXbiEEqZHfoztZbi5kTp9NFf2cxSxPt8YBUW1udeqKu2uRCApqJKzQFfYu3cveyk.GoRKUnfzfj7P2uAX9vYQf9WzVZi8MFcmJk8uFrLtTqU", "Content-Type" : "application/json"} 
                                sendPost = requests.post(url, data=json.dumps(data), headers=headers)
                                client.sendMessage(to, "{}".format(sendPost.text))
                            elif terminal.startswith("youtube "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("http://api.w3hills.com/youtube/search?keyword={}&api_key=86A7FCF3-6CAF-DEB9-E214-B74BDB835B5B".format(txt))
                                data = url.json()
                                if data["videos"] != []:
                                        ret_ = []
                                        for fn in data["videos"]:
                                                if len(ret_) >= 20:
                                                    pass
                                                else:
                                                    ret_.append({
                                                            "thumbnailImageUrl": "{}".format(fn["thumbnail"]),
                                                            "imageBackgroundColor": "#FFFFFF",
                                                            "title": "{}....".format(fn['title'][:36]),
                                                            "text": "Source : Youtube",
                                                            "actions": [
                                                                {
                                                                    "type": "uri",
                                                                    "label": "Click Me to download",
                                                                    "uri": "line://app/1603968955-ORWb9RdY/?type=text&text={}".format(urllib.parse.quote("ytdl {}".format(fn["id"])))
                                                                }
                                                            ]
                                                        }
                                                    )
                                        k = len(ret_)//10
                                        for aa in range(k+1):
                                            data = {
                                                    "type": "template",
                                                    "altText": "Youtube",
                                                    "template": {
                                                        "type": "carousel",
                                                        "columns": ret_[aa*10 : (aa+1)*10]
                                                    }
                                                }
                                            client.postTemplate(to, data)
                            elif terminal.startswith("imagehd "):
                                    query = text.replace("imagehd ","")
                                    cond = query.split("|")
                                    search = str(cond[0])
                                    result = requests.get("https://api.eater.pw/wallp/{}".format(str(search)))
                                    data = result.text
                                    data = json.loads(data)
                                    if data["result"] != []:
                                        ret_ = []
                                        for fn in data["result"]:
                                            if 'http://' in fn["link"]:
                                                pass
                                            else:
                                                if len(ret_) >= 20:
                                                    pass
                                                else:
                                                    ret_.append({
                                                        "imageUrl": "{}".format(str(fn["link"])),
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "View detail",
                                                            "uri": "{}".format(str(fn["link"]))
                                                            }
                                                        }
                                                    )
                                        k = len(ret_)//10
                                        for aa in range(k+1):
                                            data = {
                                                    "type": "template",
                                                    "altText": "Aditmadzs WallpaperHD",
                                                    "template": {
                                                        "type": "image_carousel",
                                                        "columns": ret_[aa*10 : (aa+1)*10]
                                                    }
                                                }
                                            client.postTemplate(to, data)
                            elif terminal == "testlist":
                                data = {
                                    "type": "flex",
                                    "altText": "Simisimi",
                                    "contents": {
                                        "type": "bubble",
                                        "body": {
                                            "contents": [{
                                                "contents": [{
                                                    "text": "1. sedih",
                                                    "size": "sm",
                                                    "type": "text"
                                                }, {
                                                    "url": "https://stickershop.line-scdn.net/stickershop/v1/sticker/42423/IOS/sticker.png;compress=true",
                                                    "size": "sm",
                                                    "type": "image",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://app/1600328768-y3yq64nw/?type=sticker&tstk=gg&stkid=42423&stkpkgid=2027&send=true"
                                                    }
                                                }],
                                                "layout": "horizontal",
                                                "type": "box",
                                                "flex": 1
                                            }],
                                            "layout": "vertical",
                                            "type": "box",
                                            "spacing": "md"
                                        },
                                        "header": {
                                            "contents": [{
                                                "weight": "bold",
                                                "color": "#aaaaaa",
                                                "text": "「 LIST KEYWORDZ 」",
                                                "size": "sm",
                                                "type": "text",
                                                "align": "center"
                                            }],
                                            "layout": "horizontal",
                                            "type": "box"
                                        }
                                    }
                                }
                                client.postTemplate(to, data)
                            elif terminal == "liststickert":
                              if msg._from in owner:
                                no = 0
                                ret = "Daftar Sticker Template\n\n"
                                ret_ = " "
                                sic_ = stickerstemplate
                                for sticker in stickerstemplate:
                                    no += 1
                                    ret_ += str(no) + ". " + sticker.title() + "\n"
                                if data["result"] != []:
                                        ret_ = []
                                        for fn in data["result"]:
                                            if 'http://' in fn["link"]:
                                                pass
                                            else:
                                                if len(ret_) >= 20:
                                                    pass
                                                else:
                                                    ret_.append({
                                                        "imageUrl": "{}".format(str(fn["link"])),
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "View detail",
                                                            "uri": "{}".format(str(fn["link"]))
                                                            }
                                                        }
                                                    )
                                        k = len(ret_)//10
                                        for aa in range(k+1):
                                            data = {
                                                "type": "flex",
                                                "altText": "Simisimi",
                                                "contents": {
                                                "type": "bubble",
                                                "body": {
                                                    "contents": [{
                                                        "contents": ret_[aa*10 : (aa+1)*10]
                                                        }]
                                                    },
                                                "header": {
                                                    "contents": [{
                                                        "weight": "bold",
                                                        "color": "#aaaaaa",
                                                        "text": "「 LIST KEYWORDZ 」",
                                                        "size": "sm",
                                                        "type": "text",
                                                        "align": "center"
                                                    }],
                                                    "layout": "horizontal",
                                                    "type": "box"
                                                    }
                                                }
                                            }
                                            client.postTemplate(to, data)
                            elif terminal.startswith("write "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = "line://app/1603968955-ORWb9RdY/?type=text&text={}".format(urllib.parse.quote(txt))
                                Thread(target=client.sendImageWithURL,args=(to, "https://reportnasdem.000webhostapp.com/text2image/?type=3&text={}&size=30".format(txt),)).start()
                                data = {
                                    "cc": "{}".format(settings["mycc"]), 
                                        "to": to,
                                        "messages": [
                                       {
                                            "type": "flex",
                                            "altText": "Kepo Bner Dah",
                                            "contents": {
                                                "type": "bubble",
                                                "body": {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "contents": [
                                                        {
                                                            "type": "text",
                                                            "align": "center",
                                                            "color": "#00FFF3",
                                                            "text": "{}".format(txt),
                                                            "wrap": True,
                                                            "action": {
                                                                "type": "uri",
                                                                "uri": url
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                    ]
                                }
                                client.postTemplate(to, data)
                            elif terminal.startswith("writev2"):
                                data = {
                                            "type": "flex",
                                            "altText": "Kepo Bner Dah",
                                            "contents": {
                                                "type": "bubble",
                                                "body": {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "contents": [
                                                        {
                                                            "type": "text",
                                                            "align": "center",
                                                            "color": "#00FFF3",
                                                            "text": "kentod",
                                                            "wrap": True,
                                                            "action": {
                                                                "type": "uri",
                                                                "uri": "http://instagram.com/aditmadzs1"
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        }
                                client.postTemplate(to, data)
                            elif terminal == "simi":
                                data = {
                                        "type": "flex",
                                        "altText": "Simisimi",
                                        "contents": {
                                            "type": "bubble",
                                            "hero": {
                                                "type": "image",
                                                "url": "https://image.ibb.co/mDQNqK/simisimi.jpg",
                                                "size": "full",
                                                "aspectRatio": "20:13",
                                                "aspectMode": "cover",
                                                "action": {
                                                    "type": "uri",
                                                    "uri": "line://ti/p/~mobaloghanabi"
                                                }
                                            },
                                            "body": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "contents": [
                                                    {
                                                        "type": "box",
                                                        "layout": "vertical",
                                                        "margin": "lg",
                                                        "spacing": "sm",
                                                        "contents": [
                                                            {
                                                                "type": "text",
                                                                "text": "Watashi Simi Desuka",
                                                                "weight": "bold",
                                                                "size": "sm"
                                                            },
                                                            {
                                                                "type": "text",
                                                                "text": "use 「 . 」 for using simisimi",
                                                                "size": "sm"
                                                            },
                                                            {
                                                                "type": "text",
                                                                "text": "Example 「 .hai 」",
                                                                "size": "sm"
                                                            },
                                                            {
                                                                "type": "text",
                                                                "text": "「 私を使ってくれてありがとう 」",
                                                                "size": "sm",
                                                                "weight": "bold"
                                                            }
                                                        ]
                                                    }
                                                ]
                                            },
                                            "footer": {
                                                "type": "box",
                                                "layout": "vertical",
                                                "spacing": "sm",
                                                "contents": [
                                                    {
                                                        "type": "button",
                                                        "style": "link",
                                                        "height": "sm",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "On",
                                                            "uri": "line://app/1603968955-ORWb9RdY/?type=text&text=simisimi%20on"
                                                        }                                                   
                                                    },
                                                    {
                                                        "type": "button",
                                                        "style": "link",
                                                        "height": "sm",
                                                        "action": {
                                                            "type": "uri",
                                                            "label": "Off",
                                                            "uri": "line://app/1603968955-ORWb9RdY/?type=text&text=simisimi%20off"
                                                        }                                                   
                                                    },
                                                    {
                                                        "type": "spacer",
                                                        "size": "sm",
                                                    }
                                                ],
                                                "flex": 0
                                            }
                                        }
                                    }
                                client.postTemplate(to, data)
                            elif terminal == "dit tikel":
                                url = "line://app/1602868921-NZ9qpnbL?type=anim&amp;pkgid=11392&amp;stkid=36043977,15595837,15595841,15595839,15595836,15878342,15595834,36043975,36043976,36043980,36043979,27695302,27695296,27695297,52002763,52002773,52002759,51626508,51626530,51626532,51626531,52114132,52114135,49279749,49279750,49279751,49279752,49279753,49279754,49279755,49279756,49279761,49279762,49279763,49279764,49279765,49279743,49279744,49279745"
                                data = {
                                            "type": "flex",
                                            "altText": "Big Sticker",
                                            "contents": {
                                                "type": "bubble",
                                                "hero": {
                                                    "type": "image",
                                                    "url": "https://stickershop.line-scdn.net/stickershop/v1/sticker/15356442/IOS/sticker_animation@2x.png",
                                                    "size": "full",
                                                    "aspectRatio": "20:13",
                                                    "aspectMode": "cover",
                                                    "action": {
                                                        "type": "uri",
                                                        "uri": "line://ti/p/~adit_cmct"
                                                    }
                                                },
                                                "body": {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "contents": [
                                                        {
                                                            "type": "box",
                                                            "layout": "vertical",
                                                            "margin": "lg",
                                                            "spacing": "sm",
                                                            "contents": [
                                                                {
                                                                    "type": "text",
                                                                    "text": "Tikel Gede EUY pake aja :v",
                                                                    "weight": "bold",
                                                                    "size": "sm"
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": "Tikel Gede :v",
                                                                    "size": "sm"
                                                                },
                                                                {
                                                                    "type": "text",
                                                                    "text": "「 私を使ってくれてありがとう 」",
                                                                    "size": "sm",
                                                                    "weight": "bold"
                                                                }
                                                            ]
                                                        }
                                                    ]
                                                },
                                                "footer": {
                                                    "type": "box",
                                                    "layout": "vertical",
                                                    "spacing": "sm",
                                                    "contents": [
                                                        {
                                                            "type": "button",
                                                            "style": "primary",
                                                            "color": "#00FFF3",
                                                            "height": "sm",
                                                            "action": {
                                                                "type": "uri",
                                                                "label": "Click Me",
                                                                "uri": url
                                                            }                                                   
                                                        },
                                                        {
                                                            "type": "spacer",
                                                            "size": "sm",
                                                        }
                                                    ],
                                                    "flex": 0
                                                }
                                            }
                                        }
                                client.postTemplate(to, data)
                            elif terminal.startswith("."):
                                if to in settings["simiSimi"]:
                                    sep = text.split(" ")
                                    txt = text.replace(sep[0] + ".","")
                                    url = requests.get("http://secureapp.simsimi.com/v1/simsimi/talkset?uid=254616998&av=6.8.4.8&lc=id&cc=ID&tz=Asia%2FMakassar&os=a&ak=s%2Fd6IqUSTZr4c3%2FwqMvEBHyDXhY%3D&message_sentence={}&normalProb=2&isFilter=1&talkCnt=13&talkCntTotal=13&session=znqLynp5VZ1eDp4Za25DcUGwVgAc8DeLJfEF4ujbSaSbd37BPXrNQoFsFG26zcvqeKHjwpxE6Zh7CESN9nsmWcN5&triggerKeywords=%5B%5D".format(txt))
                                    data = url.json()
                                    foto = random.choice(["https://images3.alphacoders.com/680/680776.png","https://image.ibb.co/fFq3Ze/65224.jpg","https://image.ibb.co/cPExue/65223.jpg","https://image.ibb.co/jxzmnz/65222.jpg","https://image.ibb.co/dtYCSz/65221.jpg","https://image.ibb.co/dPemnz/65217.jpg","https://image.ibb.co/cUsiZe/65214.jpg","https://3.bp.blogspot.com/-ZTWnHtvBGv0/WUQoap-Ns9I/AAAAAAAABcI/ee4UTe0M_C8YFSRg19JQcsQWiQwrQcxJwCLcBGAs/s640/820984.png","https://ih0.redbubble.net/image.397474907.7403/mp,550x550,matte,ffffff,t.3u1.jpg"])
                                    anss = ["「Megumi」 ","「Seto guchime」 ","「Hanabi」 ","「Miku」 ","「Meikyu」 "]
                                    datacon = {"MSG_SENDER_NAME":"{}".format(random.choice(anss)),"MSG_SENDER_ICON": "{}".format(foto)}
                                    client.sendReplyMessage(msg_id, to, "{}".format(data["simsimi_talk_set"]["answers"][0]["sentence"]),contentMetadata=datacon)
                            elif terminal.startswith("indoxxi"):
                                sep = text.split(" ")
                                txt = msg.text.replace(sep[0] + " ","")
                                cond = txt.split("|")
                                search = cond[0]
                                url = requests.get("https://farzain.com/api/special/indoxxi.php?id={}&apikey=ppqeuy".format(search))
                                data = url.json()
                                if len(cond) == 1:
                                    no = 0
                                    result = "╔══[ ~ IndoXXI ~ ]"
                                    for anu in data:
                                        no += 1
                                        result += "\n├≽ {}. {}".format(str(no),str(anu["title"]))
                                        result += "\n├≽ {}".format(str(anu["url"]))
                                        result += "\n├≽ {}".format(str(anu["duration"]))
                                        result += "\n├≽ {}".format(str(anu["rating"]))
                                        result += "\n├≽ {}".format(str(anu["quality"]))
                                    result += "\n╚══[ {} Film ]".format(str(len(data)))
                                    client.sendMessage(to, result)
                                    client.sendImageWithURL(to, anu["thumb"])
                                elif len(cond) == 2:
                                    num = int(cond[1])
                                    if num <= len(data):
                                        ikeh = data[num - 1]
                                        no = 0
                                        ret_ = "╔══[ ~ IndoXXI ~ ]"
                                        for anuk in ikeh:
                                            no += 1
                                            ret_ += "\n├≽{}. {}".format(str(no),str(anuk["title"]))
                                            ret_ += "\n├≽{}".format(str(anuk["url"]))
                                        ret_ += "\n╚══[ Aditmadzs ]"
                                        client.sendMessage(to, ret_)
                            elif terminal.startswith("newdrakor"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://farzain.com/api/drakortv.php?apikey=oQ61nCJ2YBIP1qH25ry6cw2ba&type=new".format(txt))
                                data = url.json()
                                no = 0
                                result = "╔══[ ~Drakor~ ]"
                                for anu in data["result"]:
                                    no += 1
                                    result += "\n├≽ {}. {}".format(str(no),str(anu["title"]))
                                    result += "\n├≽ {}".format(str(anu["link"]))
                                result += "\n╚══[ {} Drakor ]".format(str(len(data["result"])))
                                client.sendMessageWithFooter(to, result)
                            elif terminal.startswith("drakor"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://farzain.com/api/drakortv.php?apikey=oQ61nCJ2YBIP1qH25ry6cw2ba&type=search&q={}".format(txt))
                                data = url.json()
                                no = 0
                                result = "╔══[ ~Drakor~ ]"
                                for anu in data["result"]:
                                    no += 1
                                    result += "\n├≽ {}. {}".format(str(no),str(anu["title"]))
                                    result += "\n├≽ {}".format(str(anu["link"]))
                                result += "\n╚══[ {} Drakor ]".format(str(len(data["result"])))
                                client.sendMessageWithFooter(to, result)
                                client.sendImageWithURL(to, anu["img"])
                            elif terminal.startswith("stickerline "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("http://corrykalam.pw/api/lstickers.php?search={}".format(txt))
                                data = url.json()
                                no = 0
                                result = "╔══[ Sticker Line ]"
                                for anu in data["items"]:
                                    no += 1
                                    result += "\n├≽ {}. {}".format(str(no),str(anu["title"]))
                                    result += "\nhttps://store.line.me{}".format(str(anu["productUrl"]))
                                result += "\n╚══[ {} Sticker ]".format(str(len(data["items"])))
                                client.sendMessage(to, result)
                            elif terminal.startswith("themeline "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("http://corrykalam.pw/api/ltheme.php?search={}".format(txt))
                                data = url.json()
                                no = 0
                                result = "╔══[ Theme Line ]"
                                for anu in data["items"]:
                                    no += 1
                                    result += "\n├≽ {}. {}".format(str(no),str(anu["title"]))
                                    result += "\nhttps://store.line.me{}".format(str(anu["productUrl"]))
                                result += "\n╚══[ {} Tema ]".format(str(len(data["items"])))
                                client.sendMessage(to, result)
                            elif terminal.startswith("animestream "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://farzain.com/api/animestream.php?apikey=oQ61nCJ2YBIP1qH25ry6cw2ba&type=search&q={}".format(txt))
                                data = url.json()
                                no = 0
                                result = "╔══[ Anime Stream ]"
                                for anu in data["result"]:
                                    no += 1
                                    result += "\n├≽ {}. {}".format(str(no),str(anu["title"]))
                                    result += "\n├≽ Url = {}".format(str(anu["url"]))
                                    result += "\n├≽ Aired = {}".format(str(anu["aired"]))
                                    result += "\n├≽ Genre = {}".format(str(anu["genre"]))
                                    result += "\n├≽ Rating = {}".format(str(anu["info"]["score"]))
                                result += "\n╚══[ {} Anime ]".format(str(len(data["result"])))
                                client.sendMessage(to, result)
                                client.sendImageWithURL(to, anu["img"])
                            elif terminal.startswith("whois "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://arsybaiapi.herokuapp.com/knowledge={}".format(txt))
                                data = url.json()
                                contact = client.getContact(sender)
                                no = 0
                                result = "╔══[{}]".format(contact.displayName)
                                anu = data["result"]
                                no += 1
                                result += "\n├≽ {}. {}".format(str(no),(anu["name"]))
                                result += "\n├≽ Url = {}".format(anu["url"])
                                result += "\n├≽ Artikel = {}".format(anu["article"])
                                result += "\n├≽ Deskripsi = {}".format(anu["description"])
                                result += "\n╚══[ {} ]".format(anu["name"])
                                client.sendMessage(to, result)
                                client.sendImageWithURL(to, anu["img"])
                            elif terminal.startswith("1cak"):
                                url = requests.get("https://rest.farzain.com/api/1cak.php?apikey=oQ61nCJ2YBIP1qH25ry6cw2ba")
                                data = url.json()
                                contact = client.getContact(sender)
                                txt = "~ Its You ~"
                                result = "╔══[{}]".format(contact.displayName)
                                result += "\n├≽ Title = {}".format(data["title"])
                                result += "\n├≽ URL = {}".format(data["site"])
                                result += "\n╚══[ @! ]"
                                client.sendMentionWithFooter(to, txt, result, [sender])
                                client.sendImageWithURL(to, data["img"])
                            elif terminal.startswith("danbooru "):
                                sep = text.split(" ")
                                jml = int(sep[2])
                                url = requests.get("https://api.eater.pw/danbooru/{}".format(sep[1]))
                                data = url.json()
                                for x in range(jml):
                                    def anu():
                                        for anu in data["result"]:
                                            result = str(anu["img"])
                                            client.sendImageWithURL(to, result)
                                    treding = Thread(target=anu)
                                    treding.daemon = True
                                    treding.start()
                            elif terminal.startswith("prettyjson "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("{}".format(txt))
                                data = url.json()
                                data = json.dumps(data, sort_keys=False, indent=4, ensure_ascii=False)
                                client.sendMessage(to, str(data))
                            elif terminal.startswith("kbbi"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                def kbbi():
                                    url = requests.get("https://arsybaiapi.herokuapp.com/kbbi={}".format(txt))
                                    data = url.json()
                                    no = 0
                                    tex = "╭───「Kamus Besar Bahasa Indonesia」"
                                    for kbb in data["result"]:
                                        no += 1
                                        tex += "\n├≽{}. {}".format(str(no),kbb)
                                    tex += "\n╰───「 {} 」".format(client.getProfile().displayName)
                                    client.sendReplyMessage(msg_id, to, "{}".format(tex))
                                ryn = Thread(target=kbbi)
                                ryn.daemon = True
                                ryn.start()
                            elif terminal.startswith("git"):
                            	sep = text.split("|")
                            	sup = text.split(" ")
                            	url = requests.get("https://api.github.com/repos/{}/{}".format(sep[1],sep[2]))
                            	data = url.json()
                            	tex = "Repositor Id : {}".format(data["id"])
                            	tex += "\nRepositor Name : {}".format(data["name"])
                            	tex += "\nRepositor Private : {}".format(data["private"])
                            	tex += "\nName : {}".format(data["owner"]["login"])
                            	tex += "\nId : {}".format(data["owner"]["id"])
                            	tex += "\nType : {}".format(data["owner"]["type"])
                            	tex += "\nCreated at : {}".format(data["created_at"])
                            	tex += "\nUpdated at : {}".format(data["updated_at"])
                            	client.sendReplyImageWithURL(msg_id, to, "{}".format(data["owner"]["avatar_url"]))
                            	client.sendReplyMessage(msg_id, to, tex)
                            	client.sendFileWithURL(to, data["downloads_url"])
                            elif terminal == 'oa mi':
                              if sender in owner:
                              	client.sendFileWithURL(to, 'fahminogameno.life/download/amibot.zip')
                            elif terminal.startswith("aniongoing"):
                                def ea():
                                    sep = text.split(" ")
                                    txt = msg.text.replace(sep[0] + " ","")
                                    cond = txt.split("|")
                                    search = cond[0]
                                    url = requests.get("https://api.eater.pw/anime/ongoing")
                                    data = url.json()
                                    with open("aniongoing.json","r") as anime:
                                        e = json.load(anime)
                                    e = url.text
                                    e = json.loads(e)
                                    f = codecs.open("aniongoing.json","w","utf-8")
                                    json.dump(e, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    if len(cond) == 1:
                                        no = 0
                                        tex = "[Anime Ongoing]"
                                        for anim in data["result"]:
                                            no += 1
                                            tex += "\n{}. {}".format(str(no),anim["judul"])
                                        tex += "\n\n Type Aniongoing|[Num] for the Episode :)\nExample Aniongoing|1"
                                        client.sendReplyMessage(msg_id, to, tex)
                                        client.sendMessage(to, "_Notice_\nType Stream [Num]")
                                    elif len(cond) == 2:
                                        num = int(str(cond[1]))
                                        if num <= len(data["result"]):
                                            search = data["result"][num - 1]
                                            urlv2 = requests.get(search["link"])
                                            datav2 = urlv2.json()
                                            with open("aniongoing2.json") as aqw:
                                                aanime = json.load(aqw)
                                            d = urlv2.text
                                            d = json.loads(d)
                                            q = codecs.open("aniongoing2.json","w","utf-8")
                                            json.dump(d, q, sort_keys=True, indent=4, ensure_ascii=False)
                                            nov2 = 0
                                            texv2 = "[Anime Ongoing Eps]"
                                            for qiwek in datav2["result"]:
                                                nov2 += 1
                                                texv2 += "\n{}. {}".format(str(nov2),qiwek["judul"])
                                            texv2 += "\n\n _Notice_\nType Streamv2 [Num]"
                                            client.sendReplyMessage(msg_id, to, texv2)
                                ryn = Thread(target=ea)
                                ryn.daemon = True
                                ryn.start()
                            elif terminal.startswith("mangaindo"):
                                with requests.session() as web:
                                    web.headers["user-agent"] = "Mozilla/5.0"
                                    url = web.get("https://mangaindo.web.id/")
                                    data = BeautifulSoup(url.content, "html5lib")
                                    datapost = []
                                    for listPost in data.findAll("li", {"class":"rpwe-li rpwe-clearfix"}):
                                        for detailsPost in listPost.findAll("a"):
                                            title = detailsPost.text
                                            url = detailsPost["href"]
                                        for detailsDate in listPost.findAll("time", {"class":"rpwe-time published"}):
                                            release = detailsDate.text
                                            datapost.append({"title": title, "release": release, "url":url})
                                    result = {
                                        "code": 200,
                                        "result": datapost
                                    }
                                    datav = json.dumps(result, indent=4, sort_keys=False)
                                    client.sendMessage(to, str(datav))                  
                            elif terminal.startswith("mangaindopost"):
                                with requests.session() as web:
                                    web.headers["user-agent"] = "Mozilla/5.0"
                                    url = web.get("https://mangaindo.web.id/ghosts-wife-chapter-36/")
                                    data = BeautifulSoup(url.content, "html5lib")
                                    datapost = []
                                    for listImage in data.findAll("p"):
                                        for urlImage in listImage.findAll("img"):
                                            image = urlImage["src"]
                                            datapost.append(image)
                                    result = {
                                        "code": 200,
                                        "image": datapost
                                    }
                                    datav = json.dumps(result, indent=4, sort_keys=False)
                                    client.sendMessage(to, str(datav))
                            elif terminal.startswith("doujins"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                website = requests.get("https://doujins.com/searches?words={}&page=1".format(txt))
                                data = BeautifulSoup(website.content, "lxml")
                                dataDoujins = []
                                for ListAllDoujins in data.findAll("div", {"class":"col-xs-6 col-sm-4 col-md-3 col-lg-2"}):
                                    for anu in ListAllDoujins.findAll("img"):
                                        url = "{}".format(anu["src"])
                                        ryn = Thread(target=client.sendImageWithURL,args=(to, url,)).start()
                                        with open('errorLog.txt', 'w') as er:
                                            error = er.write("")
                            elif terminal.startswith("lazada "):
                            	sep = text.split(" ")
                            	txt = text.replace(sep[0] + " ","")
                            	header = {'User-Agent':'Mozilla/5.0'}
                            	url = requests.get("https://www.facebook.com/razlayd", header)
                            	data = BeautifulSoup(url.content, "lxml")
                            	dataLazada = []
                            	for listLazada in data.findAll("a", {"class":"_1nv3 _1nv5 profilePicThumb"}):
                            		client.sendMessage(to, "{}".format(listLazada))
                            elif terminal.startswith("sms "):
                                sep = text.split(" ")
                                sup = text.split("|")
                                url = requests.get("https://v1.mazterin.com/free_sms_sender.php?no=%s&pesan=%s&key=6d363479c97439b921ad2bcba054992d8eda9a0c&" % (sep[1], sup[1]))
                                client.sendMessage(to, '%s' % url)
                            elif terminal == "generate":
                            	sw = client.generateReplyMessage(msg_id)
                            	client.sendMessage(to, '%s' % sw)
                            elif terminal == "print op":
                                client.sendMessage(to, '%s' % msg)
                            elif terminal == "read count":
                            	sw = searchRecentMessages(to, msg.relatedMessageId)
                            	client.sendMessage(to, '%s' % sw)
                            elif terminal == "test3":
                            	client.sendLocation(to, "mataram",8.5971, 116.1005)
                            elif terminal == "test4":
                                data = {'ctl00$contentCenter$edNama':'Aldi Pra Febriyan','ctl00$contentCenter$edTmptLahir':'Mataram','ctl00$contentCenter$edTglLahir':'31 januari 2002','ctl00$contentCenter$RadButton2_input':'Cari'}
                                r = requests.post('http://nisn.data.kemdikbud.go.id/page/data?nama=aldi%20pra%20febriyan')
                                client.sendMessage(to, '%s' % r.text)
                            elif terminal == "adw":
                                client.sendMessage(to, '', {'width': '145', 'packageId': '11537', 'cafeId': '0', 'serviceType': 'GB', 'postEndUrl': 'line://group/home/posts/post?homeId=c3483a0f7db573434b9cd63c464476dcc&postId=1153829664718079492', 'packageVersion': '1', 'text': 'Sip', 'contentType': 'P', 'height': '150', 'stickerId': '52002735', 'mediaType': 'S', 'locKey': 'BG'})
                            elif terminal.startswith("setan "):
                            	txt = removeCmd("setan", text)
                            	url = requests.get("http://fahminogameno.life/text.php?q={}".format(txt))
                            	data = url.json()
                            	babi = '%s' % data[0]["nama"]
                            	babi += '\n%s' % data[0]["keyword"]
                            	babi += '\n%s' % data[0]["text"]
                            	babi += '\n%s' % data[0]["warna"]
                            	client.sendMessage(to, babi)
                            	client.sendImageWithURL(to, 'http://fahminogameno.life/flexx/images/%s' % data[0]["image"])
                            #elif terminal == "speedv2":
                             #   anu = subprocess.check_output("cd /root && chmod +x speedtest.py && ./speedtest.py --share", shell=True)
                              #  x = anu.decode("utf-8")
                               # print (x)
                            elif terminal.startswith("urlshort "):
                                txt = removeCmd("urlshort", text)
                                if '\/' in txt:
                                    txt = txt.replace('\/','/')
                                else:
                                    pass
                                url = google_url_shorten(txt)
                                client.sendMessage(to, url)
                            elif terminal.startswith("tinyurl "):
                                txt = removeCmd("tinyurl", text)
                                url = 'https://tinyurl.com/create.php?source=indexpage&url={}&submit=Make+TinyURL%21&alias='.format(txt)
                                header = {'User-Agent':'Mozilla/5.0'}
                                get = requests.get(url, headers = header)
                                bss = BeautifulSoup(get.text,'lxml')
                                isi = bss.findAll("a")
                                isi = isi[9]["href"]
                                client.sendMessage(to, '%s' % isi)
                            elif terminal == "test2":
                                url = "https://www.facebook.com/razlayd"
                                header = {'User-Agent':'Mozilla/5.0'}
                                get = requests.get(url, headers = header)
                                bss = BeautifulSoup(get.content,'lxml')
                                isi = bss.findAll('a')
                                client.sendMessage(to, "{}".format(isi))
                            elif terminal.startswith("belajar scrap"):
                                url = "https://github.com/muhmursalind/helloworld"
                                header = {'User-Agent':'Mozilla/5.0'}
                                get = requests.get(url, headers = header)
                                bss = BeautifulSoup(get.text,'lxml')
                                isi = bss.findAll("meta", {"content"})
                                client.sendMessage(to, "{}".format(isi))
                            elif terminal.startswith("scrap"):
                                url = "https://kbbi.kemdikbud.go.id/entri/Binal"
                                header = {'User-Agent':'Mozilla/5.0'}
                                get = requests.get(url, headers = header)
                                bss = BeautifulSoup(get.content, 'lxml')
                                isi = bss.find_all('li')
                                client.sendMessage(to, "{}".format(isi))
                            elif terminal.startswith("wallhd"):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                def a():
                                    result = requests.get("https://api.eater.tech/wallp/{}".format(txt))
                                    data = result.text
                                    data = json.loads(data)
                                    for wall in data["result"]:
                                        client.sendImageWithURL(to, "{}".format(wall["link"]))
                                ryn = Thread(target=a)
                                ryn.daemon = True
                                ryn.start()
                            elif terminal.startswith("stream"):
                                with open("aniongoing.json","r") as anime:
                                    e = json.load(anime)
                                dan = text.split(" ")
                                an = e["result"]
                                def eq():
                                    sup = an[int(dan[1])-1]
                                    url = requests.get("{}".format(sup['link']))
                                    data = url.json()
                                    urlv2 = requests.get("{}".format(data["result"][0]["link"]))
                                    datav2 = urlv2.json()
                                    urlv3 = '{}'.format(datav2["result"][0]["link"])
                                    header = {'User-Agent':'Line/7.18.1'}
                                    getv2 = requests.get(urlv3, headers = header)
                                    spd = BeautifulSoup(getv2.content, "html.parser")
                                    isi = spd.find('source').get('src')
                                    client.sendMessage(to, "Sorry Kalo Lamaa :)))")
                                    client.sendVideoWithURL(to, isi)
                                ryn = Thread(target=eq)
                                ryn.daemon = True
                                ryn.start()
                            elif terminal.startswith("testv5"):
                                with open("aniongoing.json","r") as anime:
                                    e = json.load(anime)
                                dan = text.split(" ")
                                an = e["result"]
                                def eq():
                                    sup = an[int(dan[1])-1]
                                    url = requests.get("{}".format(sup['link']))
                                    data = url.json()
                                    urlv2 = requests.get("{}".format(data["result"][0]["link"]))
                                    datav2 = urlv2.json()
                                    print(datav2["result"][1]["link"])
                                    ini = datav2["result"][1]["link"]
                                    urlv3 = '{}'.format(ini)
                                    header = {'User-Agent':"Mozilla/5.0"}
                                    getv2 = requests.get(urlv3, headers = header)
                                    spd = BeautifulSoup(getv2.text, "lxml")
                                    print(spd)
                                    client.sendMessage(to, "{}".format(spd))
                                ryn = Thread(target=eq)
                                ryn.daemon = True
                                ryn.start()
                            elif terminal.startswith("streamv2"):
                                with open("aniongoing2.json","r") as anime:
                                    e = json.load(anime)
                                dan = text.split(" ")
                                an = e["result"]
                                def eq():
                                    sup = an[int(dan[1])-1]
                                    url = requests.get("{}".format(sup['link']))
                                    data = url.json()
                                    urlv2 = requests.get("{}".format(data["result"][0]["link"]))
                                    datav2 = urlv2.json()
                                    urlv3 = '{}'.format(datav2["result"][0]["link"])
                                    header = {'User-Agent':'Line/7.18.1'}
                                    getv2 = requests.get(urlv3, headers = header)
                                    spd = BeautifulSoup(getv2.content, "html.parser")
                                    isi = spd.find('source').get('src')
                                    client.sendMessage(to, "Sorry Kalo Lamaa :)))")
                                    client.sendVideoWithURL(to, isi)
                                ryn = Thread(target=eq)
                                ryn.daemon = True
                                ryn.start()
                            elif terminal.startswith("say-"):
                                sep = text.split("-")
                                sep = sep[1].split(" ")
                                lang = sep[0]
                                if settings["setKey"] == False:
                                    txt = text.lower().replace("say-" + lang + " ","")
                                else:
                                    txt = text.lower().replace(settings["keyCommand"] + "say-" + lang + " ","")
                                if lang not in language["gtts"]:
                                    return client.sendMessage(to, "Bahasa {} tidak ditemukan".format(lang))
                                tts = gTTS(text=txt, lang=lang)
                                tts.save("LineAPI/tmp/tts-{}.mp3".format(lang))
                                client.sendReplyAudio(msg_id, to, "LineAPI/tmp/tts-{}.mp3".format(lang))
                                client.deleteFile("LineAPI/tmp/tts-{}.mp3".format(lang))
                            elif terminal.startswith("searchyoutube "):
                                sep = text.split(" ")
                                txt = msg.text.replace(sep[0] + " ","")
                                cond = txt.split("|")
                                search = cond[0]
                                url = requests.get("http://api.w3hills.com/youtube/search?keyword={}&api_key=86A7FCF3-6CAF-DEB9-E214-B74BDB835B5B".format(search))
                                data = url.json()
                                if len(cond) == 1:
                                    no = 0
                                    result = "╔══[ Youtube Search ]"
                                    for anu in data["videos"]:
                                        no += 1
                                        result += "\n├≽ {}. {}".format(str(no),str(anu["title"]))
                                        result += "\n├≽ {}".format(str(anu["webpage"]))
                                    result += "\n╚══[ Total {} Result ]".format(str(len(data["videos"])))
                                    client.sendMessage(to, result)
                                elif len(cond) == 2:
                                    num = int(str(cond[1]))
                                    if num <= len(data):
                                        search = data["videos"][num - 1]
                                        ret_ = "╔══[ Youtube Info ]"
                                        ret_ += "\n├≽ Channel : {}".format(str(search["publish"]["owner"]))
                                        ret_ += "\n├≽ Title : {}".format(str(search["title"]))
                                        ret_ += "\n├≽ Release : {}".format(str(search["publish"]["date"]))
                                        ret_ += "\n├≽ Viewers : {}".format(str(search["stats"]["views"]))
                                        ret_ += "\n├≽ Likes : {}".format(str(search["stats"]["likes"]))
                                        ret_ += "\n├≽ Dislikes : {}".format(str(search["stats"]["dislikes"]))
                                        ret_ += "\n├≽ Rating : {}".format(str(search["stats"]["rating"]))
                                        ret_ += "\n├≽ Description : {}".format(str(search["description"]))
                                        ret_ += "\n╚══[ {} ]".format(str(search["webpage"]))
                                        client.sendImageWithURL(to, str(search["thumbnail"]))
                                        client.sendMessage(to, str(ret_))
                            elif terminal.startswith("searchimage "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                url = requests.get("https://rest.farzain.com/api/gambarg.php?id={}&apikey=VBbUElsjMS84rXUO7wRlIwjFm".format(txt))
                                data = url.json()
                                client.sendImageWithURL(to, data["url"])
                            elif terminal.startswith("soundcloud "):
                                def sdc():
                                    kitsunesplit = rynSplitText(msg.text.lower()).split("|")
                                    r = requests.get('https://soundcloud.com/search?q={}'.format(rynSplitText(msg.text.lower())))
                                    soup = BeautifulSoup(r.text,'html5lib')
                                    data = soup.find_all(class_='soundTitle__titleContainer')
                                    data = soup.select('li > h2 > a')
                                    if len(kitsunesplit) == 1:
                                        a = ' 「 Soundcloud 」';no=0
                                        for b in data:
                                            no+=1
                                            a+= '\n{}. {}'.format(no,b.text)
                                        client.sendMessage(to,a)
                                    if len(kitsunesplit) == 2:
                                        a = data[int(kitsunesplit[1])-1];b = list(a)[0]
                                        kk = random.randint(0,999)
                                        client.sendMessage(to,' 「 Soundcloud 」\nJudul: {}\nStatus: Waiting... For Upload'.format(a.text))
                                        hh=subprocess.getoutput('youtube-dl --extract-audio --audio-format mp3 --output {}.mp3 {}'.format(kk,'https://soundcloud.com{}'.format(a.get('href'))))
                                        try:client.sendAudio(to,'{}.mp3'.format(kk))
                                        except Exception as e:client.sendMessage(to,' 「 ERROR 」\nJudul: {}\nStatus: {}\nImportant: Try again'.format(a.text,e))
                                        os.remove('{}.mp3'.format(kk))
                                ryn = Thread(target=sdc)
                                ryn.daemon = True
                                ryn.start()
                                ryn.join()

                            elif terminal.startswith("searchlyric "):
                                sep = text.split(" ")
                                txt = text.replace(sep[0] + " ","")
                                cond = txt.split("|")
                                query = cond[0]
                                with requests.session() as web:
                                    web.headers["user-agent"] = "Mozilla/5.0"
                                    url = web.get("https://www.musixmatch.com/search/{}".format(urllib.parse.quote(query)))
                                    data = BeautifulSoup(url.content, "html.parser")
                                    result = []
                                    for trackList in data.findAll("ul", {"class":"tracks list"}):
                                        for urlList in trackList.findAll("a"):
                                            title = urlList.text
                                            url = urlList["href"]
                                            result.append({"title": title, "url": url})
                                    if len(cond) == 1:
                                        ret_ = "╔══[ Musixmatch Result ]"
                                        num = 0
                                        for title in result:
                                            num += 1
                                            ret_ += "\n├≽ {}. {}".format(str(num), str(title["title"]))
                                        ret_ += "\n╚══[ Total {} Lyric ]".format(str(len(result)))
                                        ret_ += "\n\nUntuk melihat lyric, silahkan gunakan command {}SearchLyric {}|「number」".format(str(setKey), str(query))
                                        client.sendMessage(to, ret_)
                                    elif len(cond) == 2:
                                        num = int(cond[1])
                                        if num <= len(result):
                                            data = result[num - 1]
                                            with requests.session() as web:
                                                web.headers["user-agent"] = "Mozilla/5.0"
                                                url = web.get("https://www.musixmatch.com{}".format(urllib.parse.quote(data["url"])))
                                                data = BeautifulSoup(url.content, "html5lib")
                                                for lyricContent in data.findAll("p", {"class":"mxm-lyrics__content "}):
                                                    lyric = lyricContent.text
                                                    client.sendMessage(to, lyric)
                            elif terminal == "test1":
                                g = client.getPreviousMessagesV2WithReadCount(to, msg_id, messagesCount = 50)
                                client.sendMessage(to, "{}".format(g))
                            elif terminal == "jp":
                                g = searchRecentMessages(to, msg.relatedMessageId)
                                if g == None:
                                	g = client.sendMessage(to,"None Recent Messages ") 
                                else: 
                                	txt = "{}".format(g.text)
                                	contact = client.getContact(g._from)
                                	def tr():
	                                	url = requests.get("https://api.dzin.tech/api/google/translate/?apikey=beta&language=ja&text={}".format(txt))
	                                	data = url.json()
	                                	client.sendReplyMessage(g.id, to, "{}".format(data["result"]["to_text"]), contentMetadata={"MSG_SENDER_NAME": "{} 「 翻訳 」".format(contact.displayName),"MSG_SENDER_ICON": "http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus)})
	                                Thread(target=tr).start()
                            elif terminal == "en":
                                g = searchRecentMessages(to, msg.relatedMessageId)
                                if g == None:
                                	g = client.sendMessage(to,"None Recent Messages ") 
                                else: 
                                	txt = "{}".format(g.text)
                                	contact = client.getContact(g._from)
                                	def tr():
	                                	url = requests.get("https://api.dzin.tech/api/google/translate/?apikey=beta&language=en&text={}".format(txt))
	                                	data = url.json()
	                                	client.sendReplyMessage(g.id, to, "{}".format(data["result"]["to_text"]), contentMetadata={"MSG_SENDER_NAME": "{} 「 Translate 」".format(contact.displayName),"MSG_SENDER_ICON": "http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus)})
	                                Thread(target=tr).start()
                            elif terminal == "id":
                                g = searchRecentMessages(to, msg.relatedMessageId)
                                if g == None:
                                	g = client.sendMessage(to,"None Recent Messages ") 
                                else: 
                                	txt = "{}".format(g.text)
                                	contact = client.getContact(g._from)
                                	def tr():
	                                	url = requests.get("https://api.dzin.tech/api/google/translate/?apikey=beta&language=id&text={}".format(txt))
	                                	data = url.json()
	                                	client.sendReplyMessage(g.id, to, "{}".format(data["result"]["to_text"]), contentMetadata={"MSG_SENDER_NAME": "{} 「 Terjemahan 」".format(contact.displayName),"MSG_SENDER_ICON": "http://dl.profile.line-cdn.net/{}".format(contact.pictureStatus)})
	                                Thread(target=tr).start()
                            elif terminal.startswith("tr-"):
                                sep = text.split("-")
                                sep = sep[1].split(" ")
                                lang = sep[0]
                                if settings["setKey"] == False:
                                    txt = text.lower().replace("tr-" + lang + " ","")
                                else:
                                    txt = text.lower().replace(settings["keyCommand"] + "tr-" + lang + " ","")
                                if lang not in language["googletrans"]:
                                    return client.sendMessage(to, "Bahasa {} tidak ditemukan".format(lang))
                                def trs():
                                    url = requests.get("https://api.dzin.tech/api/google/translate/?apikey=beta&language={}&text={}".format(lang, txt))
                                    data = url.json()
                                    client.sendReplyMessage(msg_id, to, "{}".format(data["result"]["to_text"]))
                                ryn = Thread(target=trs)
                                ryn.daemon = True
                                ryn.start()
                            if text.lower() == "mykey":
                                client.sendMessage(to, "Keycommand yang diset saat ini : 「{}」".format(str(settings["keyCommand"])))
                            elif text.lower() == "setkey on":
                              if msg._from in owner:
                                if settings["setKey"] == True:
                                    client.sendMessage(to, "Setkey telah aktif")
                                else:
                                    settings["setKey"] = True
                                    client.sendMessage(to, "Berhasil mengaktifkan setkey")
                            elif text.lower() == "setkey off":
                              if msg._from in owner:
                                if settings["setKey"] == False:
                                    client.sendMessage(to, "Setkey telah nonaktif")
                                else:
                                    settings["setKey"] = False
                                    client.sendMessage(to, "Berhasil menonaktifkan setkey")
                            if text is None: return
                            if "/ti/g/" in msg.text.lower():
                                if settings["autoJoinTicket"] == True:
                                    link_re = re.compile('(?:line\:\/|line\.me\/R)\/ti\/g\/([a-zA-Z0-9_-]+)?')
                                    links = link_re.findall(text)
                                    n_links = []
                                    for l in links:
                                        if l not in n_links:
                                            n_links.append(l)
                                    for ticket_id in n_links:
                                        group = client.findGroupByTicket(ticket_id)
                                        client.acceptGroupInvitationByTicket(group.id,ticket_id)
                                        client.sendMessage(to, "Berhasil masuk ke group %s" % str(group.name))
                        elif msg.contentType == 2:
                            if settings["changeDual"] == True:
                                def cvp():
                                    client.downloadObjectMsg(msg_id, saveAs="LineAPI/tmp/cvp.mp4")
                                    client.sendMessage(to, "Send Pict :)")
                                td = Thread(target=cvp)
                                td.daemon = True
                                td.start()
                        elif msg.contentType == 1:
                            if settings["changeDual"] == True:
                                def change():
                                    pict = client.downloadObjectMsg(msg_id, saveAs="LineAPI/tmp/{}-cpp.bin".format(time.time()))
                                    settings["changeDual"] = False
                                    client.updateVideoAndPictureProfile(pict, "LineAPI/tmp/cvp.mp4")
                                    client.sendMessage(to, "Succesfully change video & picture profile")
                                    client.deleteFile(pict)
                                    client.deleteFile("LineAPI/tmp/cvp.mp4")
                                td = Thread(target=change)
                                td.daemon = True
                                td.start()
                            if to in settings["decode"]:
                                generateLink(to, msg_id)
                            if to in settings["watercolor"] == True:
                                uploadFile(msg_id)
                                client.sendImageWithURL(to, 'http://ari-api.herokuapp.com/watercolor?type=2&rancol=on&url={}'.format(urlEncode("https://fahminogameno.life/uploadimage/images/ryngenerate.jpg")))
                            if to in settings["drawink"]:
                            	uploadFile(msg_id)
                            	client.sendImageWithURL(to, 'http://ari-api.herokuapp.com/ink?url='.format(urlEncode("https://fahminogameno.life/uploadimage/images/ryngenerate.png")))
                            if msg.toType == 2 or msg.toType == 1 or msg.toType == 0:
                              if msg._from in owner:
                                if settings["addImage"]["status"] == True:
                                    path = client.downloadObjectMsg(msg_id, saveAs="LineAPI/tmp/{}-add.bin".format(str(settings["addImage"]["name"])))
                                    images[settings["addImage"]["name"]] = {"IMAGE":str(path)}
                                    f = codecs.open("image.json","w","utf-8")
                                    json.dump(images, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessage(msg.to, "Succesfully add Image With Keyword {}".format(str(settings["addImage"]["name"])))
                                    settings["addImage"]["status"] = False                
                                    settings["addImage"]["name"] = ""
                            if msg.toType == 2 or msg.toType == 1 or msg.toType == 0:
                                if settings["changePictureProfile"] == True:
                                    path = client.downloadObjectMsg(msg_id, saveAs="LineAPI/tmp/{}-cpp.bin".format(time.time()))
                                    settings["changePictureProfile"] = False
                                    client.updateProfilePicture(path)
                                    client.sendMessage(to, "Berhasil mengubah foto profile")
                                    client.deleteFile(path)
                            if msg.toType == 2 or msg.toType == 1 or msg.toType == 0:
                                if to in settings["changeGroupPicture"]:
                                    path = client.downloadObjectMsg(msg_id, saveAs="LineAPI/tmp/{}-cgp.bin".format(time.time()))
                                    settings["changeGroupPicture"].remove(to)
                                    client.updateGroupPicture(to, path)
                                    client.sendMessage(to, "Berhasil mengubah foto group")
                                    client.deleteFile(path)
                            if msg.toType == 2:
                                if settings["changeCover"] == True:
                                    path = client.downloadObjectMsg(msg_id, saveAs="LineAPI/tmp/{}-cv.bin".format(time.time()))
                                    settings["changeCover"] = False
                                    client.updateProfileCover(path)
                                    client.sendMessage(to, "Berhasil mengubah cover profile")
                                    client.deleteFile(path)
                        elif msg.contentType == 2:
                            if settings["changeVpProfile"] == True:
                                path = client.downloadObjectMsg(msg_id, saveAs="LineAPI/tmp/{}-cvp.mp4".format(time.time()))
                                settings["changeVpProfile"] = False
                                changeVideoAndPictureProfile(path)
                                client.sendMessage(to, "Berhasil mengubah video profile")
                                client.deleteFile(path)
                        elif msg.contentType == 7:
                            if settings["checkSticker"] == True:
                                stk_id = msg.contentMetadata['STKID']
                                stk_ver = msg.contentMetadata['STKVER']
                                pkg_id = msg.contentMetadata['STKPKGID']
                                ret_ = "╔══[ Sticker Info ]"
                                ret_ += "\n├≽ STICKER ID : {}".format(stk_id)
                                ret_ += "\n├≽ STICKER PACKAGES ID : {}".format(pkg_id)
                                ret_ += "\n├≽ STICKER VERSION : {}".format(stk_ver)
                                ret_ += "\n├≽ STICKER URL : line://shop/detail/{}".format(pkg_id)
                                ret_ += "\n╚══[ Finish ]"
                                client.sendMessage(to, str(ret_))
                            if to in settings["sticker"]:
                                if 'STKOPT' in msg.contentMetadata:
                                    stk_id = msg.contentMetadata['STKID']
                                    stc = "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker_animation@2x.png".format(stk_id)
                                else:
                                    stk_id = msg.contentMetadata['STKID']
                                    stc = "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker.png".format(stk_id)
                                data = {
                                    "type": "template",
                                    "altText": "{} sent a sticker".format(client.getProfile().displayName),
                                    "template": {
                                        "type": "image_carousel",
                                        "columns": [
                                            {
                                                "imageUrl": "{}".format(stc),
                                                "size": "full", 
                                                "action": {
                                                    "type": "uri",
                                                    "uri": "http://instagram.com/aditmadzs1"
                                                }
                                            }
                                        ]
                                    }
                                }
                                client.postTemplate(to, data)
                            if msg.toType == 2:    
                              if msg._from in owner:
                                if settings["addSticker"]["status"] == True:
                                    stickers[settings["addSticker"]["name"]] = {"STKID":msg.contentMetadata["STKID"],"STKVER":msg.contentMetadata['STKVER'], "STKPKGID":msg.contentMetadata["STKPKGID"]}
                                    f = codecs.open("sticker.json","w","utf-8")
                                    json.dump(stickers, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessageWithFooter(to, "Succesfully add sticker with keyword >> {} ".format(str(settings["addSticker"]["name"])))
                                    settings["addSticker"]["status"] = False                
                                    settings["addSticker"]["name"] = ""
                            if msg.toType == 2:
                              if sender in ssnd:
                                if settings["addStickertemplate"]["statuss"] == True:
                                    stickerstemplate[settings["addStickertemplate"]["namee"]] = {"STKID":msg.contentMetadata["STKID"],"STKVER":msg.contentMetadata['STKVER'], "STKPKGID":msg.contentMetadata["STKPKGID"]}
                                    f = codecs.open("stickertemplate.json","w","utf-8")
                                    json.dump(stickerstemplate, f, sort_keys=True, indent=4, ensure_ascii=False)
                                    client.sendMessageWithFooter(to, "Succesfully add sticker template with keyword >> {} ".format(str(settings["addStickertemplate"]["namee"])))
                                    settings["addStickertemplate"]["statuss"] = False                
                                    settings["addStickertemplate"]["namee"] = ""
                        elif msg.contentType == 13:
                            if settings["checkContact"] == True:
                                try:
                                    contact = client.getContact(msg.contentMetadata["mid"])
                                    cover = client.getProfileCoverURL(msg.contentMetadata["mid"])
                                    ret_ = "╔══[ Details Contact ]"
                                    ret_ += "\n├≽ Nama : {}".format(str(contact.displayName))
                                    ret_ += "\n├≽ MID : {}".format(str(msg.contentMetadata["mid"]))
                                    ret_ += "\n├≽ Bio : {}".format(str(contact.statusMessage))
                                    ret_ += "\n├≽ Gambar Profile : http://dl.profile.line-cdn.net/{}".format(str(contact.pictureStatus))
                                    ret_ += "\n├≽ Gambar Cover : {}".format(str(cover))
                                    ret_ += "\n╚══[ Finish ]"
                                    client.sendImageWithURL(to, "http://dl.profile.line-cdn.net/{}".format(str(contact.pictureStatus)))
                                    client.sendMessage(to, str(ret_))
                                except:
                                    client.sendMessage(to, "Kontak tidak valid")
                            if sender in owner:
                                if settings["delFriend"] == True:
                                    client.deleteContact(msg.contentMetadata["mid"])
                                    client.sendReplyMention(msg_id, to, "Udh Euyyy @!", [sender])
                                if settings["cloneContact"] == True:
                                    client.cloneContactProfile(msg.contentMetadata["mid"])
                                    client.sendMessage(to, "Succes clone profile")
                                    settings["cloneContact"] = False
                                if settings["contactBan"] == True:
                                    ban = msg.contentMetadata["mid"]
                                    hey = client.getContact(ban).displayName
                                    settings["blackList"][ban] = True
                                    f=codecs.open('setting.json','w','utf-8')
                                    json.dump(settings, f, sort_keys=True, indent=4,ensure_ascii=False)
                                    settings["contactBan"] = False
                                    client.sendMessage(to, "Succesfully add {} to Blacklist".format(hey))
                                else:
                                    if settings["contactBan"] == True:
                                        if settings["blackList"][ban] == True:
                                            client.sendMessage(to, "The Contact has been BANNED !!!")
                                if settings["unbanContact"] == True:
                                    ban = msg.contentMetadata["mid"]
                                    hey = client.getContact(ban).displayName
                                    del settings["blackList"][ban]
                                    f=codecs.open('setting.json','w','utf-8')
                                    json.dump(settings, f, sort_keys=True, indent=4,ensure_ascii=False)
                                    client.sendMessage(to, "Succesfully Del {} in Blacklist".format(hey))
                                    settings["unbanContact"] = False
                                    if msg.contentMetadata["mid"] not in settings["blackList"]:
                                        client.sendMessage(to, "The Contact Isn't in Banned List")
                        elif msg.contentType == 16:
                            if settings["checkPost"] == True:
                                try:
                                    ret_ = "╔══[ Details Post ]"
                                    if msg.contentMetadata["serviceType"] == "GB":
                                        contact = client.getContact(sender)
                                        auth = "\n├≽ Penulis : {}".format(str(contact.displayName))
                                    else:
                                        auth = "\n├≽ Penulis : {}".format(str(msg.contentMetadata["serviceName"]))
                                    purl = "\n├≽ URL : {}".format(str(msg.contentMetadata["postEndUrl"]).replace("line://","https://line.me/R/"))
                                    ret_ += auth
                                    ret_ += purl
                                    if "mediaOid" in msg.contentMetadata:
                                        object_ = msg.contentMetadata["mediaOid"].replace("svc=myhome|sid=h|","")
                                        if msg.contentMetadata["mediaType"] == "V":
                                            if msg.contentMetadata["serviceType"] == "GB":
                                                ourl = "\n├≽ Objek URL : https://obs-us.line-apps.com/myhome/h/download.nhn?tid=612w&{}".format(str(msg.contentMetadata["mediaOid"]))
                                                murl = "\n├≽ Media URL : https://obs-us.line-apps.com/myhome/h/download.nhn?{}".format(str(msg.contentMetadata["mediaOid"]))
                                            else:
                                                ourl = "\n├≽ Objek URL : https://obs-us.line-apps.com/myhome/h/download.nhn?tid=612w&{}".format(str(object_))
                                                murl = "\n├≽ Media URL : https://obs-us.line-apps.com/myhome/h/download.nhn?{}".format(str(object_))
                                            ret_ += murl
                                        else:
                                            if msg.contentMetadata["serviceType"] == "GB":
                                                ourl = "\n├≽ Objek URL : https://obs-us.line-apps.com/myhome/h/download.nhn?tid=612w&{}".format(str(msg.contentMetadata["mediaOid"]))
                                            else:
                                                ourl = "\n├≽ Objek URL : https://obs-us.line-apps.com/myhome/h/download.nhn?tid=612w&{}".format(str(object_))
                                        ret_ += ourl
                                    if "stickerId" in msg.contentMetadata:
                                        stck = "\n├≽ Stiker : https://line.me/R/shop/detail/{}".format(str(msg.contentMetadata["packageId"]))
                                        ret_ += stck
                                    if "text" in msg.contentMetadata:
                                        text = "\n├≽ Tulisan : {}".format(str(msg.contentMetadata["text"]))
                                        ret_ += text
                                    ret_ += "\n╚══[ Finish ]"
                                    client.sendMessage(to, str(ret_))
                                except:
                                    client.sendMessage(to, "Post tidak valid")
                            if msg.toType in (2,1,0):
                                purl = msg.contentMetadata["postEndUrl"].split('userMid=')[1].split('&postId=')
                                adw = client.likePost(purl[0], purl[1], random.choice([1001,1002,1003,1004,1005]))
                                adws = client.createComment(purl[0], purl[1], settings["commentPost"])
                                client.sendMessage(to, "Done Liked !")
            except Exception as error:
                logError(error)

        if op.type in (25,26):
          if to in settings["sniff"]:
            try:
                print(msg.contentMetadata)
                msg = op.message
                text = str(msg.text)
                msg_id = msg.id
                receiver = msg.to
                sender = msg._from
                if msg.toType == 0 or msg.toType == 1 or msg.toType == 2:
                    if msg.toType == 0:
                        if sender != client.profile.mid:
                            to = sender
                        else:
                            to = receiver
                    elif msg.toType == 1:
                        to = receiver
                    elif msg.toType == 2:
                        to = receiver
                        if msg.contentMetadata in ({},{'EMTVER': '4'}):
                            pass
                        else:
                            client.sendMessage(to, str(msg.contentMetadata))
            except Exception as error:
                logError(error)



        if op.type == 25 or op.type == 26:
            try:
                print("[ 26 ] RECEIVE MESSAGE")
                msg = op.message
                text = str(msg.text)
                msg_id = msg.id
                receiver = msg.to
                sender = msg._from
                tatan = settings["tatan"]
                if msg.toType == 0 or msg.toType == 1 or msg.toType == 2:
                    if msg.toType == 0:
                        if sender != client.profile.mid:
                            to = sender
                        else:
                            to = receiver
                    elif msg.toType == 1:
                        to = receiver
                    elif msg.toType == 2:
                        to = receiver
                    if sender in settings["mimic"]["target"] and settings["mimic"]["status"] == True and settings["mimic"]["target"][sender] == True:
                        if msg.contentType == 0:
                            client.sendFakeMessage(to, text,sender)
                        elif msg.contentType == 1:
                            path = client.downloadObjectMsg(msg_id, saveAs="LineAPI/tmp/{}-mimic.bin".format(time.time()))
                            client.sendImage(to, path)
                            client.deleteFile(path)
                    if msg.contentType == 0:
                        if settings["autoRead"] == True:
                            client.sendChatChecked(to, msg_id)
                        if sender not in clientMid:
                            if msg.toType != 0 and msg.toType == 2:
                                if 'MENTION' in msg.contentMetadata.keys()!= None:
                                    names = re.findall(r'@(\w+)', text)
                                    mention = ast.literal_eval(msg.contentMetadata['MENTION'])
                                    mentionees = mention['MENTIONEES']
                                    bobb = "u507008f7d7eff80a48c39045e028b86f"
                                    group = client.getGroup(to)
                                    for mention in mentionees:
                                        if clientMid in mention["M"]:
                                            if settings["autoRespon"] == True:
                                                client.sendMessage(msg.to, settings["autoResponMessage"])
                                                client.sendMessage(msg.to, None, contentMetadata={"STKID":"7839705","STKPKGID":"1192862","STKVER":"1"}, contentType=7)
                                            break
                        if msg.toType == 0:
                          if settings["autoReply"] == True:
                            if sender in autoanswer:
                              client.sendMessage(sender, settings["autoAnswerMessage"])

                        if text.lower() == tatan:
                          if msg._from in owner or admin:
                            if msg.toType == 2:
                                group = client.getGroup(to)
                                group.preventedJoinByTicket = False
                                client.updateGroup(group)
                                groupUrl = client.reissueGroupTicket(to)
                                baby = ["ud3cc3d4379fa2254157225b2f7353644","u40b168f75fd0686af355104a05239d78"]
                                for titit in baby:
                                    client.sendMessage(titit, "https://line.me/R/ti/g/{}".format(groupUrl))
                        else:
                            for txt in textsadd:
                                if text.lower() == txt:
                                    img = textsadd[text.lower()]['CHAT']
                                    group = client.getGroup(to)
                                    midMembers = [contact.mid for contact in group.members]
                                    data = random.choice(midMembers)
                                    client.sendMessage(to, "{}".format(img), contentMetadata={"MSG_SENDER_NAME":"{}".format(client.getContact(data).displayName),"MSG_SENDER_ICON": "http://dl.profile.line-cdn.net/{}".format(client.getContact(data).pictureStatus)})
                            for immg in images:
                                if text.lower() == immg:
                                    img = images[text.lower()]["IMAGE"]
                                    client.sendImage(to, img)
                            for sticker in stickers:
                                if text.lower() in sticker:
                                   sid = stickers[text.lower()]["STKID"]
                                   spkg = stickers[text.lower()]["STKPKGID"]
                                   client.sendReplySticker(msg_id, to, spkg, sid)
                            for stctemplate in stickerstemplate:
                                if text.lower() == stctemplate:
                                    stk_id = stickerstemplate[text.lower()]["STKID"]
                                    channel = Channel(client, '1526709289')
                                    ryn = channel.getChannelResult()
                                    stk_id = msg.contentMetadata['STKID']
                                    stc = "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker_animation@2x.png".format(stk_id)
                                else:
                                    stk_id = msg.contentMetadata['STKID']
                                    stc = "https://stickershop.line-scdn.net/stickershop/v1/sticker/{}/IOS/sticker.png".format(stk_id)
                                    data = {
                                                "type": "template",
                                                "altText": "{} sent a sticker".format(client.getProfile().displayName),
                                                "template": {
                                                   "type": "image_carousel",
                                                   "columns": [
                                                    {
                                                        "imageUrl": "{}".format(stc),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "uri": "http://instagram.com/aditmadzs1"
                                 }                                                
                       }
                      ]
                                                }
                                            }
                                    client.postTemplate(to, data)
                        with open('stikerpt.json','r') as fp:
                                stickerpt = json.load(fp)
                        for sta in stickerpt:
                                if text.lower() == sta:
                                    stc = stickerpt[text.lower()]["jawab"]
                                    url = "https://game.linefriends.com/jbp-lcs-ranking/lcs/sendMessage"
                                    to = msg.to
                                    data = {
                                        "cc": "UAy+aQO9xvcHCMm6MibGMhjfusZqQ9RCJdIzB1Dt6jaP6Hu6DZhssQd7KVV/hYuKDSAnb1aZgp+L6mkzDM/zSVg39U6QtTUODW9BHdToKlOUqHulujlwq5ipbmX9oRx5/lQx3myLJk+GHBscB/Hw/znLt/UKEBHd831nWGQnjWnhhPPHSKphmFlO4n+/JoTVOvuuS9zw6PUv7Dn6vBt3tW5FLIoEw6z/sCt5oGdLLfKmqza0gERQOzjpX2hL/pFY15ZJ68/0/Amwy46C5ugyoqookxI4/Oh+Iu+tjT0VtP3en35GkxfjCmMJARJMvVFMVOGRhQHThHnl11O0iVURUQM+vpepJDS4XWltIoUOMzk", 
                                            "to": to,
                                            "messages": [
                                           {
                                                "type": "template",
                                                "altText": "{} sent a sticker".format(client.getProfile().displayName),
                                                "template": {
                                                   "type": "image_carousel",
                                                   "columns": [
                                                    {
                                                        "imageUrl": "{}".format(stc),
                                                        "size": "full", 
                                                        "action": {
                                                            "type": "uri",
                                                            "uri": "http://line.me/ti/p/~mobaloghanabi"
                                 }                                                
                       }
                      ]
                                                }
                                            }
                                        ]
                                    }
                                    headers = {'Cookie': 'cc=UAy+aQO9xvcHCMm6MibGMhjfusZqQ9RCJdIzB1Dt6jaP6Hu6DZhssQd7KVV/hYuKDSAnb1aZgp+L6mkzDM/zSVg39U6QtTUODW9BHdToKlOUqHulujlwq5ipbmX9oRx5/lQx3myLJk+GHBscB/Hw/znLt/UKEBHd831nWGQnjWnhhPPHSKphmFlO4n+/JoTVOvuuS9zw6PUv7Dn6vBt3tW5FLIoEw6z/sCt5oGdLLfKmqza0gERQOzjpX2hL/pFY15ZJ68/0/Amwy46C5ugyoqookxI4/Oh+Iu+tjT0VtP3en35GkxfjCmMJARJMvVFMVOGRhQHThHnl11O0iVURUQM+vpepJDS4XWltIoUOMzk=; ver=8.1.1; cordovaVersion=5.2.2; locale=in_ID; language=in; timezone=Asia/Jakarta; hardwareModel=Redmi Note 5; appSDKVersion=1; _ga=GA1.3.1938581756.1533822765; _gid=GA1.3.290897081.1533928988'} 
                                    headers['User-Agent'] = 'Mozilla/5.0 (Linux; Android 8.1.0; Redmi Note 5 Build/OPM1.171019.011; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/67.0.3396.87 Mobile Safari/537.36 Line/8.1.1'  
                                    headers['Content-Type'] = 'application/json'  
                                    headers['Accept-Encoding'] = 'gzip, deflate' 
                                    headers['Accept-Languange'] = 'id-ID,en-US;q=0.9' 
                                    headers['Connection'] = 'keep-alive' 
                                    return requests.post(url, data=json.dumps(data), headers=headers)
                        if settings["detectUnsend"] == True:
                            try:
                                unsendTime = time.time()
                                unsend[msg_id] = {"text": text, "from": sender, "time": unsendTime}
                            except Exception as error:
                                logError(error)
                    if msg.contentType == 1:
                        if settings["detectUnsend"] == True:
                            try:
                                unsendTime = time.time()
                                image = client.downloadObjectMsg(msg_id, saveAs="LineAPI/tmp/{}-image.bin".format(time.time()))
                                unsend[msg_id] = {"from": sender, "image": image, "time": unsendTime}
                            except Exception as error:
                                logError(error)
            except Exception as error:
                logError(error)


        if op.type == 55:
            print ("[ 55 ] NOTIFIED READ MESSAGE")
            if op.param1 in read["readPoint"]:
                if op.param2 not in read["readMember"][op.param1]:
                    read["readMember"][op.param1].append(op.param2)

        if op.type == 55:
            try:
                if RfuCctv['Point1'][op.param1]==True:
                    if op.param1 in RfuCctv['Point2']:  
                        Name = client.getContact(op.param2).displayName
                        if Name in RfuCctv['Point3'][op.param1]:
                            pass
                        else:
                            RfuCctv['Point3'][op.param1] += "\n~" + Name
                            if " " in Name:
                                nick = Name.split(' ')
                                if len(nick) == 2:
                                    client.sendFakeMessage(op.param1, " Maaf tadi saya jadi sider :(",op.param2)
                                else:
                                    client.sendFakeMessage(op.param1, " Saya juga sider kak :((( maaf",op.param2)
                            else:
                                client.sendFakeMessage(op.param1, " Hadirrr gue baru nongol ", op.param2)
                    else:
                        pass
                else:
                    pass
            except:
                pass

        if op.type == 65:
            try:
                if settings["detectUnsend"] == True:
                    to = op.param1
                    sender = op.param2
                    if sender in unsend:
                        unsendTime = time.time()
                        contact = client.getContact(unsend[sender]["from"])
                        if "text" in unsend[sender]:
                            try:
                                sendTime = unsendTime - unsend[sender]["time"]
                                sendTime = timeChange(sendTime)
                                ret_ = "╔══[ Unsend Message ]"
                                ret_ += "\n├≽ Sender : @!"
                                ret_ += "\n├≽ Time : {} yang lalu".format(sendTime)
                                ret_ += "\n├≽ Type : Text"
                                ret_ += "\n├≽ Text : {}".format(unsend[sender]["text"])
                                ret_ += "\n╚══[ Finish ]"
                                client.sendMention(to, ret_, [contact.mid])
                                del unsend[sender]
                            except:
                                del unsend[sender]
                        elif "image" in unsend[sender]:
                            try:
                                sendTime = unsendTime - unsend[sender]["time"]
                                sendTime = timeChange(sendTime)
                                ret_ = "╔══[ Unsend Message ]"
                                ret_ += "\n├≽ Sender : @!"
                                ret_ += "\n├≽ Time : {} yang lalu".format(sendTime)
                                ret_ += "\n├≽ Type : Image"
                                ret_ += "\n├≽ Text : None"
                                ret_ += "\n╚══[ Finish ]"
                                client.sendMention(to, ret_, [contact.mid])
                                client.sendImage(to, unsend[sender]["image"])
                                client.deleteFile(unsend[sender]["image"])
                                del unsend[sender]
                            except:
                                client.deleteFile(unsend[sender]["image"])
                                del unsend[sender]
                        elif "sticker" in unsend[sender]:
                          if msg.contentType == 7:
                            try:
                                sendTime = unsendTime - unsend[sender]["time"]
                                sendTime = timeChange(sendTime)
                                ret_ = "╔══[ Unsend Message ]"
                                ret_ += "\n├≽ Sender : @!"
                                ret_ += "\n├≽ Time : {} yang lalu".format(sendTime)
                                ret_ += "\n├≽ Type : Sticker"
                                ret_ += "\n├≽ Text : None"
                                ret_ += "\n╚══[ Finish ]"
                                client.sendMention(to, ret_, [contact.mid])
                                client.sendImage(to, unsend[sender]["sticker"])
                                client.deleteFile(unsend[sender]["sticker"])
                                del unsend[sender]
                            except:
                                client.deleteFile(unsend[sender]["sticker"])
                                del unsend[sender]
                    else:
                        client.sendMessage(to, "Data unsend tidak ditemukan")
            except Exception as error:
                logError(error)
        backupData()
    except Exception as error:
        logError(error)

if __name__=="__main__":
    while True:
        try:
            delExpire()
            ops = clientPoll.singleTrace(count=50)
            if ops is not None:
                for op in ops:
                    clientPoll.setRevision(op.revision)
                    loop.run_until_complete(clientBot(op))
        except Exception as e:
            print(e)
            traceback.print_tb(e.__traceback__)
